21-09-10 09:50:51.397 - INFO:   name: RCAN_branch1
  use_tb_logger: True
  model: sr
  distortion: sr
  scale: 4
  gpu_ids: [0, 1, 2, 3]
  network_G:[
    which_model_G: RCAN
    n_resblocks: 20
    n_feats: 36
    n_resgroups: 10
    res_scale: 1
    n_colors: 3
    rgb_range: 255
    scale: 4
    reduction: 16
  ]
  datasets:[
    train:[
      name: DIV2K
      mode: LQGT_rcan
      dataroot_GT: dataset/DIV2K_scale_sub_psnr_GT_class1
      dataroot_LQ: dataset/DIV2K_scale_sub_psnr_LR_class1
      use_shuffle: True
      n_workers: 6
      batch_size: 4
      GT_size: 128
      use_flip: True
      use_rot: True
      color: RGB
      phase: train
      scale: 4
      data_type: img
    ]
    val:[
      name: Set5
      mode: LQGT_rcan
      dataroot_GT: dataset/Set5_valid_sub/GT
      dataroot_LQ: dataset/Set5_valid_sub/LR
      phase: val
      scale: 4
      data_type: img
    ]
  ]
  path:[
    pretrain_model_G: dataset/resume.pth
    strict_load: True
    resume_state: dataset/resume.state
    root: /root/paddlejob/workspace/code/ClassSR_paddle-develop
    experiments_root: /root/paddlejob/workspace/code/ClassSR_paddle-develop/experiments/RCAN_branch1
    models: /root/paddlejob/workspace/code/ClassSR_paddle-develop/experiments/RCAN_branch1/models
    training_state: /root/paddlejob/workspace/code/ClassSR_paddle-develop/experiments/RCAN_branch1/training_state
    log: /root/paddlejob/workspace/code/ClassSR_paddle-develop/experiments/RCAN_branch1
    val_images: /root/paddlejob/workspace/code/ClassSR_paddle-develop/experiments/RCAN_branch1/val_images
  ]
  train:[
    lr_G: 0.0002
    lr_scheme: CosineAnnealingLR_Restart
    beta1: 0.9
    beta2: 0.99
    niter: 500000
    warmup_iter: -1
    T_period: [500000]
    restarts: [500000]
    restart_weights: [1]
    eta_min: 1e-07
    lr_gamma: 0.5
    clear_state: 1000000
    pixel_criterion: l1
    pixel_weight: 1.0
    manual_seed: 483
    val_freq: 5000
  ]
  logger:[
    print_freq: 100
    save_checkpoint_freq: 5000
  ]
  is_train: True
  dist: True

21-09-10 09:50:51.409 - INFO: Random seed: 483
21-09-10 09:50:57.273 - INFO: Dataset [LQGTDataset_rcan - DIV2K] is created.
21-09-10 09:50:57.274 - INFO: Number of train images: 531,406, iters: 132,852
21-09-10 09:50:57.274 - INFO: Total epochs needed: 4 for iters 500,000
21-09-10 09:50:57.276 - INFO: Dataset [LQGTDataset_rcan - Set5] is created.
21-09-10 09:50:57.276 - INFO: Number of val images in [Set5]: 252
21-09-10 09:50:58.561 - INFO: Network G structure: RCAN, with parameters: 4,940,707
21-09-10 09:50:58.660 - INFO: RCAN(
  (sub_mean): MeanShift(3, 3, kernel_size=[1, 1], data_format=NCHW)
  (add_mean): MeanShift(3, 3, kernel_size=[1, 1], data_format=NCHW)
  (head): Sequential(
    (0): Conv2D(3, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
  )
  (body): Sequential(
    (0): ResidualGroup(
      (body): Sequential(
        (0): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (1): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (2): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (3): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (4): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (5): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (6): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (7): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (8): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (9): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (10): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (11): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (12): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (13): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (14): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (15): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (16): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (17): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (18): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (19): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (20): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
      )
    )
    (1): ResidualGroup(
      (body): Sequential(
        (0): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (1): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (2): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (3): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (4): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (5): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (6): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (7): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (8): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (9): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (10): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (11): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (12): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (13): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (14): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (15): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (16): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (17): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (18): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (19): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (20): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
      )
    )
    (2): ResidualGroup(
      (body): Sequential(
        (0): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (1): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (2): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (3): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (4): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (5): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (6): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (7): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (8): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (9): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (10): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (11): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (12): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (13): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (14): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (15): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (16): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (17): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (18): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (19): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (20): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
      )
    )
    (3): ResidualGroup(
      (body): Sequential(
        (0): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (1): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (2): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (3): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (4): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (5): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (6): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (7): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (8): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (9): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (10): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (11): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (12): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (13): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (14): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (15): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (16): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (17): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (18): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (19): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (20): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
      )
    )
    (4): ResidualGroup(
      (body): Sequential(
        (0): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (1): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (2): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (3): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (4): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (5): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (6): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (7): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (8): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (9): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (10): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (11): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (12): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (13): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (14): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (15): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (16): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (17): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (18): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (19): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (20): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
      )
    )
    (5): ResidualGroup(
      (body): Sequential(
        (0): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (1): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (2): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (3): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (4): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (5): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (6): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (7): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (8): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (9): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (10): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (11): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (12): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (13): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (14): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (15): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (16): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (17): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (18): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (19): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (20): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
      )
    )
    (6): ResidualGroup(
      (body): Sequential(
        (0): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (1): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (2): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (3): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (4): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (5): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (6): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (7): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (8): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (9): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (10): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (11): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (12): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (13): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (14): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (15): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (16): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (17): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (18): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (19): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (20): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
      )
    )
    (7): ResidualGroup(
      (body): Sequential(
        (0): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (1): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (2): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (3): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (4): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (5): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (6): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (7): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (8): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (9): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (10): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (11): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (12): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (13): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (14): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (15): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (16): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (17): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (18): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (19): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (20): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
      )
    )
    (8): ResidualGroup(
      (body): Sequential(
        (0): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (1): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (2): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (3): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (4): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (5): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (6): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (7): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (8): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (9): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (10): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (11): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (12): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (13): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (14): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (15): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (16): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (17): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (18): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (19): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (20): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
      )
    )
    (9): ResidualGroup(
      (body): Sequential(
        (0): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (1): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (2): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (3): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (4): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (5): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (6): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (7): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (8): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (9): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (10): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (11): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (12): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (13): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (14): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (15): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (16): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (17): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (18): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (19): RCAB(
          (body): Sequential(
            (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (20): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
      )
    )
    (10): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2D(36, 144, kernel_size=[3, 3], padding=1, data_format=NCHW)
      (1): PixelShuffle(upscale_factor=2)
      (2): Conv2D(36, 144, kernel_size=[3, 3], padding=1, data_format=NCHW)
      (3): PixelShuffle(upscale_factor=2)
    )
    (1): Conv2D(36, 3, kernel_size=[3, 3], padding=1, data_format=NCHW)
  )
)
21-09-10 09:50:58.666 - INFO: Loading model for G [dataset/resume.pth] ...
21-09-10 09:50:59.925 - INFO: Model [SRModel] is created.
21-09-10 09:50:59.925 - INFO: Resuming training from epoch: 1, iter: 335000.
21-09-10 09:50:59.925 - INFO: Start training from epoch: 1, iter: 335000
21-09-10 09:52:17.669 - INFO: [epoch:  1, iter: 335,100, lr:(4.912e-05,)] l_pix: 2.6162e+00 
21-09-10 09:53:38.364 - INFO: [epoch:  1, iter: 335,200, lr:(4.906e-05,)] l_pix: 1.5571e+00 
21-09-10 09:55:04.224 - INFO: [epoch:  1, iter: 335,300, lr:(4.901e-05,)] l_pix: 1.4338e+00 
21-09-10 09:56:21.897 - INFO: [epoch:  1, iter: 335,400, lr:(4.895e-05,)] l_pix: 1.5325e+00 
21-09-10 09:57:36.369 - INFO: [epoch:  1, iter: 335,500, lr:(4.890e-05,)] l_pix: 4.9139e-01 
21-09-10 09:58:51.133 - INFO: [epoch:  1, iter: 335,600, lr:(4.885e-05,)] l_pix: 2.8258e-01 
21-09-10 10:00:06.379 - INFO: [epoch:  1, iter: 335,700, lr:(4.879e-05,)] l_pix: 9.4090e-01 
21-09-10 10:01:21.449 - INFO: [epoch:  1, iter: 335,800, lr:(4.874e-05,)] l_pix: 9.3481e-01 
21-09-10 10:02:36.233 - INFO: [epoch:  1, iter: 335,900, lr:(4.869e-05,)] l_pix: 1.5084e+00 
21-09-10 10:03:51.052 - INFO: [epoch:  1, iter: 336,000, lr:(4.863e-05,)] l_pix: 1.0733e+00 
21-09-10 10:05:06.721 - INFO: [epoch:  1, iter: 336,100, lr:(4.858e-05,)] l_pix: 2.0522e+00 
21-09-10 10:06:22.131 - INFO: [epoch:  1, iter: 336,200, lr:(4.852e-05,)] l_pix: 9.5840e-01 
21-09-10 10:07:36.219 - INFO: [epoch:  1, iter: 336,300, lr:(4.847e-05,)] l_pix: 2.3766e+00 
21-09-10 10:08:50.279 - INFO: [epoch:  1, iter: 336,400, lr:(4.842e-05,)] l_pix: 1.5387e+00 
21-09-10 10:10:05.442 - INFO: [epoch:  1, iter: 336,500, lr:(4.836e-05,)] l_pix: 1.5060e+00 
21-09-10 10:11:20.654 - INFO: [epoch:  1, iter: 336,600, lr:(4.831e-05,)] l_pix: 1.2099e+00 
21-09-10 10:12:35.742 - INFO: [epoch:  1, iter: 336,700, lr:(4.825e-05,)] l_pix: 7.0336e-01 
21-09-10 10:13:50.955 - INFO: [epoch:  1, iter: 336,800, lr:(4.820e-05,)] l_pix: 9.2593e-01 
21-09-10 10:15:07.317 - INFO: [epoch:  1, iter: 336,900, lr:(4.815e-05,)] l_pix: 7.3273e-01 
21-09-10 10:16:23.344 - INFO: [epoch:  1, iter: 337,000, lr:(4.809e-05,)] l_pix: 9.0934e-01 
21-09-10 10:17:39.252 - INFO: [epoch:  1, iter: 337,100, lr:(4.804e-05,)] l_pix: 1.3620e+00 
21-09-10 10:18:54.305 - INFO: [epoch:  1, iter: 337,200, lr:(4.799e-05,)] l_pix: 1.8107e+00 
21-09-10 10:20:09.082 - INFO: [epoch:  1, iter: 337,300, lr:(4.793e-05,)] l_pix: 4.7718e-01 
21-09-10 10:21:24.670 - INFO: [epoch:  1, iter: 337,400, lr:(4.788e-05,)] l_pix: 2.1486e+00 
21-09-10 10:22:40.271 - INFO: [epoch:  1, iter: 337,500, lr:(4.783e-05,)] l_pix: 1.1688e+00 
21-09-10 10:23:56.017 - INFO: [epoch:  1, iter: 337,600, lr:(4.777e-05,)] l_pix: 8.0760e-01 
21-09-10 10:25:11.713 - INFO: [epoch:  1, iter: 337,700, lr:(4.772e-05,)] l_pix: 2.2382e+00 
21-09-10 10:26:27.320 - INFO: [epoch:  1, iter: 337,800, lr:(4.767e-05,)] l_pix: 1.2159e+00 
21-09-10 10:27:42.896 - INFO: [epoch:  1, iter: 337,900, lr:(4.761e-05,)] l_pix: 1.5203e+00 
21-09-10 10:28:58.544 - INFO: [epoch:  1, iter: 338,000, lr:(4.756e-05,)] l_pix: 5.5004e-01 
21-09-10 10:30:14.206 - INFO: [epoch:  1, iter: 338,100, lr:(4.750e-05,)] l_pix: 1.0934e+00 
21-09-10 10:31:29.759 - INFO: [epoch:  1, iter: 338,200, lr:(4.745e-05,)] l_pix: 9.5018e-01 
21-09-10 10:32:44.535 - INFO: [epoch:  1, iter: 338,300, lr:(4.740e-05,)] l_pix: 1.4330e+00 
21-09-10 10:33:59.275 - INFO: [epoch:  1, iter: 338,400, lr:(4.734e-05,)] l_pix: 6.2541e-01 
21-09-10 10:35:14.223 - INFO: [epoch:  1, iter: 338,500, lr:(4.729e-05,)] l_pix: 8.9328e-01 
21-09-10 10:36:29.802 - INFO: [epoch:  1, iter: 338,600, lr:(4.724e-05,)] l_pix: 2.4381e+00 
21-09-10 10:37:45.419 - INFO: [epoch:  1, iter: 338,700, lr:(4.718e-05,)] l_pix: 1.2948e+00 
21-09-10 10:39:01.313 - INFO: [epoch:  1, iter: 338,800, lr:(4.713e-05,)] l_pix: 1.1825e+00 
21-09-10 10:40:17.113 - INFO: [epoch:  1, iter: 338,900, lr:(4.708e-05,)] l_pix: 9.8652e-01 
21-09-10 10:41:32.741 - INFO: [epoch:  1, iter: 339,000, lr:(4.702e-05,)] l_pix: 3.2374e+00 
21-09-10 10:42:48.768 - INFO: [epoch:  1, iter: 339,100, lr:(4.697e-05,)] l_pix: 1.2089e+00 
21-09-10 10:44:04.126 - INFO: [epoch:  1, iter: 339,200, lr:(4.692e-05,)] l_pix: 9.7650e-01 
21-09-10 10:45:19.352 - INFO: [epoch:  1, iter: 339,300, lr:(4.687e-05,)] l_pix: 5.6634e-01 
21-09-10 10:46:34.715 - INFO: [epoch:  1, iter: 339,400, lr:(4.681e-05,)] l_pix: 2.1447e+00 
21-09-10 10:47:50.631 - INFO: [epoch:  1, iter: 339,500, lr:(4.676e-05,)] l_pix: 1.3054e+00 
21-09-10 10:49:06.691 - INFO: [epoch:  1, iter: 339,600, lr:(4.671e-05,)] l_pix: 1.6976e+00 
21-09-10 10:50:22.613 - INFO: [epoch:  1, iter: 339,700, lr:(4.665e-05,)] l_pix: 2.0839e+00 
21-09-10 10:51:37.985 - INFO: [epoch:  1, iter: 339,800, lr:(4.660e-05,)] l_pix: 2.3217e+00 
21-09-10 10:52:53.321 - INFO: [epoch:  1, iter: 339,900, lr:(4.655e-05,)] l_pix: 1.4141e+00 
21-09-10 10:54:08.553 - INFO: [epoch:  1, iter: 340,000, lr:(4.649e-05,)] l_pix: 1.0134e+00 
21-09-10 10:55:27.472 - INFO: # Validation # PSNR: 2.8984e+01
21-09-10 10:55:27.473 - INFO: Saving models and training states.
21-09-10 10:56:43.719 - INFO: [epoch:  1, iter: 340,100, lr:(4.644e-05,)] l_pix: 6.9610e-01 
21-09-10 10:57:59.505 - INFO: [epoch:  1, iter: 340,200, lr:(4.639e-05,)] l_pix: 1.9712e+00 
21-09-10 10:59:15.035 - INFO: [epoch:  1, iter: 340,300, lr:(4.633e-05,)] l_pix: 1.7367e+00 
21-09-10 11:00:30.787 - INFO: [epoch:  1, iter: 340,400, lr:(4.628e-05,)] l_pix: 1.6662e-01 
21-09-10 11:01:46.157 - INFO: [epoch:  1, iter: 340,500, lr:(4.623e-05,)] l_pix: 1.1867e+00 
21-09-10 11:03:01.852 - INFO: [epoch:  1, iter: 340,600, lr:(4.618e-05,)] l_pix: 4.3025e-01 
21-09-10 11:04:16.581 - INFO: [epoch:  1, iter: 340,700, lr:(4.612e-05,)] l_pix: 8.7399e-01 
21-09-10 11:05:32.198 - INFO: [epoch:  1, iter: 340,800, lr:(4.607e-05,)] l_pix: 1.2081e+00 
21-09-10 11:06:47.798 - INFO: [epoch:  1, iter: 340,900, lr:(4.602e-05,)] l_pix: 5.8169e-01 
21-09-10 11:08:03.701 - INFO: [epoch:  1, iter: 341,000, lr:(4.596e-05,)] l_pix: 2.5738e+00 
21-09-10 11:09:19.436 - INFO: [epoch:  1, iter: 341,100, lr:(4.591e-05,)] l_pix: 1.3167e+00 
21-09-10 11:10:35.326 - INFO: [epoch:  1, iter: 341,200, lr:(4.586e-05,)] l_pix: 1.7630e-01 
21-09-10 11:11:54.346 - INFO: [epoch:  1, iter: 341,300, lr:(4.581e-05,)] l_pix: 5.2638e-01 
21-09-10 11:13:22.828 - INFO: [epoch:  1, iter: 341,400, lr:(4.575e-05,)] l_pix: 1.5628e+00 
21-09-10 11:14:51.158 - INFO: [epoch:  1, iter: 341,500, lr:(4.570e-05,)] l_pix: 1.5930e+00 
21-09-10 11:16:19.823 - INFO: [epoch:  1, iter: 341,600, lr:(4.565e-05,)] l_pix: 2.9046e+00 
21-09-10 11:17:47.857 - INFO: [epoch:  1, iter: 341,700, lr:(4.560e-05,)] l_pix: 6.3254e-01 
21-09-10 11:19:10.428 - INFO: [epoch:  1, iter: 341,800, lr:(4.554e-05,)] l_pix: 4.7034e-01 
21-09-10 11:20:26.387 - INFO: [epoch:  1, iter: 341,900, lr:(4.549e-05,)] l_pix: 2.0802e+00 
21-09-10 11:21:42.009 - INFO: [epoch:  1, iter: 342,000, lr:(4.544e-05,)] l_pix: 1.8264e+00 
21-09-10 11:22:57.584 - INFO: [epoch:  1, iter: 342,100, lr:(4.538e-05,)] l_pix: 1.2160e+00 
21-09-10 11:24:13.248 - INFO: [epoch:  1, iter: 342,200, lr:(4.533e-05,)] l_pix: 7.1142e-01 
21-09-10 11:25:33.639 - INFO: [epoch:  1, iter: 342,300, lr:(4.528e-05,)] l_pix: 5.2302e-01 
21-09-10 11:27:02.011 - INFO: [epoch:  1, iter: 342,400, lr:(4.523e-05,)] l_pix: 1.3464e+00 
21-09-10 11:28:30.322 - INFO: [epoch:  1, iter: 342,500, lr:(4.517e-05,)] l_pix: 6.0304e-01 
21-09-10 11:29:58.566 - INFO: [epoch:  1, iter: 342,600, lr:(4.512e-05,)] l_pix: 4.8018e-01 
21-09-10 11:31:26.730 - INFO: [epoch:  1, iter: 342,700, lr:(4.507e-05,)] l_pix: 2.3194e+00 
21-09-10 11:32:55.065 - INFO: [epoch:  1, iter: 342,800, lr:(4.502e-05,)] l_pix: 5.0966e-01 
21-09-10 11:34:23.072 - INFO: [epoch:  1, iter: 342,900, lr:(4.496e-05,)] l_pix: 2.8540e+00 
21-09-10 11:35:51.464 - INFO: [epoch:  1, iter: 343,000, lr:(4.491e-05,)] l_pix: 4.6619e-01 
21-09-10 11:37:19.559 - INFO: [epoch:  1, iter: 343,100, lr:(4.486e-05,)] l_pix: 5.3084e-01 
21-09-10 11:38:47.572 - INFO: [epoch:  1, iter: 343,200, lr:(4.481e-05,)] l_pix: 9.6910e-01 
21-09-10 11:40:15.835 - INFO: [epoch:  1, iter: 343,300, lr:(4.476e-05,)] l_pix: 1.5273e+00 
21-09-10 11:41:43.282 - INFO: [epoch:  1, iter: 343,400, lr:(4.470e-05,)] l_pix: 1.6011e+00 
21-09-10 11:43:10.701 - INFO: [epoch:  1, iter: 343,500, lr:(4.465e-05,)] l_pix: 6.9601e-01 
21-09-10 11:44:38.009 - INFO: [epoch:  1, iter: 343,600, lr:(4.460e-05,)] l_pix: 3.7777e-01 
21-09-10 11:46:05.862 - INFO: [epoch:  1, iter: 343,700, lr:(4.455e-05,)] l_pix: 9.0091e-01 
21-09-10 11:47:33.087 - INFO: [epoch:  1, iter: 343,800, lr:(4.449e-05,)] l_pix: 6.2897e-01 
21-09-10 11:49:00.619 - INFO: [epoch:  1, iter: 343,900, lr:(4.444e-05,)] l_pix: 8.5862e-01 
21-09-10 11:50:26.018 - INFO: [epoch:  1, iter: 344,000, lr:(4.439e-05,)] l_pix: 8.7879e-01 
21-09-10 11:51:41.630 - INFO: [epoch:  1, iter: 344,100, lr:(4.434e-05,)] l_pix: 6.8011e-01 
21-09-10 11:52:56.474 - INFO: [epoch:  1, iter: 344,200, lr:(4.429e-05,)] l_pix: 1.7070e+00 
21-09-10 11:54:11.301 - INFO: [epoch:  1, iter: 344,300, lr:(4.423e-05,)] l_pix: 2.6173e+00 
21-09-10 11:55:26.435 - INFO: [epoch:  1, iter: 344,400, lr:(4.418e-05,)] l_pix: 5.5856e-01 
21-09-10 11:56:41.089 - INFO: [epoch:  1, iter: 344,500, lr:(4.413e-05,)] l_pix: 1.0641e+00 
21-09-10 11:57:56.061 - INFO: [epoch:  1, iter: 344,600, lr:(4.408e-05,)] l_pix: 9.1119e-01 
21-09-10 11:59:10.809 - INFO: [epoch:  1, iter: 344,700, lr:(4.403e-05,)] l_pix: 1.5033e+00 
21-09-10 12:00:26.043 - INFO: [epoch:  1, iter: 344,800, lr:(4.397e-05,)] l_pix: 2.4829e+00 
21-09-10 12:01:40.718 - INFO: [epoch:  1, iter: 344,900, lr:(4.392e-05,)] l_pix: 8.6759e-01 
21-09-10 12:02:55.574 - INFO: [epoch:  1, iter: 345,000, lr:(4.387e-05,)] l_pix: 6.2439e-01 
21-09-10 12:04:14.201 - INFO: # Validation # PSNR: 2.8982e+01
21-09-10 12:04:14.201 - INFO: Saving models and training states.
21-09-10 12:05:30.282 - INFO: [epoch:  1, iter: 345,100, lr:(4.382e-05,)] l_pix: 9.6181e-01 
21-09-10 12:06:45.726 - INFO: [epoch:  1, iter: 345,200, lr:(4.377e-05,)] l_pix: 2.3719e+00 
21-09-10 12:08:01.043 - INFO: [epoch:  1, iter: 345,300, lr:(4.371e-05,)] l_pix: 1.0364e+00 
21-09-10 12:09:16.566 - INFO: [epoch:  1, iter: 345,400, lr:(4.366e-05,)] l_pix: 2.1533e+00 
21-09-10 12:10:32.107 - INFO: [epoch:  1, iter: 345,500, lr:(4.361e-05,)] l_pix: 4.7663e-01 
21-09-10 12:11:47.675 - INFO: [epoch:  1, iter: 345,600, lr:(4.356e-05,)] l_pix: 2.9179e+00 
21-09-10 12:13:03.356 - INFO: [epoch:  1, iter: 345,700, lr:(4.351e-05,)] l_pix: 6.0890e-01 
21-09-10 12:14:18.931 - INFO: [epoch:  1, iter: 345,800, lr:(4.345e-05,)] l_pix: 5.7545e-01 
21-09-10 12:15:34.556 - INFO: [epoch:  1, iter: 345,900, lr:(4.340e-05,)] l_pix: 2.5830e+00 
21-09-10 12:16:50.095 - INFO: [epoch:  1, iter: 346,000, lr:(4.335e-05,)] l_pix: 1.3865e+00 
21-09-10 12:18:05.529 - INFO: [epoch:  1, iter: 346,100, lr:(4.330e-05,)] l_pix: 1.6500e+00 
21-09-10 12:19:20.993 - INFO: [epoch:  1, iter: 346,200, lr:(4.325e-05,)] l_pix: 1.0344e+00 
21-09-10 12:20:36.894 - INFO: [epoch:  1, iter: 346,300, lr:(4.320e-05,)] l_pix: 6.1534e-01 
21-09-10 12:21:51.688 - INFO: [epoch:  1, iter: 346,400, lr:(4.314e-05,)] l_pix: 5.9719e-01 
21-09-10 12:23:06.216 - INFO: [epoch:  1, iter: 346,500, lr:(4.309e-05,)] l_pix: 1.1405e+00 
21-09-10 12:24:20.902 - INFO: [epoch:  1, iter: 346,600, lr:(4.304e-05,)] l_pix: 1.7858e+00 
21-09-10 12:25:36.176 - INFO: [epoch:  1, iter: 346,700, lr:(4.299e-05,)] l_pix: 2.3172e+00 
21-09-10 12:26:51.036 - INFO: [epoch:  1, iter: 346,800, lr:(4.294e-05,)] l_pix: 1.5757e+00 
21-09-10 12:28:05.801 - INFO: [epoch:  1, iter: 346,900, lr:(4.289e-05,)] l_pix: 1.2862e+00 
21-09-10 12:29:20.741 - INFO: [epoch:  1, iter: 347,000, lr:(4.283e-05,)] l_pix: 1.4047e+00 
21-09-10 12:30:35.779 - INFO: [epoch:  1, iter: 347,100, lr:(4.278e-05,)] l_pix: 2.2587e+00 
21-09-10 12:31:50.529 - INFO: [epoch:  1, iter: 347,200, lr:(4.273e-05,)] l_pix: 1.7717e+00 
21-09-10 12:33:05.566 - INFO: [epoch:  1, iter: 347,300, lr:(4.268e-05,)] l_pix: 1.1300e+00 
21-09-10 12:34:20.349 - INFO: [epoch:  1, iter: 347,400, lr:(4.263e-05,)] l_pix: 5.4978e-01 
21-09-10 12:35:35.231 - INFO: [epoch:  1, iter: 347,500, lr:(4.258e-05,)] l_pix: 8.3270e-01 
21-09-10 12:36:49.926 - INFO: [epoch:  1, iter: 347,600, lr:(4.253e-05,)] l_pix: 2.3341e+00 
21-09-10 12:38:04.539 - INFO: [epoch:  1, iter: 347,700, lr:(4.247e-05,)] l_pix: 1.2766e+00 
21-09-10 12:39:19.209 - INFO: [epoch:  1, iter: 347,800, lr:(4.242e-05,)] l_pix: 1.8695e+00 
21-09-10 12:40:34.115 - INFO: [epoch:  1, iter: 347,900, lr:(4.237e-05,)] l_pix: 6.2931e-01 
21-09-10 12:41:48.620 - INFO: [epoch:  1, iter: 348,000, lr:(4.232e-05,)] l_pix: 4.7287e-01 
21-09-10 12:43:02.880 - INFO: [epoch:  1, iter: 348,100, lr:(4.227e-05,)] l_pix: 6.6721e-01 
21-09-10 12:44:18.944 - INFO: [epoch:  1, iter: 348,200, lr:(4.222e-05,)] l_pix: 5.5538e-01 
21-09-10 12:45:34.729 - INFO: [epoch:  1, iter: 348,300, lr:(4.217e-05,)] l_pix: 2.0723e+00 
21-09-10 12:46:50.330 - INFO: [epoch:  1, iter: 348,400, lr:(4.212e-05,)] l_pix: 6.6795e-01 
21-09-10 12:48:06.024 - INFO: [epoch:  1, iter: 348,500, lr:(4.207e-05,)] l_pix: 7.3404e-01 
21-09-10 12:49:21.967 - INFO: [epoch:  1, iter: 348,600, lr:(4.201e-05,)] l_pix: 1.1379e+00 
21-09-10 12:50:37.144 - INFO: [epoch:  1, iter: 348,700, lr:(4.196e-05,)] l_pix: 1.0471e+00 
21-09-10 12:51:52.076 - INFO: [epoch:  1, iter: 348,800, lr:(4.191e-05,)] l_pix: 1.3359e+00 
21-09-10 12:53:06.828 - INFO: [epoch:  1, iter: 348,900, lr:(4.186e-05,)] l_pix: 1.5843e+00 
21-09-10 12:54:21.672 - INFO: [epoch:  1, iter: 349,000, lr:(4.181e-05,)] l_pix: 7.7023e-01 
21-09-10 12:55:36.543 - INFO: [epoch:  1, iter: 349,100, lr:(4.176e-05,)] l_pix: 6.3734e-01 
21-09-10 12:56:51.552 - INFO: [epoch:  1, iter: 349,200, lr:(4.171e-05,)] l_pix: 2.5065e+00 
21-09-10 12:58:06.557 - INFO: [epoch:  1, iter: 349,300, lr:(4.166e-05,)] l_pix: 2.1776e+00 
21-09-10 12:59:21.491 - INFO: [epoch:  1, iter: 349,400, lr:(4.161e-05,)] l_pix: 1.0361e+00 
21-09-10 13:00:36.442 - INFO: [epoch:  1, iter: 349,500, lr:(4.155e-05,)] l_pix: 2.8921e-01 
21-09-10 13:01:51.446 - INFO: [epoch:  1, iter: 349,600, lr:(4.150e-05,)] l_pix: 5.1847e-01 
21-09-10 13:03:06.172 - INFO: [epoch:  1, iter: 349,700, lr:(4.145e-05,)] l_pix: 8.4878e-01 
21-09-10 13:04:21.115 - INFO: [epoch:  1, iter: 349,800, lr:(4.140e-05,)] l_pix: 1.9306e+00 
21-09-10 13:05:35.965 - INFO: [epoch:  1, iter: 349,900, lr:(4.135e-05,)] l_pix: 1.2237e+00 
21-09-10 13:06:50.632 - INFO: [epoch:  1, iter: 350,000, lr:(4.130e-05,)] l_pix: 2.2127e+00 
21-09-10 13:08:08.583 - INFO: # Validation # PSNR: 2.8987e+01
21-09-10 13:08:08.584 - INFO: Saving models and training states.
21-09-10 13:09:23.765 - INFO: [epoch:  1, iter: 350,100, lr:(4.125e-05,)] l_pix: 3.7830e-01 
21-09-10 13:10:38.645 - INFO: [epoch:  1, iter: 350,200, lr:(4.120e-05,)] l_pix: 9.1275e-01 
21-09-10 13:11:53.665 - INFO: [epoch:  1, iter: 350,300, lr:(4.115e-05,)] l_pix: 3.1690e-01 
21-09-10 13:13:08.530 - INFO: [epoch:  1, iter: 350,400, lr:(4.110e-05,)] l_pix: 2.4665e+00 
21-09-10 13:14:23.398 - INFO: [epoch:  1, iter: 350,500, lr:(4.105e-05,)] l_pix: 1.4323e+00 
21-09-10 13:15:38.673 - INFO: [epoch:  1, iter: 350,600, lr:(4.100e-05,)] l_pix: 1.3767e+00 
21-09-10 13:16:54.073 - INFO: [epoch:  1, iter: 350,700, lr:(4.095e-05,)] l_pix: 5.3068e-01 
21-09-10 13:18:09.020 - INFO: [epoch:  1, iter: 350,800, lr:(4.089e-05,)] l_pix: 5.0299e-01 
21-09-10 13:19:23.781 - INFO: [epoch:  1, iter: 350,900, lr:(4.084e-05,)] l_pix: 2.2613e+00 
21-09-10 13:20:38.584 - INFO: [epoch:  1, iter: 351,000, lr:(4.079e-05,)] l_pix: 7.4045e-01 
21-09-10 13:21:53.136 - INFO: [epoch:  1, iter: 351,100, lr:(4.074e-05,)] l_pix: 2.5047e+00 
21-09-10 13:23:07.850 - INFO: [epoch:  1, iter: 351,200, lr:(4.069e-05,)] l_pix: 1.7337e+00 
21-09-10 13:24:22.549 - INFO: [epoch:  1, iter: 351,300, lr:(4.064e-05,)] l_pix: 4.4362e-01 
21-09-10 13:25:37.940 - INFO: [epoch:  1, iter: 351,400, lr:(4.059e-05,)] l_pix: 6.4599e-01 
21-09-10 13:26:52.415 - INFO: [epoch:  1, iter: 351,500, lr:(4.054e-05,)] l_pix: 1.0046e+00 
21-09-10 13:28:06.798 - INFO: [epoch:  1, iter: 351,600, lr:(4.049e-05,)] l_pix: 1.2793e+00 
21-09-10 13:29:21.339 - INFO: [epoch:  1, iter: 351,700, lr:(4.044e-05,)] l_pix: 6.8268e-01 
21-09-10 13:30:36.338 - INFO: [epoch:  1, iter: 351,800, lr:(4.039e-05,)] l_pix: 5.6310e-01 
21-09-10 13:31:50.848 - INFO: [epoch:  1, iter: 351,900, lr:(4.034e-05,)] l_pix: 3.1379e+00 
21-09-10 13:33:05.472 - INFO: [epoch:  1, iter: 352,000, lr:(4.029e-05,)] l_pix: 1.7457e+00 
21-09-10 13:34:19.945 - INFO: [epoch:  1, iter: 352,100, lr:(4.024e-05,)] l_pix: 2.8515e+00 
21-09-10 13:35:34.550 - INFO: [epoch:  1, iter: 352,200, lr:(4.019e-05,)] l_pix: 1.3190e+00 
21-09-10 13:36:49.309 - INFO: [epoch:  1, iter: 352,300, lr:(4.014e-05,)] l_pix: 2.2748e+00 
21-09-10 13:38:04.181 - INFO: [epoch:  1, iter: 352,400, lr:(4.009e-05,)] l_pix: 1.8785e+00 
21-09-10 13:39:19.253 - INFO: [epoch:  1, iter: 352,500, lr:(4.004e-05,)] l_pix: 4.9945e-01 
21-09-10 13:40:34.638 - INFO: [epoch:  1, iter: 352,600, lr:(3.999e-05,)] l_pix: 8.3291e-01 
21-09-10 13:41:50.099 - INFO: [epoch:  1, iter: 352,700, lr:(3.994e-05,)] l_pix: 1.2539e+00 
21-09-10 13:43:05.605 - INFO: [epoch:  1, iter: 352,800, lr:(3.989e-05,)] l_pix: 2.0585e+00 
21-09-10 13:44:21.034 - INFO: [epoch:  1, iter: 352,900, lr:(3.984e-05,)] l_pix: 7.6132e-01 
21-09-10 13:45:35.521 - INFO: [epoch:  1, iter: 353,000, lr:(3.979e-05,)] l_pix: 9.8927e-01 
21-09-10 13:46:49.682 - INFO: [epoch:  1, iter: 353,100, lr:(3.974e-05,)] l_pix: 3.2467e+00 
21-09-10 13:48:03.922 - INFO: [epoch:  1, iter: 353,200, lr:(3.969e-05,)] l_pix: 1.2425e+00 
21-09-10 13:49:18.118 - INFO: [epoch:  1, iter: 353,300, lr:(3.964e-05,)] l_pix: 6.0014e-01 
21-09-10 13:50:32.254 - INFO: [epoch:  1, iter: 353,400, lr:(3.959e-05,)] l_pix: 1.1043e+00 
21-09-10 13:51:46.432 - INFO: [epoch:  1, iter: 353,500, lr:(3.954e-05,)] l_pix: 2.1697e+00 
21-09-10 13:53:00.795 - INFO: [epoch:  1, iter: 353,600, lr:(3.949e-05,)] l_pix: 6.4833e-01 
21-09-10 13:54:15.012 - INFO: [epoch:  1, iter: 353,700, lr:(3.944e-05,)] l_pix: 6.0245e-01 
21-09-10 13:55:29.313 - INFO: [epoch:  1, iter: 353,800, lr:(3.939e-05,)] l_pix: 5.5630e-01 
21-09-10 13:56:48.671 - INFO: [epoch:  1, iter: 353,900, lr:(3.934e-05,)] l_pix: 2.1425e+00 
21-09-10 13:58:03.080 - INFO: [epoch:  1, iter: 354,000, lr:(3.929e-05,)] l_pix: 6.1927e-01 
21-09-10 13:59:17.412 - INFO: [epoch:  1, iter: 354,100, lr:(3.924e-05,)] l_pix: 1.7175e+00 
21-09-10 14:00:31.837 - INFO: [epoch:  1, iter: 354,200, lr:(3.919e-05,)] l_pix: 2.0118e+00 
21-09-10 14:01:46.208 - INFO: [epoch:  1, iter: 354,300, lr:(3.914e-05,)] l_pix: 2.4131e+00 
21-09-10 14:03:00.739 - INFO: [epoch:  1, iter: 354,400, lr:(3.909e-05,)] l_pix: 1.0544e+00 
21-09-10 14:04:15.118 - INFO: [epoch:  1, iter: 354,500, lr:(3.904e-05,)] l_pix: 1.6851e+00 
21-09-10 14:05:29.445 - INFO: [epoch:  1, iter: 354,600, lr:(3.899e-05,)] l_pix: 1.7569e+00 
21-09-10 14:06:43.700 - INFO: [epoch:  1, iter: 354,700, lr:(3.894e-05,)] l_pix: 1.0505e+00 
21-09-10 14:07:57.868 - INFO: [epoch:  1, iter: 354,800, lr:(3.889e-05,)] l_pix: 1.6134e+00 
21-09-10 14:09:12.089 - INFO: [epoch:  1, iter: 354,900, lr:(3.884e-05,)] l_pix: 1.0140e+00 
21-09-10 14:10:26.389 - INFO: [epoch:  1, iter: 355,000, lr:(3.879e-05,)] l_pix: 5.6449e-01 
21-09-10 14:11:44.859 - INFO: # Validation # PSNR: 2.9002e+01
21-09-10 14:11:44.859 - INFO: Saving models and training states.
21-09-10 14:13:00.312 - INFO: [epoch:  1, iter: 355,100, lr:(3.874e-05,)] l_pix: 8.6381e-01 
21-09-10 14:14:14.585 - INFO: [epoch:  1, iter: 355,200, lr:(3.869e-05,)] l_pix: 1.9691e+00 
21-09-10 14:15:29.139 - INFO: [epoch:  1, iter: 355,300, lr:(3.864e-05,)] l_pix: 1.1135e+00 
21-09-10 14:16:43.490 - INFO: [epoch:  1, iter: 355,400, lr:(3.859e-05,)] l_pix: 1.9512e+00 
21-09-10 14:17:58.398 - INFO: [epoch:  1, iter: 355,500, lr:(3.854e-05,)] l_pix: 8.4683e-01 
21-09-10 14:19:12.794 - INFO: [epoch:  1, iter: 355,600, lr:(3.849e-05,)] l_pix: 2.4653e+00 
21-09-10 14:20:27.494 - INFO: [epoch:  1, iter: 355,700, lr:(3.844e-05,)] l_pix: 9.8138e-01 
21-09-10 14:21:41.664 - INFO: [epoch:  1, iter: 355,800, lr:(3.839e-05,)] l_pix: 5.8375e-01 
21-09-10 14:22:56.263 - INFO: [epoch:  1, iter: 355,900, lr:(3.834e-05,)] l_pix: 1.8415e+00 
21-09-10 14:24:11.707 - INFO: [epoch:  1, iter: 356,000, lr:(3.829e-05,)] l_pix: 4.8973e-01 
21-09-10 14:25:27.714 - INFO: [epoch:  1, iter: 356,100, lr:(3.825e-05,)] l_pix: 8.8037e-01 
21-09-10 14:26:43.361 - INFO: [epoch:  1, iter: 356,200, lr:(3.820e-05,)] l_pix: 1.7774e+00 
21-09-10 14:27:59.293 - INFO: [epoch:  1, iter: 356,300, lr:(3.815e-05,)] l_pix: 1.4455e+00 
21-09-10 14:29:13.862 - INFO: [epoch:  1, iter: 356,400, lr:(3.810e-05,)] l_pix: 1.1965e+00 
21-09-10 14:30:28.669 - INFO: [epoch:  1, iter: 356,500, lr:(3.805e-05,)] l_pix: 1.1308e+00 
21-09-10 14:31:42.826 - INFO: [epoch:  1, iter: 356,600, lr:(3.800e-05,)] l_pix: 1.0105e+00 
21-09-10 14:32:57.357 - INFO: [epoch:  1, iter: 356,700, lr:(3.795e-05,)] l_pix: 6.4447e-01 
21-09-10 14:34:11.822 - INFO: [epoch:  1, iter: 356,800, lr:(3.790e-05,)] l_pix: 1.6399e+00 
21-09-10 14:35:26.371 - INFO: [epoch:  1, iter: 356,900, lr:(3.785e-05,)] l_pix: 3.2926e+00 
21-09-10 14:36:40.880 - INFO: [epoch:  1, iter: 357,000, lr:(3.780e-05,)] l_pix: 1.1624e+00 
21-09-10 14:37:55.975 - INFO: [epoch:  1, iter: 357,100, lr:(3.775e-05,)] l_pix: 1.6452e+00 
21-09-10 14:39:10.764 - INFO: [epoch:  1, iter: 357,200, lr:(3.770e-05,)] l_pix: 3.7070e-01 
21-09-10 14:40:26.642 - INFO: [epoch:  1, iter: 357,300, lr:(3.765e-05,)] l_pix: 1.9797e+00 
21-09-10 14:41:42.238 - INFO: [epoch:  1, iter: 357,400, lr:(3.761e-05,)] l_pix: 1.6410e+00 
21-09-10 14:42:58.136 - INFO: [epoch:  1, iter: 357,500, lr:(3.756e-05,)] l_pix: 2.5029e+00 
21-09-10 14:44:14.275 - INFO: [epoch:  1, iter: 357,600, lr:(3.751e-05,)] l_pix: 1.7598e+00 
21-09-10 14:45:30.896 - INFO: [epoch:  1, iter: 357,700, lr:(3.746e-05,)] l_pix: 2.5460e+00 
21-09-10 14:46:46.624 - INFO: [epoch:  1, iter: 357,800, lr:(3.741e-05,)] l_pix: 3.7031e+00 
21-09-10 14:48:02.035 - INFO: [epoch:  1, iter: 357,900, lr:(3.736e-05,)] l_pix: 1.4450e+00 
21-09-10 14:49:16.387 - INFO: [epoch:  1, iter: 358,000, lr:(3.731e-05,)] l_pix: 7.4299e-01 
21-09-10 14:50:31.137 - INFO: [epoch:  1, iter: 358,100, lr:(3.726e-05,)] l_pix: 5.2569e-01 
21-09-10 14:51:45.721 - INFO: [epoch:  1, iter: 358,200, lr:(3.721e-05,)] l_pix: 7.3896e-01 
21-09-10 14:53:00.325 - INFO: [epoch:  1, iter: 358,300, lr:(3.717e-05,)] l_pix: 1.5652e+00 
21-09-10 14:54:20.562 - INFO: [epoch:  1, iter: 358,400, lr:(3.712e-05,)] l_pix: 1.4406e+00 
21-09-10 14:55:47.420 - INFO: [epoch:  1, iter: 358,500, lr:(3.707e-05,)] l_pix: 1.4686e+00 
21-09-10 14:57:14.801 - INFO: [epoch:  1, iter: 358,600, lr:(3.702e-05,)] l_pix: 1.9864e+00 
21-09-10 14:58:42.032 - INFO: [epoch:  1, iter: 358,700, lr:(3.697e-05,)] l_pix: 1.2144e+00 
21-09-10 15:00:09.982 - INFO: [epoch:  1, iter: 358,800, lr:(3.692e-05,)] l_pix: 2.3469e+00 
21-09-10 15:01:37.497 - INFO: [epoch:  1, iter: 358,900, lr:(3.687e-05,)] l_pix: 1.7832e+00 
21-09-10 15:03:04.834 - INFO: [epoch:  1, iter: 359,000, lr:(3.682e-05,)] l_pix: 4.2775e-01 
21-09-10 15:04:32.401 - INFO: [epoch:  1, iter: 359,100, lr:(3.678e-05,)] l_pix: 2.6685e+00 
21-09-10 15:06:00.078 - INFO: [epoch:  1, iter: 359,200, lr:(3.673e-05,)] l_pix: 2.0245e+00 
21-09-10 15:07:27.288 - INFO: [epoch:  1, iter: 359,300, lr:(3.668e-05,)] l_pix: 1.4969e+00 
21-09-10 15:08:54.716 - INFO: [epoch:  1, iter: 359,400, lr:(3.663e-05,)] l_pix: 1.7127e+00 
21-09-10 15:10:17.670 - INFO: [epoch:  1, iter: 359,500, lr:(3.658e-05,)] l_pix: 2.8123e+00 
21-09-10 15:11:32.589 - INFO: [epoch:  1, iter: 359,600, lr:(3.653e-05,)] l_pix: 2.1383e+00 
21-09-10 15:12:47.401 - INFO: [epoch:  1, iter: 359,700, lr:(3.648e-05,)] l_pix: 1.9824e+00 
21-09-10 15:14:02.052 - INFO: [epoch:  1, iter: 359,800, lr:(3.644e-05,)] l_pix: 2.6330e+00 
21-09-10 15:15:17.313 - INFO: [epoch:  1, iter: 359,900, lr:(3.639e-05,)] l_pix: 2.4464e+00 
21-09-10 15:16:32.504 - INFO: [epoch:  1, iter: 360,000, lr:(3.634e-05,)] l_pix: 1.9093e+00 
21-09-10 15:17:51.845 - INFO: # Validation # PSNR: 2.9043e+01
21-09-10 15:17:51.846 - INFO: Saving models and training states.
21-09-10 15:19:07.654 - INFO: [epoch:  1, iter: 360,100, lr:(3.629e-05,)] l_pix: 5.1726e-01 
21-09-10 15:20:22.464 - INFO: [epoch:  1, iter: 360,200, lr:(3.624e-05,)] l_pix: 6.5584e-01 
21-09-10 15:21:37.367 - INFO: [epoch:  1, iter: 360,300, lr:(3.619e-05,)] l_pix: 1.4708e+00 
21-09-10 15:22:52.233 - INFO: [epoch:  1, iter: 360,400, lr:(3.615e-05,)] l_pix: 2.2343e+00 
21-09-10 15:24:07.094 - INFO: [epoch:  1, iter: 360,500, lr:(3.610e-05,)] l_pix: 1.2571e+00 
21-09-10 15:25:23.532 - INFO: [epoch:  1, iter: 360,600, lr:(3.605e-05,)] l_pix: 1.7432e+00 
21-09-10 15:26:49.509 - INFO: [epoch:  1, iter: 360,700, lr:(3.600e-05,)] l_pix: 1.4741e+00 
21-09-10 15:28:16.152 - INFO: [epoch:  1, iter: 360,800, lr:(3.595e-05,)] l_pix: 1.4091e+00 
21-09-10 15:29:44.232 - INFO: [epoch:  1, iter: 360,900, lr:(3.590e-05,)] l_pix: 2.1952e+00 
21-09-10 15:31:07.563 - INFO: [epoch:  1, iter: 361,000, lr:(3.586e-05,)] l_pix: 4.6220e-01 
21-09-10 15:32:21.944 - INFO: [epoch:  1, iter: 361,100, lr:(3.581e-05,)] l_pix: 8.0038e-01 
21-09-10 15:33:36.271 - INFO: [epoch:  1, iter: 361,200, lr:(3.576e-05,)] l_pix: 9.0259e-01 
21-09-10 15:34:50.635 - INFO: [epoch:  1, iter: 361,300, lr:(3.571e-05,)] l_pix: 1.0591e+00 
21-09-10 15:36:05.036 - INFO: [epoch:  1, iter: 361,400, lr:(3.566e-05,)] l_pix: 2.8474e-01 
21-09-10 15:37:19.326 - INFO: [epoch:  1, iter: 361,500, lr:(3.562e-05,)] l_pix: 1.2794e+00 
21-09-10 15:38:33.688 - INFO: [epoch:  1, iter: 361,600, lr:(3.557e-05,)] l_pix: 3.2016e+00 
21-09-10 15:39:48.046 - INFO: [epoch:  1, iter: 361,700, lr:(3.552e-05,)] l_pix: 4.2239e-01 
21-09-10 15:41:02.397 - INFO: [epoch:  1, iter: 361,800, lr:(3.547e-05,)] l_pix: 1.8721e+00 
21-09-10 15:42:16.715 - INFO: [epoch:  1, iter: 361,900, lr:(3.542e-05,)] l_pix: 1.5206e+00 
21-09-10 15:43:31.037 - INFO: [epoch:  1, iter: 362,000, lr:(3.538e-05,)] l_pix: 6.5044e-01 
21-09-10 15:44:50.835 - INFO: [epoch:  1, iter: 362,100, lr:(3.533e-05,)] l_pix: 6.0236e-01 
21-09-10 15:46:17.653 - INFO: [epoch:  1, iter: 362,200, lr:(3.528e-05,)] l_pix: 2.7025e+00 
21-09-10 15:47:43.875 - INFO: [epoch:  1, iter: 362,300, lr:(3.523e-05,)] l_pix: 7.1224e-01 
21-09-10 15:49:10.480 - INFO: [epoch:  1, iter: 362,400, lr:(3.518e-05,)] l_pix: 1.3023e+00 
21-09-10 15:50:37.199 - INFO: [epoch:  1, iter: 362,500, lr:(3.514e-05,)] l_pix: 1.3428e+00 
21-09-10 15:52:03.457 - INFO: [epoch:  1, iter: 362,600, lr:(3.509e-05,)] l_pix: 6.7542e-01 
21-09-10 15:53:29.373 - INFO: [epoch:  1, iter: 362,700, lr:(3.504e-05,)] l_pix: 1.9575e+00 
21-09-10 15:54:44.131 - INFO: [epoch:  1, iter: 362,800, lr:(3.499e-05,)] l_pix: 6.3475e-01 
21-09-10 15:55:59.268 - INFO: [epoch:  1, iter: 362,900, lr:(3.495e-05,)] l_pix: 1.0762e+00 
21-09-10 15:57:14.431 - INFO: [epoch:  1, iter: 363,000, lr:(3.490e-05,)] l_pix: 6.1213e-01 
21-09-10 15:58:30.073 - INFO: [epoch:  1, iter: 363,100, lr:(3.485e-05,)] l_pix: 6.6630e-01 
21-09-10 15:59:45.744 - INFO: [epoch:  1, iter: 363,200, lr:(3.480e-05,)] l_pix: 2.7052e+00 
21-09-10 16:01:01.444 - INFO: [epoch:  1, iter: 363,300, lr:(3.476e-05,)] l_pix: 2.9654e+00 
21-09-10 16:02:16.290 - INFO: [epoch:  1, iter: 363,400, lr:(3.471e-05,)] l_pix: 4.6413e-01 
21-09-10 16:03:30.972 - INFO: [epoch:  1, iter: 363,500, lr:(3.466e-05,)] l_pix: 8.8992e-01 
21-09-10 16:04:45.628 - INFO: [epoch:  1, iter: 363,600, lr:(3.461e-05,)] l_pix: 4.2844e-01 
21-09-10 16:06:00.467 - INFO: [epoch:  1, iter: 363,700, lr:(3.457e-05,)] l_pix: 1.2039e+00 
21-09-10 16:07:15.182 - INFO: [epoch:  1, iter: 363,800, lr:(3.452e-05,)] l_pix: 8.5198e-01 
21-09-10 16:08:29.757 - INFO: [epoch:  1, iter: 363,900, lr:(3.447e-05,)] l_pix: 1.2795e+00 
21-09-10 16:09:43.410 - INFO: [epoch:  1, iter: 364,000, lr:(3.442e-05,)] l_pix: 1.2118e+00 
21-09-10 16:10:58.051 - INFO: [epoch:  1, iter: 364,100, lr:(3.438e-05,)] l_pix: 1.4303e+00 
21-09-10 16:12:12.327 - INFO: [epoch:  1, iter: 364,200, lr:(3.433e-05,)] l_pix: 6.9461e-01 
21-09-10 16:13:26.591 - INFO: [epoch:  1, iter: 364,300, lr:(3.428e-05,)] l_pix: 4.6475e-01 
21-09-10 16:14:40.921 - INFO: [epoch:  1, iter: 364,400, lr:(3.423e-05,)] l_pix: 5.6038e-01 
21-09-10 16:15:55.354 - INFO: [epoch:  1, iter: 364,500, lr:(3.419e-05,)] l_pix: 3.5824e-01 
21-09-10 16:17:09.579 - INFO: [epoch:  1, iter: 364,600, lr:(3.414e-05,)] l_pix: 1.8928e+00 
21-09-10 16:18:23.950 - INFO: [epoch:  1, iter: 364,700, lr:(3.409e-05,)] l_pix: 1.4900e+00 
21-09-10 16:19:38.345 - INFO: [epoch:  1, iter: 364,800, lr:(3.405e-05,)] l_pix: 2.1324e+00 
21-09-10 16:20:53.049 - INFO: [epoch:  1, iter: 364,900, lr:(3.400e-05,)] l_pix: 3.9078e-01 
21-09-10 16:22:08.199 - INFO: [epoch:  1, iter: 365,000, lr:(3.395e-05,)] l_pix: 3.8266e-01 
21-09-10 16:23:26.811 - INFO: # Validation # PSNR: 2.9019e+01
21-09-10 16:23:26.811 - INFO: Saving models and training states.
21-09-10 16:24:41.917 - INFO: [epoch:  1, iter: 365,100, lr:(3.390e-05,)] l_pix: 3.2664e-01 
21-09-10 16:25:56.947 - INFO: [epoch:  1, iter: 365,200, lr:(3.386e-05,)] l_pix: 3.1521e+00 
21-09-10 16:27:12.432 - INFO: [epoch:  1, iter: 365,300, lr:(3.381e-05,)] l_pix: 1.6364e+00 
21-09-10 16:28:27.888 - INFO: [epoch:  1, iter: 365,400, lr:(3.376e-05,)] l_pix: 7.7552e-01 
21-09-10 16:29:42.649 - INFO: [epoch:  1, iter: 365,500, lr:(3.372e-05,)] l_pix: 3.9095e-01 
21-09-10 16:30:57.810 - INFO: [epoch:  1, iter: 365,600, lr:(3.367e-05,)] l_pix: 3.2060e-01 
21-09-10 16:32:12.357 - INFO: [epoch:  1, iter: 365,700, lr:(3.362e-05,)] l_pix: 4.1185e-01 
21-09-10 16:33:27.279 - INFO: [epoch:  1, iter: 365,800, lr:(3.358e-05,)] l_pix: 1.3580e+00 
21-09-10 16:34:42.711 - INFO: [epoch:  1, iter: 365,900, lr:(3.353e-05,)] l_pix: 4.4811e-01 
21-09-10 16:35:58.405 - INFO: [epoch:  1, iter: 366,000, lr:(3.348e-05,)] l_pix: 1.9846e+00 
21-09-10 16:37:13.959 - INFO: [epoch:  1, iter: 366,100, lr:(3.343e-05,)] l_pix: 2.1319e+00 
21-09-10 16:38:29.387 - INFO: [epoch:  1, iter: 366,200, lr:(3.339e-05,)] l_pix: 1.8865e+00 
21-09-10 16:39:44.686 - INFO: [epoch:  1, iter: 366,300, lr:(3.334e-05,)] l_pix: 9.9711e-01 
21-09-10 16:41:00.393 - INFO: [epoch:  1, iter: 366,400, lr:(3.329e-05,)] l_pix: 9.3817e-01 
21-09-10 16:42:15.828 - INFO: [epoch:  1, iter: 366,500, lr:(3.325e-05,)] l_pix: 7.8379e-01 
21-09-10 16:43:31.283 - INFO: [epoch:  1, iter: 366,600, lr:(3.320e-05,)] l_pix: 2.5456e+00 
21-09-10 16:44:46.489 - INFO: [epoch:  1, iter: 366,700, lr:(3.315e-05,)] l_pix: 1.0445e+00 
21-09-10 16:46:02.497 - INFO: [epoch:  1, iter: 366,800, lr:(3.311e-05,)] l_pix: 1.5057e+00 
21-09-10 16:47:17.220 - INFO: [epoch:  1, iter: 366,900, lr:(3.306e-05,)] l_pix: 1.6947e+00 
21-09-10 16:48:31.837 - INFO: [epoch:  1, iter: 367,000, lr:(3.301e-05,)] l_pix: 1.4595e+00 
21-09-10 16:49:46.321 - INFO: [epoch:  1, iter: 367,100, lr:(3.297e-05,)] l_pix: 1.3812e+00 
21-09-10 16:51:01.527 - INFO: [epoch:  1, iter: 367,200, lr:(3.292e-05,)] l_pix: 2.5234e-01 
21-09-10 16:52:16.529 - INFO: [epoch:  1, iter: 367,300, lr:(3.287e-05,)] l_pix: 4.3110e-01 
21-09-10 16:53:31.105 - INFO: [epoch:  1, iter: 367,400, lr:(3.283e-05,)] l_pix: 1.5691e+00 
21-09-10 16:54:45.556 - INFO: [epoch:  1, iter: 367,500, lr:(3.278e-05,)] l_pix: 7.5818e-01 
21-09-10 16:56:00.954 - INFO: [epoch:  1, iter: 367,600, lr:(3.274e-05,)] l_pix: 8.5109e-01 
21-09-10 16:57:16.723 - INFO: [epoch:  1, iter: 367,700, lr:(3.269e-05,)] l_pix: 1.1468e+00 
21-09-10 16:58:32.667 - INFO: [epoch:  1, iter: 367,800, lr:(3.264e-05,)] l_pix: 1.5550e+00 
21-09-10 16:59:48.560 - INFO: [epoch:  1, iter: 367,900, lr:(3.260e-05,)] l_pix: 7.7042e-01 
21-09-10 17:01:04.068 - INFO: [epoch:  1, iter: 368,000, lr:(3.255e-05,)] l_pix: 6.6577e-01 
21-09-10 17:02:20.055 - INFO: [epoch:  1, iter: 368,100, lr:(3.250e-05,)] l_pix: 4.3954e-01 
21-09-10 17:03:36.023 - INFO: [epoch:  1, iter: 368,200, lr:(3.246e-05,)] l_pix: 2.6094e+00 
21-09-10 17:04:51.868 - INFO: [epoch:  1, iter: 368,300, lr:(3.241e-05,)] l_pix: 9.5929e-01 
21-09-10 17:06:07.991 - INFO: [epoch:  1, iter: 368,400, lr:(3.236e-05,)] l_pix: 9.6255e-01 
21-09-10 17:07:23.383 - INFO: [epoch:  1, iter: 368,500, lr:(3.232e-05,)] l_pix: 2.8030e+00 
21-09-10 17:08:38.048 - INFO: [epoch:  1, iter: 368,600, lr:(3.227e-05,)] l_pix: 1.7708e+00 
21-09-10 17:09:53.177 - INFO: [epoch:  1, iter: 368,700, lr:(3.223e-05,)] l_pix: 2.4156e+00 
21-09-10 17:11:07.408 - INFO: [epoch:  1, iter: 368,800, lr:(3.218e-05,)] l_pix: 2.2280e+00 
21-09-10 17:12:21.512 - INFO: [epoch:  1, iter: 368,900, lr:(3.213e-05,)] l_pix: 5.9556e-01 
21-09-10 17:13:35.682 - INFO: [epoch:  1, iter: 369,000, lr:(3.209e-05,)] l_pix: 1.5815e+00 
21-09-10 17:14:50.511 - INFO: [epoch:  1, iter: 369,100, lr:(3.204e-05,)] l_pix: 1.2424e+00 
21-09-10 17:16:05.455 - INFO: [epoch:  1, iter: 369,200, lr:(3.200e-05,)] l_pix: 7.3964e-01 
21-09-10 17:17:21.417 - INFO: [epoch:  1, iter: 369,300, lr:(3.195e-05,)] l_pix: 4.2732e-01 
21-09-10 17:18:36.434 - INFO: [epoch:  1, iter: 369,400, lr:(3.190e-05,)] l_pix: 5.1595e-01 
21-09-10 17:19:51.640 - INFO: [epoch:  1, iter: 369,500, lr:(3.186e-05,)] l_pix: 6.5642e-01 
21-09-10 17:21:06.573 - INFO: [epoch:  1, iter: 369,600, lr:(3.181e-05,)] l_pix: 2.4801e+00 
21-09-10 17:22:21.472 - INFO: [epoch:  1, iter: 369,700, lr:(3.177e-05,)] l_pix: 1.0612e+00 
21-09-10 17:23:36.610 - INFO: [epoch:  1, iter: 369,800, lr:(3.172e-05,)] l_pix: 4.2777e-01 
21-09-10 17:24:51.248 - INFO: [epoch:  1, iter: 369,900, lr:(3.167e-05,)] l_pix: 1.2064e+00 
21-09-10 17:26:05.870 - INFO: [epoch:  1, iter: 370,000, lr:(3.163e-05,)] l_pix: 1.6182e+00 
21-09-10 17:27:24.120 - INFO: # Validation # PSNR: 2.9023e+01
21-09-10 17:27:24.121 - INFO: Saving models and training states.
21-09-10 17:28:39.671 - INFO: [epoch:  1, iter: 370,100, lr:(3.158e-05,)] l_pix: 9.3787e-01 
21-09-10 17:29:54.629 - INFO: [epoch:  1, iter: 370,200, lr:(3.154e-05,)] l_pix: 5.2743e-01 
21-09-10 17:31:09.382 - INFO: [epoch:  1, iter: 370,300, lr:(3.149e-05,)] l_pix: 1.1263e+00 
21-09-10 17:32:24.269 - INFO: [epoch:  1, iter: 370,400, lr:(3.145e-05,)] l_pix: 6.5932e-01 
21-09-10 17:33:39.060 - INFO: [epoch:  1, iter: 370,500, lr:(3.140e-05,)] l_pix: 2.9015e+00 
21-09-10 17:34:54.054 - INFO: [epoch:  1, iter: 370,600, lr:(3.135e-05,)] l_pix: 1.3500e+00 
21-09-10 17:36:09.418 - INFO: [epoch:  1, iter: 370,700, lr:(3.131e-05,)] l_pix: 1.3716e+00 
21-09-10 17:37:24.466 - INFO: [epoch:  1, iter: 370,800, lr:(3.126e-05,)] l_pix: 6.2386e-01 
21-09-10 17:38:39.653 - INFO: [epoch:  1, iter: 370,900, lr:(3.122e-05,)] l_pix: 2.0239e+00 
21-09-10 17:39:54.279 - INFO: [epoch:  1, iter: 371,000, lr:(3.117e-05,)] l_pix: 6.9359e-01 
21-09-10 17:41:08.563 - INFO: [epoch:  1, iter: 371,100, lr:(3.113e-05,)] l_pix: 1.7558e+00 
21-09-10 17:42:23.014 - INFO: [epoch:  1, iter: 371,200, lr:(3.108e-05,)] l_pix: 1.5834e+00 
21-09-10 17:43:37.567 - INFO: [epoch:  1, iter: 371,300, lr:(3.104e-05,)] l_pix: 1.1309e+00 
21-09-10 17:44:51.983 - INFO: [epoch:  1, iter: 371,400, lr:(3.099e-05,)] l_pix: 5.0298e-01 
21-09-10 17:46:06.522 - INFO: [epoch:  1, iter: 371,500, lr:(3.095e-05,)] l_pix: 2.1155e+00 
21-09-10 17:47:20.861 - INFO: [epoch:  1, iter: 371,600, lr:(3.090e-05,)] l_pix: 7.3762e-01 
21-09-10 17:48:34.990 - INFO: [epoch:  1, iter: 371,700, lr:(3.085e-05,)] l_pix: 6.5505e-01 
21-09-10 17:49:49.205 - INFO: [epoch:  1, iter: 371,800, lr:(3.081e-05,)] l_pix: 1.4072e+00 
21-09-10 17:51:03.725 - INFO: [epoch:  1, iter: 371,900, lr:(3.076e-05,)] l_pix: 9.0334e-01 
21-09-10 17:52:18.258 - INFO: [epoch:  1, iter: 372,000, lr:(3.072e-05,)] l_pix: 9.5318e-01 
21-09-10 17:53:32.532 - INFO: [epoch:  1, iter: 372,100, lr:(3.067e-05,)] l_pix: 1.2594e+00 
21-09-10 17:54:47.075 - INFO: [epoch:  1, iter: 372,200, lr:(3.063e-05,)] l_pix: 6.1977e-01 
21-09-10 17:56:01.474 - INFO: [epoch:  1, iter: 372,300, lr:(3.058e-05,)] l_pix: 2.7137e+00 
21-09-10 17:57:16.219 - INFO: [epoch:  1, iter: 372,400, lr:(3.054e-05,)] l_pix: 7.2177e-01 
21-09-10 17:58:31.704 - INFO: [epoch:  1, iter: 372,500, lr:(3.049e-05,)] l_pix: 1.2994e+00 
21-09-10 17:59:47.290 - INFO: [epoch:  1, iter: 372,600, lr:(3.045e-05,)] l_pix: 5.4776e-01 
21-09-10 18:01:02.783 - INFO: [epoch:  1, iter: 372,700, lr:(3.040e-05,)] l_pix: 7.2745e-01 
21-09-10 18:02:17.956 - INFO: [epoch:  1, iter: 372,800, lr:(3.036e-05,)] l_pix: 6.5983e-02 
21-09-10 18:03:32.892 - INFO: [epoch:  1, iter: 372,900, lr:(3.031e-05,)] l_pix: 1.0460e+00 
21-09-10 18:04:47.966 - INFO: [epoch:  1, iter: 373,000, lr:(3.027e-05,)] l_pix: 1.8486e+00 
21-09-10 18:06:03.480 - INFO: [epoch:  1, iter: 373,100, lr:(3.022e-05,)] l_pix: 6.4419e-01 
21-09-10 18:07:19.098 - INFO: [epoch:  1, iter: 373,200, lr:(3.018e-05,)] l_pix: 1.3966e+00 
21-09-10 18:08:34.762 - INFO: [epoch:  1, iter: 373,300, lr:(3.013e-05,)] l_pix: 2.1154e+00 
21-09-10 18:09:50.422 - INFO: [epoch:  1, iter: 373,400, lr:(3.009e-05,)] l_pix: 8.6736e-01 
21-09-10 18:11:04.745 - INFO: [epoch:  1, iter: 373,500, lr:(3.004e-05,)] l_pix: 8.7178e-01 
21-09-10 18:12:19.478 - INFO: [epoch:  1, iter: 373,600, lr:(3.000e-05,)] l_pix: 9.3662e-01 
21-09-10 18:13:41.457 - INFO: [epoch:  1, iter: 373,700, lr:(2.995e-05,)] l_pix: 1.1179e+00 
21-09-10 18:15:09.405 - INFO: [epoch:  1, iter: 373,800, lr:(2.991e-05,)] l_pix: 1.8159e+00 
21-09-10 18:16:37.057 - INFO: [epoch:  1, iter: 373,900, lr:(2.986e-05,)] l_pix: 1.3917e+00 
21-09-10 18:18:04.342 - INFO: [epoch:  1, iter: 374,000, lr:(2.982e-05,)] l_pix: 1.8901e+00 
21-09-10 18:19:31.699 - INFO: [epoch:  1, iter: 374,100, lr:(2.978e-05,)] l_pix: 2.5139e+00 
21-09-10 18:20:59.459 - INFO: [epoch:  1, iter: 374,200, lr:(2.973e-05,)] l_pix: 1.9888e+00 
21-09-10 18:22:26.864 - INFO: [epoch:  1, iter: 374,300, lr:(2.969e-05,)] l_pix: 1.7902e+00 
21-09-10 18:23:54.452 - INFO: [epoch:  1, iter: 374,400, lr:(2.964e-05,)] l_pix: 2.1186e+00 
21-09-10 18:25:22.353 - INFO: [epoch:  1, iter: 374,500, lr:(2.960e-05,)] l_pix: 7.8039e-01 
21-09-10 18:26:49.789 - INFO: [epoch:  1, iter: 374,600, lr:(2.955e-05,)] l_pix: 1.9108e+00 
21-09-10 18:28:17.245 - INFO: [epoch:  1, iter: 374,700, lr:(2.951e-05,)] l_pix: 3.2745e-01 
21-09-10 18:29:44.462 - INFO: [epoch:  1, iter: 374,800, lr:(2.946e-05,)] l_pix: 1.2959e+00 
21-09-10 18:31:11.670 - INFO: [epoch:  1, iter: 374,900, lr:(2.942e-05,)] l_pix: 6.6788e-01 
21-09-10 18:32:39.098 - INFO: [epoch:  1, iter: 375,000, lr:(2.937e-05,)] l_pix: 1.5870e+00 
21-09-10 18:33:57.797 - INFO: # Validation # PSNR: 2.8907e+01
21-09-10 18:33:57.798 - INFO: Saving models and training states.
21-09-10 18:35:25.973 - INFO: [epoch:  1, iter: 375,100, lr:(2.933e-05,)] l_pix: 1.0739e+00 
21-09-10 18:36:53.398 - INFO: [epoch:  1, iter: 375,200, lr:(2.929e-05,)] l_pix: 4.8251e-01 
21-09-10 18:38:20.897 - INFO: [epoch:  1, iter: 375,300, lr:(2.924e-05,)] l_pix: 6.9089e-01 
21-09-10 18:39:48.267 - INFO: [epoch:  1, iter: 375,400, lr:(2.920e-05,)] l_pix: 1.2883e+00 
21-09-10 18:41:14.952 - INFO: [epoch:  1, iter: 375,500, lr:(2.915e-05,)] l_pix: 1.6868e+00 
21-09-10 18:42:30.003 - INFO: [epoch:  1, iter: 375,600, lr:(2.911e-05,)] l_pix: 1.4839e+00 
21-09-10 18:43:44.507 - INFO: [epoch:  1, iter: 375,700, lr:(2.906e-05,)] l_pix: 5.7190e-01 
21-09-10 18:44:59.407 - INFO: [epoch:  1, iter: 375,800, lr:(2.902e-05,)] l_pix: 9.9974e-01 
21-09-10 18:46:15.056 - INFO: [epoch:  1, iter: 375,900, lr:(2.898e-05,)] l_pix: 2.0332e+00 
21-09-10 18:47:30.397 - INFO: [epoch:  1, iter: 376,000, lr:(2.893e-05,)] l_pix: 2.7686e+00 
21-09-10 18:48:45.856 - INFO: [epoch:  1, iter: 376,100, lr:(2.889e-05,)] l_pix: 1.5430e+00 
21-09-10 18:50:01.738 - INFO: [epoch:  1, iter: 376,200, lr:(2.884e-05,)] l_pix: 1.7727e+00 
21-09-10 18:51:17.031 - INFO: [epoch:  1, iter: 376,300, lr:(2.880e-05,)] l_pix: 2.5725e+00 
21-09-10 18:52:31.372 - INFO: [epoch:  1, iter: 376,400, lr:(2.876e-05,)] l_pix: 1.5289e+00 
21-09-10 18:53:45.752 - INFO: [epoch:  1, iter: 376,500, lr:(2.871e-05,)] l_pix: 5.4951e-01 
21-09-10 18:55:01.653 - INFO: [epoch:  1, iter: 376,600, lr:(2.867e-05,)] l_pix: 6.1550e-01 
21-09-10 18:56:17.401 - INFO: [epoch:  1, iter: 376,700, lr:(2.862e-05,)] l_pix: 1.5239e+00 
21-09-10 18:57:33.079 - INFO: [epoch:  1, iter: 376,800, lr:(2.858e-05,)] l_pix: 4.5316e-01 
21-09-10 18:58:48.986 - INFO: [epoch:  1, iter: 376,900, lr:(2.854e-05,)] l_pix: 2.5746e-01 
21-09-10 19:00:05.115 - INFO: [epoch:  1, iter: 377,000, lr:(2.849e-05,)] l_pix: 2.6379e+00 
21-09-10 19:01:21.076 - INFO: [epoch:  1, iter: 377,100, lr:(2.845e-05,)] l_pix: 1.3784e+00 
21-09-10 19:02:36.522 - INFO: [epoch:  1, iter: 377,200, lr:(2.840e-05,)] l_pix: 2.3415e+00 
21-09-10 19:03:52.133 - INFO: [epoch:  1, iter: 377,300, lr:(2.836e-05,)] l_pix: 3.0863e-01 
21-09-10 19:05:08.058 - INFO: [epoch:  1, iter: 377,400, lr:(2.832e-05,)] l_pix: 3.7803e-01 
21-09-10 19:06:23.520 - INFO: [epoch:  1, iter: 377,500, lr:(2.827e-05,)] l_pix: 1.8799e+00 
21-09-10 19:07:38.080 - INFO: [epoch:  1, iter: 377,600, lr:(2.823e-05,)] l_pix: 1.4123e+00 
21-09-10 19:08:52.807 - INFO: [epoch:  1, iter: 377,700, lr:(2.819e-05,)] l_pix: 1.2254e+00 
21-09-10 19:10:07.740 - INFO: [epoch:  1, iter: 377,800, lr:(2.814e-05,)] l_pix: 1.3412e+00 
21-09-10 19:11:21.646 - INFO: [epoch:  1, iter: 377,900, lr:(2.810e-05,)] l_pix: 1.6788e+00 
21-09-10 19:12:35.390 - INFO: [epoch:  1, iter: 378,000, lr:(2.805e-05,)] l_pix: 1.1306e+00 
21-09-10 19:13:53.483 - INFO: [epoch:  1, iter: 378,100, lr:(2.801e-05,)] l_pix: 5.4283e-01 
21-09-10 19:15:21.176 - INFO: [epoch:  1, iter: 378,200, lr:(2.797e-05,)] l_pix: 8.7639e-02 
21-09-10 19:16:48.750 - INFO: [epoch:  1, iter: 378,300, lr:(2.792e-05,)] l_pix: 3.3158e+00 
21-09-10 19:18:14.258 - INFO: [epoch:  1, iter: 378,400, lr:(2.788e-05,)] l_pix: 2.2092e+00 
21-09-10 19:19:30.802 - INFO: [epoch:  1, iter: 378,500, lr:(2.784e-05,)] l_pix: 1.4833e+00 
21-09-10 19:20:50.127 - INFO: [epoch:  1, iter: 378,600, lr:(2.779e-05,)] l_pix: 1.0455e+00 
21-09-10 19:22:09.277 - INFO: [epoch:  1, iter: 378,700, lr:(2.775e-05,)] l_pix: 1.3367e+00 
21-09-10 19:23:26.265 - INFO: [epoch:  1, iter: 378,800, lr:(2.771e-05,)] l_pix: 5.8106e-01 
21-09-10 19:24:42.197 - INFO: [epoch:  1, iter: 378,900, lr:(2.766e-05,)] l_pix: 8.8510e-01 
21-09-10 19:25:58.356 - INFO: [epoch:  1, iter: 379,000, lr:(2.762e-05,)] l_pix: 2.0229e+00 
21-09-10 19:27:13.122 - INFO: [epoch:  1, iter: 379,100, lr:(2.758e-05,)] l_pix: 2.4896e+00 
21-09-10 19:28:28.007 - INFO: [epoch:  1, iter: 379,200, lr:(2.753e-05,)] l_pix: 9.5505e-01 
21-09-10 19:29:42.809 - INFO: [epoch:  1, iter: 379,300, lr:(2.749e-05,)] l_pix: 8.6688e-01 
21-09-10 19:30:58.114 - INFO: [epoch:  1, iter: 379,400, lr:(2.745e-05,)] l_pix: 1.2655e+00 
21-09-10 19:32:13.019 - INFO: [epoch:  1, iter: 379,500, lr:(2.740e-05,)] l_pix: 2.0709e+00 
21-09-10 19:33:27.489 - INFO: [epoch:  1, iter: 379,600, lr:(2.736e-05,)] l_pix: 2.8454e+00 
21-09-10 19:34:41.781 - INFO: [epoch:  1, iter: 379,700, lr:(2.732e-05,)] l_pix: 1.9792e+00 
21-09-10 19:35:56.692 - INFO: [epoch:  1, iter: 379,800, lr:(2.728e-05,)] l_pix: 1.8774e+00 
21-09-10 19:37:11.743 - INFO: [epoch:  1, iter: 379,900, lr:(2.723e-05,)] l_pix: 4.9805e-01 
21-09-10 19:38:26.466 - INFO: [epoch:  1, iter: 380,000, lr:(2.719e-05,)] l_pix: 6.6694e-01 
21-09-10 19:39:43.696 - INFO: # Validation # PSNR: 2.8982e+01
21-09-10 19:39:43.697 - INFO: Saving models and training states.
21-09-10 19:40:59.515 - INFO: [epoch:  1, iter: 380,100, lr:(2.715e-05,)] l_pix: 6.3085e-01 
21-09-10 19:42:14.303 - INFO: [epoch:  1, iter: 380,200, lr:(2.710e-05,)] l_pix: 1.1211e+00 
21-09-10 19:43:28.946 - INFO: [epoch:  1, iter: 380,300, lr:(2.706e-05,)] l_pix: 7.8277e-01 
21-09-10 19:44:43.476 - INFO: [epoch:  1, iter: 380,400, lr:(2.702e-05,)] l_pix: 9.4295e-01 
21-09-10 19:45:59.084 - INFO: [epoch:  1, iter: 380,500, lr:(2.697e-05,)] l_pix: 1.4897e+00 
21-09-10 19:47:13.952 - INFO: [epoch:  1, iter: 380,600, lr:(2.693e-05,)] l_pix: 2.1978e+00 
21-09-10 19:48:28.830 - INFO: [epoch:  1, iter: 380,700, lr:(2.689e-05,)] l_pix: 3.2723e+00 
21-09-10 19:49:43.543 - INFO: [epoch:  1, iter: 380,800, lr:(2.685e-05,)] l_pix: 2.2933e+00 
21-09-10 19:50:58.268 - INFO: [epoch:  1, iter: 380,900, lr:(2.680e-05,)] l_pix: 2.2667e+00 
21-09-10 19:52:12.776 - INFO: [epoch:  1, iter: 381,000, lr:(2.676e-05,)] l_pix: 4.8883e-01 
21-09-10 19:53:27.500 - INFO: [epoch:  1, iter: 381,100, lr:(2.672e-05,)] l_pix: 1.3662e+00 
21-09-10 19:54:42.087 - INFO: [epoch:  1, iter: 381,200, lr:(2.668e-05,)] l_pix: 1.0290e+00 
21-09-10 19:55:57.078 - INFO: [epoch:  1, iter: 381,300, lr:(2.663e-05,)] l_pix: 1.0969e+00 
21-09-10 19:57:11.701 - INFO: [epoch:  1, iter: 381,400, lr:(2.659e-05,)] l_pix: 1.0510e+00 
21-09-10 19:58:26.301 - INFO: [epoch:  1, iter: 381,500, lr:(2.655e-05,)] l_pix: 5.7429e-01 
21-09-10 19:59:40.827 - INFO: [epoch:  1, iter: 381,600, lr:(2.651e-05,)] l_pix: 2.6095e+00 
21-09-10 20:00:56.042 - INFO: [epoch:  1, iter: 381,700, lr:(2.646e-05,)] l_pix: 4.8459e-01 
21-09-10 20:02:10.706 - INFO: [epoch:  1, iter: 381,800, lr:(2.642e-05,)] l_pix: 2.1234e+00 
21-09-10 20:03:25.279 - INFO: [epoch:  1, iter: 381,900, lr:(2.638e-05,)] l_pix: 5.1020e-01 
21-09-10 20:04:39.777 - INFO: [epoch:  1, iter: 382,000, lr:(2.634e-05,)] l_pix: 5.2963e-01 
21-09-10 20:05:55.023 - INFO: [epoch:  1, iter: 382,100, lr:(2.629e-05,)] l_pix: 7.5460e-01 
21-09-10 20:07:09.729 - INFO: [epoch:  1, iter: 382,200, lr:(2.625e-05,)] l_pix: 7.6432e-01 
21-09-10 20:08:24.334 - INFO: [epoch:  1, iter: 382,300, lr:(2.621e-05,)] l_pix: 2.1776e+00 
21-09-10 20:09:38.807 - INFO: [epoch:  1, iter: 382,400, lr:(2.617e-05,)] l_pix: 1.4154e+00 
21-09-10 20:10:53.899 - INFO: [epoch:  1, iter: 382,500, lr:(2.612e-05,)] l_pix: 1.2501e+00 
21-09-10 20:12:08.601 - INFO: [epoch:  1, iter: 382,600, lr:(2.608e-05,)] l_pix: 1.3188e+00 
21-09-10 20:13:23.230 - INFO: [epoch:  1, iter: 382,700, lr:(2.604e-05,)] l_pix: 9.6771e-01 
21-09-10 20:14:37.829 - INFO: [epoch:  1, iter: 382,800, lr:(2.600e-05,)] l_pix: 1.0625e+00 
21-09-10 20:15:52.716 - INFO: [epoch:  1, iter: 382,900, lr:(2.595e-05,)] l_pix: 7.1525e-01 
21-09-10 20:17:07.471 - INFO: [epoch:  1, iter: 383,000, lr:(2.591e-05,)] l_pix: 1.7566e+00 
21-09-10 20:18:22.363 - INFO: [epoch:  1, iter: 383,100, lr:(2.587e-05,)] l_pix: 1.8548e+00 
21-09-10 20:19:37.069 - INFO: [epoch:  1, iter: 383,200, lr:(2.583e-05,)] l_pix: 1.6430e+00 
21-09-10 20:20:51.952 - INFO: [epoch:  1, iter: 383,300, lr:(2.579e-05,)] l_pix: 9.0070e-01 
21-09-10 20:22:06.734 - INFO: [epoch:  1, iter: 383,400, lr:(2.574e-05,)] l_pix: 6.5627e-01 
21-09-10 20:23:20.613 - INFO: [epoch:  1, iter: 383,500, lr:(2.570e-05,)] l_pix: 2.1513e+00 
21-09-10 20:24:34.410 - INFO: [epoch:  1, iter: 383,600, lr:(2.566e-05,)] l_pix: 3.4661e-01 
21-09-10 20:25:48.732 - INFO: [epoch:  1, iter: 383,700, lr:(2.562e-05,)] l_pix: 8.4501e-01 
21-09-10 20:27:02.878 - INFO: [epoch:  1, iter: 383,800, lr:(2.558e-05,)] l_pix: 8.9227e-01 
21-09-10 20:28:17.961 - INFO: [epoch:  1, iter: 383,900, lr:(2.553e-05,)] l_pix: 6.5372e-01 
21-09-10 20:29:32.827 - INFO: [epoch:  1, iter: 384,000, lr:(2.549e-05,)] l_pix: 6.1126e-01 
21-09-10 20:30:47.892 - INFO: [epoch:  1, iter: 384,100, lr:(2.545e-05,)] l_pix: 6.2080e-01 
21-09-10 20:32:03.145 - INFO: [epoch:  1, iter: 384,200, lr:(2.541e-05,)] l_pix: 1.5421e+00 
21-09-10 20:33:17.764 - INFO: [epoch:  1, iter: 384,300, lr:(2.537e-05,)] l_pix: 2.6739e-01 
21-09-10 20:34:32.518 - INFO: [epoch:  1, iter: 384,400, lr:(2.533e-05,)] l_pix: 6.4918e-01 
21-09-10 20:35:48.618 - INFO: [epoch:  1, iter: 384,500, lr:(2.528e-05,)] l_pix: 2.2402e+00 
21-09-10 20:37:04.696 - INFO: [epoch:  1, iter: 384,600, lr:(2.524e-05,)] l_pix: 1.6432e+00 
21-09-10 20:38:20.792 - INFO: [epoch:  1, iter: 384,700, lr:(2.520e-05,)] l_pix: 1.8890e+00 
21-09-10 20:39:36.731 - INFO: [epoch:  1, iter: 384,800, lr:(2.516e-05,)] l_pix: 2.8290e+00 
21-09-10 20:40:52.523 - INFO: [epoch:  1, iter: 384,900, lr:(2.512e-05,)] l_pix: 2.2447e+00 
21-09-10 20:42:08.021 - INFO: [epoch:  1, iter: 385,000, lr:(2.508e-05,)] l_pix: 1.2576e+00 
21-09-10 20:43:26.331 - INFO: # Validation # PSNR: 2.9023e+01
21-09-10 20:43:26.332 - INFO: Saving models and training states.
21-09-10 20:44:54.162 - INFO: [epoch:  1, iter: 385,100, lr:(2.503e-05,)] l_pix: 2.9763e+00 
21-09-10 20:46:10.445 - INFO: [epoch:  1, iter: 385,200, lr:(2.499e-05,)] l_pix: 9.0989e-01 
21-09-10 20:47:25.310 - INFO: [epoch:  1, iter: 385,300, lr:(2.495e-05,)] l_pix: 8.3035e-01 
21-09-10 20:48:40.478 - INFO: [epoch:  1, iter: 385,400, lr:(2.491e-05,)] l_pix: 3.2959e-01 
21-09-10 20:49:55.330 - INFO: [epoch:  1, iter: 385,500, lr:(2.487e-05,)] l_pix: 3.2970e+00 
21-09-10 20:51:10.235 - INFO: [epoch:  1, iter: 385,600, lr:(2.483e-05,)] l_pix: 3.1212e+00 
21-09-10 20:52:24.888 - INFO: [epoch:  1, iter: 385,700, lr:(2.479e-05,)] l_pix: 1.7900e+00 
21-09-10 20:53:39.294 - INFO: [epoch:  1, iter: 385,800, lr:(2.474e-05,)] l_pix: 1.9889e+00 
21-09-10 20:54:53.347 - INFO: [epoch:  1, iter: 385,900, lr:(2.470e-05,)] l_pix: 2.8567e-02 
21-09-10 20:56:15.210 - INFO: [epoch:  1, iter: 386,000, lr:(2.466e-05,)] l_pix: 8.3418e-01 
21-09-10 20:57:41.811 - INFO: [epoch:  1, iter: 386,100, lr:(2.462e-05,)] l_pix: 4.5761e-01 
21-09-10 20:59:08.673 - INFO: [epoch:  1, iter: 386,200, lr:(2.458e-05,)] l_pix: 1.3336e+00 
21-09-10 21:00:35.483 - INFO: [epoch:  1, iter: 386,300, lr:(2.454e-05,)] l_pix: 2.9529e-01 
21-09-10 21:02:02.188 - INFO: [epoch:  1, iter: 386,400, lr:(2.450e-05,)] l_pix: 7.4056e-01 
21-09-10 21:03:28.952 - INFO: [epoch:  1, iter: 386,500, lr:(2.446e-05,)] l_pix: 1.8929e+00 
21-09-10 21:04:56.658 - INFO: [epoch:  1, iter: 386,600, lr:(2.442e-05,)] l_pix: 1.6991e+00 
21-09-10 21:06:24.423 - INFO: [epoch:  1, iter: 386,700, lr:(2.437e-05,)] l_pix: 7.1043e-01 
21-09-10 21:07:51.960 - INFO: [epoch:  1, iter: 386,800, lr:(2.433e-05,)] l_pix: 1.7355e+00 
21-09-10 21:09:14.151 - INFO: [epoch:  1, iter: 386,900, lr:(2.429e-05,)] l_pix: 7.1782e-01 
21-09-10 21:10:29.477 - INFO: [epoch:  1, iter: 387,000, lr:(2.425e-05,)] l_pix: 2.1321e+00 
21-09-10 21:11:44.161 - INFO: [epoch:  1, iter: 387,100, lr:(2.421e-05,)] l_pix: 1.3634e+00 
21-09-10 21:12:58.730 - INFO: [epoch:  1, iter: 387,200, lr:(2.417e-05,)] l_pix: 5.6436e-02 
21-09-10 21:14:13.401 - INFO: [epoch:  1, iter: 387,300, lr:(2.413e-05,)] l_pix: 4.0393e-01 
21-09-10 21:15:29.208 - INFO: [epoch:  1, iter: 387,400, lr:(2.409e-05,)] l_pix: 6.9926e-01 
21-09-10 21:16:44.927 - INFO: [epoch:  1, iter: 387,500, lr:(2.405e-05,)] l_pix: 1.7923e+00 
21-09-10 21:18:00.336 - INFO: [epoch:  1, iter: 387,600, lr:(2.401e-05,)] l_pix: 1.4831e+00 
21-09-10 21:19:15.748 - INFO: [epoch:  1, iter: 387,700, lr:(2.397e-05,)] l_pix: 5.0443e-01 
21-09-10 21:20:31.263 - INFO: [epoch:  1, iter: 387,800, lr:(2.392e-05,)] l_pix: 3.2178e-01 
21-09-10 21:21:46.550 - INFO: [epoch:  1, iter: 387,900, lr:(2.388e-05,)] l_pix: 6.5439e-01 
21-09-10 21:23:01.768 - INFO: [epoch:  1, iter: 388,000, lr:(2.384e-05,)] l_pix: 1.8782e+00 
21-09-10 21:24:17.600 - INFO: [epoch:  1, iter: 388,100, lr:(2.380e-05,)] l_pix: 1.0577e+00 
21-09-10 21:25:33.050 - INFO: [epoch:  1, iter: 388,200, lr:(2.376e-05,)] l_pix: 2.2329e+00 
21-09-10 21:26:48.671 - INFO: [epoch:  1, iter: 388,300, lr:(2.372e-05,)] l_pix: 1.8125e+00 
21-09-10 21:28:02.819 - INFO: [epoch:  1, iter: 388,400, lr:(2.368e-05,)] l_pix: 2.1343e+00 
21-09-10 21:29:17.245 - INFO: [epoch:  1, iter: 388,500, lr:(2.364e-05,)] l_pix: 2.4842e+00 
21-09-10 21:30:32.377 - INFO: [epoch:  1, iter: 388,600, lr:(2.360e-05,)] l_pix: 5.6248e-01 
21-09-10 21:31:47.379 - INFO: [epoch:  1, iter: 388,700, lr:(2.356e-05,)] l_pix: 8.7875e-01 
21-09-10 21:33:03.008 - INFO: [epoch:  1, iter: 388,800, lr:(2.352e-05,)] l_pix: 9.3113e-01 
21-09-10 21:34:18.575 - INFO: [epoch:  1, iter: 388,900, lr:(2.348e-05,)] l_pix: 1.0253e+00 
21-09-10 21:35:34.385 - INFO: [epoch:  1, iter: 389,000, lr:(2.344e-05,)] l_pix: 4.5663e-01 
21-09-10 21:36:50.074 - INFO: [epoch:  1, iter: 389,100, lr:(2.340e-05,)] l_pix: 6.5243e-01 
21-09-10 21:38:05.677 - INFO: [epoch:  1, iter: 389,200, lr:(2.336e-05,)] l_pix: 5.5579e-01 
21-09-10 21:39:21.098 - INFO: [epoch:  1, iter: 389,300, lr:(2.332e-05,)] l_pix: 4.9396e-01 
21-09-10 21:40:36.064 - INFO: [epoch:  1, iter: 389,400, lr:(2.328e-05,)] l_pix: 5.0259e-01 
21-09-10 21:41:51.136 - INFO: [epoch:  1, iter: 389,500, lr:(2.324e-05,)] l_pix: 4.5697e-01 
21-09-10 21:43:05.903 - INFO: [epoch:  1, iter: 389,600, lr:(2.320e-05,)] l_pix: 2.2475e+00 
21-09-10 21:44:21.590 - INFO: [epoch:  1, iter: 389,700, lr:(2.316e-05,)] l_pix: 2.4124e-01 
21-09-10 21:45:37.870 - INFO: [epoch:  1, iter: 389,800, lr:(2.312e-05,)] l_pix: 1.6841e+00 
21-09-10 21:46:53.933 - INFO: [epoch:  1, iter: 389,900, lr:(2.308e-05,)] l_pix: 1.5482e+00 
21-09-10 21:48:08.718 - INFO: [epoch:  1, iter: 390,000, lr:(2.304e-05,)] l_pix: 5.2906e-01 
21-09-10 21:49:27.024 - INFO: # Validation # PSNR: 2.8935e+01
21-09-10 21:49:27.025 - INFO: Saving models and training states.
21-09-10 21:50:42.887 - INFO: [epoch:  1, iter: 390,100, lr:(2.300e-05,)] l_pix: 5.0787e-01 
21-09-10 21:52:09.048 - INFO: [epoch:  1, iter: 390,200, lr:(2.296e-05,)] l_pix: 2.0030e+00 
21-09-10 21:53:38.098 - INFO: [epoch:  1, iter: 390,300, lr:(2.292e-05,)] l_pix: 4.6514e-01 
21-09-10 21:55:06.818 - INFO: [epoch:  1, iter: 390,400, lr:(2.288e-05,)] l_pix: 1.0591e+00 
21-09-10 21:56:35.057 - INFO: [epoch:  1, iter: 390,500, lr:(2.284e-05,)] l_pix: 8.3828e-01 
21-09-10 21:58:03.407 - INFO: [epoch:  1, iter: 390,600, lr:(2.280e-05,)] l_pix: 9.5269e-01 
21-09-10 21:59:31.472 - INFO: [epoch:  1, iter: 390,700, lr:(2.276e-05,)] l_pix: 2.6698e+00 
21-09-10 22:01:00.282 - INFO: [epoch:  1, iter: 390,800, lr:(2.272e-05,)] l_pix: 1.0439e+00 
21-09-10 22:02:28.438 - INFO: [epoch:  1, iter: 390,900, lr:(2.268e-05,)] l_pix: 8.6968e-01 
21-09-10 22:03:56.761 - INFO: [epoch:  1, iter: 391,000, lr:(2.264e-05,)] l_pix: 5.8663e-01 
21-09-10 22:05:25.215 - INFO: [epoch:  1, iter: 391,100, lr:(2.260e-05,)] l_pix: 5.0596e-01 
21-09-10 22:06:53.308 - INFO: [epoch:  1, iter: 391,200, lr:(2.256e-05,)] l_pix: 6.2768e-01 
21-09-10 22:08:14.545 - INFO: [epoch:  1, iter: 391,300, lr:(2.252e-05,)] l_pix: 1.8036e+00 
21-09-10 22:09:29.089 - INFO: [epoch:  1, iter: 391,400, lr:(2.248e-05,)] l_pix: 1.5338e+00 
21-09-10 22:10:44.040 - INFO: [epoch:  1, iter: 391,500, lr:(2.244e-05,)] l_pix: 1.1588e+00 
21-09-10 22:11:59.046 - INFO: [epoch:  1, iter: 391,600, lr:(2.240e-05,)] l_pix: 1.0278e+00 
21-09-10 22:13:13.525 - INFO: [epoch:  1, iter: 391,700, lr:(2.236e-05,)] l_pix: 2.1122e+00 
21-09-10 22:14:27.433 - INFO: [epoch:  1, iter: 391,800, lr:(2.232e-05,)] l_pix: 1.6384e+00 
21-09-10 22:15:42.306 - INFO: [epoch:  1, iter: 391,900, lr:(2.228e-05,)] l_pix: 8.8581e-01 
21-09-10 22:16:56.749 - INFO: [epoch:  1, iter: 392,000, lr:(2.224e-05,)] l_pix: 9.5828e-01 
21-09-10 22:18:11.994 - INFO: [epoch:  1, iter: 392,100, lr:(2.220e-05,)] l_pix: 2.3387e+00 
21-09-10 22:19:27.698 - INFO: [epoch:  1, iter: 392,200, lr:(2.216e-05,)] l_pix: 2.3296e+00 
21-09-10 22:20:43.502 - INFO: [epoch:  1, iter: 392,300, lr:(2.212e-05,)] l_pix: 8.7244e-01 
21-09-10 22:21:58.847 - INFO: [epoch:  1, iter: 392,400, lr:(2.208e-05,)] l_pix: 1.8662e+00 
21-09-10 22:23:13.902 - INFO: [epoch:  1, iter: 392,500, lr:(2.205e-05,)] l_pix: 1.5367e-01 
21-09-10 22:24:28.417 - INFO: [epoch:  1, iter: 392,600, lr:(2.201e-05,)] l_pix: 8.4552e-01 
21-09-10 22:25:42.841 - INFO: [epoch:  1, iter: 392,700, lr:(2.197e-05,)] l_pix: 2.6152e+00 
21-09-10 22:26:57.185 - INFO: [epoch:  1, iter: 392,800, lr:(2.193e-05,)] l_pix: 1.6105e+00 
21-09-10 22:28:11.531 - INFO: [epoch:  1, iter: 392,900, lr:(2.189e-05,)] l_pix: 7.9023e-01 
21-09-10 22:29:25.687 - INFO: [epoch:  1, iter: 393,000, lr:(2.185e-05,)] l_pix: 1.3439e+00 
21-09-10 22:30:40.283 - INFO: [epoch:  1, iter: 393,100, lr:(2.181e-05,)] l_pix: 8.2557e-01 
21-09-10 22:31:54.684 - INFO: [epoch:  1, iter: 393,200, lr:(2.177e-05,)] l_pix: 7.0507e-01 
21-09-10 22:33:09.563 - INFO: [epoch:  1, iter: 393,300, lr:(2.173e-05,)] l_pix: 5.3968e-01 
21-09-10 22:34:24.225 - INFO: [epoch:  1, iter: 393,400, lr:(2.169e-05,)] l_pix: 6.6152e-01 
21-09-10 22:35:38.798 - INFO: [epoch:  1, iter: 393,500, lr:(2.165e-05,)] l_pix: 1.9137e+00 
21-09-10 22:36:53.510 - INFO: [epoch:  1, iter: 393,600, lr:(2.162e-05,)] l_pix: 2.4807e+00 
21-09-10 22:38:07.671 - INFO: [epoch:  1, iter: 393,700, lr:(2.158e-05,)] l_pix: 1.0406e+00 
21-09-10 22:39:22.264 - INFO: [epoch:  1, iter: 393,800, lr:(2.154e-05,)] l_pix: 1.8429e+00 
21-09-10 22:40:37.354 - INFO: [epoch:  1, iter: 393,900, lr:(2.150e-05,)] l_pix: 2.7376e-01 
21-09-10 22:41:52.144 - INFO: [epoch:  1, iter: 394,000, lr:(2.146e-05,)] l_pix: 1.8425e+00 
21-09-10 22:43:06.668 - INFO: [epoch:  1, iter: 394,100, lr:(2.142e-05,)] l_pix: 1.8400e+00 
21-09-10 22:44:21.151 - INFO: [epoch:  1, iter: 394,200, lr:(2.138e-05,)] l_pix: 4.9232e-01 
21-09-10 22:45:36.085 - INFO: [epoch:  1, iter: 394,300, lr:(2.134e-05,)] l_pix: 1.7170e+00 
21-09-10 22:46:51.779 - INFO: [epoch:  1, iter: 394,400, lr:(2.131e-05,)] l_pix: 2.5699e+00 
21-09-10 22:48:07.494 - INFO: [epoch:  1, iter: 394,500, lr:(2.127e-05,)] l_pix: 6.5288e-01 
21-09-10 22:49:22.951 - INFO: [epoch:  1, iter: 394,600, lr:(2.123e-05,)] l_pix: 7.9759e-01 
21-09-10 22:50:37.605 - INFO: [epoch:  1, iter: 394,700, lr:(2.119e-05,)] l_pix: 6.3041e-01 
21-09-10 22:51:51.998 - INFO: [epoch:  1, iter: 394,800, lr:(2.115e-05,)] l_pix: 4.0035e-01 
21-09-10 22:53:06.274 - INFO: [epoch:  1, iter: 394,900, lr:(2.111e-05,)] l_pix: 2.5227e+00 
21-09-10 22:54:20.489 - INFO: [epoch:  1, iter: 395,000, lr:(2.107e-05,)] l_pix: 3.5403e-01 
21-09-10 22:55:39.220 - INFO: # Validation # PSNR: 2.9008e+01
21-09-10 22:55:39.221 - INFO: Saving models and training states.
21-09-10 22:56:55.734 - INFO: [epoch:  1, iter: 395,100, lr:(2.104e-05,)] l_pix: 2.6101e+00 
21-09-10 22:58:11.778 - INFO: [epoch:  1, iter: 395,200, lr:(2.100e-05,)] l_pix: 7.4114e-01 
21-09-10 22:59:27.894 - INFO: [epoch:  1, iter: 395,300, lr:(2.096e-05,)] l_pix: 1.5740e+00 
21-09-10 23:00:43.860 - INFO: [epoch:  1, iter: 395,400, lr:(2.092e-05,)] l_pix: 1.3302e+00 
21-09-10 23:01:59.919 - INFO: [epoch:  1, iter: 395,500, lr:(2.088e-05,)] l_pix: 1.1105e+00 
21-09-10 23:03:15.646 - INFO: [epoch:  1, iter: 395,600, lr:(2.084e-05,)] l_pix: 4.7867e-01 
21-09-10 23:04:31.143 - INFO: [epoch:  1, iter: 395,700, lr:(2.080e-05,)] l_pix: 5.2037e-01 
21-09-10 23:05:47.023 - INFO: [epoch:  1, iter: 395,800, lr:(2.077e-05,)] l_pix: 6.0839e-01 
21-09-10 23:07:02.958 - INFO: [epoch:  1, iter: 395,900, lr:(2.073e-05,)] l_pix: 1.2963e+00 
21-09-10 23:08:18.452 - INFO: [epoch:  1, iter: 396,000, lr:(2.069e-05,)] l_pix: 1.9093e+00 
21-09-10 23:09:33.950 - INFO: [epoch:  1, iter: 396,100, lr:(2.065e-05,)] l_pix: 1.3029e+00 
21-09-10 23:10:49.783 - INFO: [epoch:  1, iter: 396,200, lr:(2.061e-05,)] l_pix: 1.4350e+00 
21-09-10 23:12:04.556 - INFO: [epoch:  1, iter: 396,300, lr:(2.058e-05,)] l_pix: 1.0549e+00 
21-09-10 23:13:19.229 - INFO: [epoch:  1, iter: 396,400, lr:(2.054e-05,)] l_pix: 1.3185e+00 
21-09-10 23:14:34.354 - INFO: [epoch:  1, iter: 396,500, lr:(2.050e-05,)] l_pix: 1.1656e+00 
21-09-10 23:15:50.467 - INFO: [epoch:  1, iter: 396,600, lr:(2.046e-05,)] l_pix: 1.6274e+00 
21-09-10 23:17:05.537 - INFO: [epoch:  1, iter: 396,700, lr:(2.042e-05,)] l_pix: 3.4559e-01 
21-09-10 23:18:21.835 - INFO: [epoch:  1, iter: 396,800, lr:(2.039e-05,)] l_pix: 8.0048e-01 
21-09-10 23:19:38.205 - INFO: [epoch:  1, iter: 396,900, lr:(2.035e-05,)] l_pix: 1.0150e+00 
21-09-10 23:20:54.746 - INFO: [epoch:  1, iter: 397,000, lr:(2.031e-05,)] l_pix: 1.5379e+00 
21-09-10 23:22:10.920 - INFO: [epoch:  1, iter: 397,100, lr:(2.027e-05,)] l_pix: 2.4270e+00 
21-09-10 23:23:26.408 - INFO: [epoch:  1, iter: 397,200, lr:(2.023e-05,)] l_pix: 1.0340e+00 
21-09-10 23:24:41.488 - INFO: [epoch:  1, iter: 397,300, lr:(2.020e-05,)] l_pix: 7.3899e-01 
21-09-10 23:25:56.693 - INFO: [epoch:  1, iter: 397,400, lr:(2.016e-05,)] l_pix: 5.5785e-01 
21-09-10 23:27:11.490 - INFO: [epoch:  1, iter: 397,500, lr:(2.012e-05,)] l_pix: 6.5511e-01 
21-09-10 23:28:26.074 - INFO: [epoch:  1, iter: 397,600, lr:(2.008e-05,)] l_pix: 2.8951e+00 
21-09-10 23:29:40.586 - INFO: [epoch:  1, iter: 397,700, lr:(2.005e-05,)] l_pix: 1.3093e+00 
21-09-10 23:30:55.712 - INFO: [epoch:  1, iter: 397,800, lr:(2.001e-05,)] l_pix: 1.9613e+00 
21-09-10 23:32:10.595 - INFO: [epoch:  1, iter: 397,900, lr:(1.997e-05,)] l_pix: 1.7255e+00 
21-09-10 23:33:25.375 - INFO: [epoch:  1, iter: 398,000, lr:(1.993e-05,)] l_pix: 2.1081e+00 
21-09-10 23:34:39.987 - INFO: [epoch:  1, iter: 398,100, lr:(1.990e-05,)] l_pix: 9.2967e-01 
21-09-10 23:35:55.029 - INFO: [epoch:  1, iter: 398,200, lr:(1.986e-05,)] l_pix: 6.6634e-01 
21-09-10 23:37:18.319 - INFO: [epoch:  1, iter: 398,300, lr:(1.982e-05,)] l_pix: 1.4972e+00 
21-09-10 23:38:35.966 - INFO: [epoch:  1, iter: 398,400, lr:(1.978e-05,)] l_pix: 1.2939e+00 
21-09-10 23:39:50.816 - INFO: [epoch:  1, iter: 398,500, lr:(1.975e-05,)] l_pix: 7.2186e-01 
21-09-10 23:41:05.978 - INFO: [epoch:  1, iter: 398,600, lr:(1.971e-05,)] l_pix: 1.9196e+00 
21-09-10 23:42:21.193 - INFO: [epoch:  1, iter: 398,700, lr:(1.967e-05,)] l_pix: 3.9436e-01 
21-09-10 23:43:36.114 - INFO: [epoch:  1, iter: 398,800, lr:(1.963e-05,)] l_pix: 1.6283e+00 
21-09-10 23:44:51.327 - INFO: [epoch:  1, iter: 398,900, lr:(1.960e-05,)] l_pix: 2.0114e+00 
21-09-10 23:46:06.852 - INFO: [epoch:  1, iter: 399,000, lr:(1.956e-05,)] l_pix: 7.3982e-01 
21-09-10 23:47:21.651 - INFO: [epoch:  1, iter: 399,100, lr:(1.952e-05,)] l_pix: 5.7138e-01 
21-09-10 23:48:36.211 - INFO: [epoch:  1, iter: 399,200, lr:(1.948e-05,)] l_pix: 9.5486e-01 
21-09-10 23:49:50.769 - INFO: [epoch:  1, iter: 399,300, lr:(1.945e-05,)] l_pix: 7.7329e-01 
21-09-10 23:51:05.495 - INFO: [epoch:  1, iter: 399,400, lr:(1.941e-05,)] l_pix: 1.4844e+00 
21-09-10 23:52:20.148 - INFO: [epoch:  1, iter: 399,500, lr:(1.937e-05,)] l_pix: 2.3752e+00 
21-09-10 23:53:43.435 - INFO: [epoch:  1, iter: 399,600, lr:(1.934e-05,)] l_pix: 1.5940e+00 
21-09-10 23:55:11.136 - INFO: [epoch:  1, iter: 399,700, lr:(1.930e-05,)] l_pix: 2.1442e+00 
21-09-10 23:56:38.834 - INFO: [epoch:  1, iter: 399,800, lr:(1.926e-05,)] l_pix: 7.9304e-01 
21-09-10 23:58:07.234 - INFO: [epoch:  1, iter: 399,900, lr:(1.923e-05,)] l_pix: 8.3717e-01 
21-09-10 23:59:35.395 - INFO: [epoch:  1, iter: 400,000, lr:(1.919e-05,)] l_pix: 1.1369e+00 
21-09-11 00:00:54.140 - INFO: # Validation # PSNR: 2.8957e+01
21-09-11 00:00:54.141 - INFO: Saving models and training states.
21-09-11 00:02:11.915 - INFO: [epoch:  1, iter: 400,100, lr:(1.915e-05,)] l_pix: 6.5043e-01 
21-09-11 00:03:27.540 - INFO: [epoch:  1, iter: 400,200, lr:(1.911e-05,)] l_pix: 7.0521e-01 
21-09-11 00:04:43.131 - INFO: [epoch:  1, iter: 400,300, lr:(1.908e-05,)] l_pix: 1.5113e+00 
21-09-11 00:05:58.455 - INFO: [epoch:  1, iter: 400,400, lr:(1.904e-05,)] l_pix: 2.7212e+00 
21-09-11 00:07:12.569 - INFO: [epoch:  1, iter: 400,500, lr:(1.900e-05,)] l_pix: 8.8062e-01 
21-09-11 00:08:27.597 - INFO: [epoch:  1, iter: 400,600, lr:(1.897e-05,)] l_pix: 1.0579e+00 
21-09-11 00:09:42.172 - INFO: [epoch:  1, iter: 400,700, lr:(1.893e-05,)] l_pix: 7.7600e-01 
21-09-11 00:10:57.415 - INFO: [epoch:  1, iter: 400,800, lr:(1.889e-05,)] l_pix: 3.1521e-01 
21-09-11 00:12:12.509 - INFO: [epoch:  1, iter: 400,900, lr:(1.886e-05,)] l_pix: 3.5015e-01 
21-09-11 00:13:27.426 - INFO: [epoch:  1, iter: 401,000, lr:(1.882e-05,)] l_pix: 9.0175e-01 
21-09-11 00:14:42.429 - INFO: [epoch:  1, iter: 401,100, lr:(1.878e-05,)] l_pix: 1.0234e+00 
21-09-11 00:15:57.556 - INFO: [epoch:  1, iter: 401,200, lr:(1.875e-05,)] l_pix: 1.2211e+00 
21-09-11 00:17:12.515 - INFO: [epoch:  1, iter: 401,300, lr:(1.871e-05,)] l_pix: 8.4705e-01 
21-09-11 00:18:27.452 - INFO: [epoch:  1, iter: 401,400, lr:(1.867e-05,)] l_pix: 5.2091e-01 
21-09-11 00:19:42.307 - INFO: [epoch:  1, iter: 401,500, lr:(1.864e-05,)] l_pix: 1.5428e+00 
21-09-11 00:20:57.463 - INFO: [epoch:  1, iter: 401,600, lr:(1.860e-05,)] l_pix: 2.4897e+00 
21-09-11 00:22:12.295 - INFO: [epoch:  1, iter: 401,700, lr:(1.857e-05,)] l_pix: 9.7214e-02 
21-09-11 00:23:27.017 - INFO: [epoch:  1, iter: 401,800, lr:(1.853e-05,)] l_pix: 7.2102e-01 
21-09-11 00:24:42.625 - INFO: [epoch:  1, iter: 401,900, lr:(1.849e-05,)] l_pix: 9.3531e-01 
21-09-11 00:25:57.778 - INFO: [epoch:  1, iter: 402,000, lr:(1.846e-05,)] l_pix: 2.7681e-01 
21-09-11 00:27:11.985 - INFO: [epoch:  1, iter: 402,100, lr:(1.842e-05,)] l_pix: 1.9172e+00 
21-09-11 00:28:26.006 - INFO: [epoch:  1, iter: 402,200, lr:(1.838e-05,)] l_pix: 8.3381e-01 
21-09-11 00:29:39.960 - INFO: [epoch:  1, iter: 402,300, lr:(1.835e-05,)] l_pix: 1.8616e-01 
21-09-11 00:30:54.333 - INFO: [epoch:  1, iter: 402,400, lr:(1.831e-05,)] l_pix: 1.9109e+00 
21-09-11 00:32:09.041 - INFO: [epoch:  1, iter: 402,500, lr:(1.828e-05,)] l_pix: 4.9487e-01 
21-09-11 00:33:23.543 - INFO: [epoch:  1, iter: 402,600, lr:(1.824e-05,)] l_pix: 9.3707e-01 
21-09-11 00:34:38.262 - INFO: [epoch:  1, iter: 402,700, lr:(1.820e-05,)] l_pix: 1.2963e+00 
21-09-11 00:35:53.069 - INFO: [epoch:  1, iter: 402,800, lr:(1.817e-05,)] l_pix: 1.0658e+00 
21-09-11 00:37:07.759 - INFO: [epoch:  1, iter: 402,900, lr:(1.813e-05,)] l_pix: 2.4382e+00 
21-09-11 00:38:22.580 - INFO: [epoch:  1, iter: 403,000, lr:(1.810e-05,)] l_pix: 1.3626e-01 
21-09-11 00:39:37.495 - INFO: [epoch:  1, iter: 403,100, lr:(1.806e-05,)] l_pix: 2.5902e+00 
21-09-11 00:40:52.476 - INFO: [epoch:  1, iter: 403,200, lr:(1.802e-05,)] l_pix: 1.0339e+00 
21-09-11 00:42:07.203 - INFO: [epoch:  1, iter: 403,300, lr:(1.799e-05,)] l_pix: 8.9407e-01 
21-09-11 00:43:22.196 - INFO: [epoch:  1, iter: 403,400, lr:(1.795e-05,)] l_pix: 1.8727e+00 
21-09-11 00:44:37.871 - INFO: [epoch:  1, iter: 403,500, lr:(1.792e-05,)] l_pix: 2.7030e+00 
21-09-11 00:45:53.403 - INFO: [epoch:  1, iter: 403,600, lr:(1.788e-05,)] l_pix: 8.7151e-01 
21-09-11 00:47:08.938 - INFO: [epoch:  1, iter: 403,700, lr:(1.784e-05,)] l_pix: 7.0091e-01 
21-09-11 00:48:24.131 - INFO: [epoch:  1, iter: 403,800, lr:(1.781e-05,)] l_pix: 7.4862e-01 
21-09-11 00:49:38.772 - INFO: [epoch:  1, iter: 403,900, lr:(1.777e-05,)] l_pix: 1.0993e+00 
21-09-11 00:50:53.233 - INFO: [epoch:  1, iter: 404,000, lr:(1.774e-05,)] l_pix: 8.1157e-01 
21-09-11 00:52:07.612 - INFO: [epoch:  1, iter: 404,100, lr:(1.770e-05,)] l_pix: 9.1538e-01 
21-09-11 00:53:21.856 - INFO: [epoch:  1, iter: 404,200, lr:(1.767e-05,)] l_pix: 4.0537e-01 
21-09-11 00:54:36.243 - INFO: [epoch:  1, iter: 404,300, lr:(1.763e-05,)] l_pix: 8.2185e-01 
21-09-11 00:55:50.589 - INFO: [epoch:  1, iter: 404,400, lr:(1.760e-05,)] l_pix: 8.3544e-01 
21-09-11 00:57:05.015 - INFO: [epoch:  1, iter: 404,500, lr:(1.756e-05,)] l_pix: 1.2266e+00 
21-09-11 00:58:19.254 - INFO: [epoch:  1, iter: 404,600, lr:(1.752e-05,)] l_pix: 8.1087e-01 
21-09-11 00:59:33.661 - INFO: [epoch:  1, iter: 404,700, lr:(1.749e-05,)] l_pix: 8.0505e-01 
21-09-11 01:00:47.931 - INFO: [epoch:  1, iter: 404,800, lr:(1.745e-05,)] l_pix: 9.0077e-01 
21-09-11 01:02:01.678 - INFO: [epoch:  1, iter: 404,900, lr:(1.742e-05,)] l_pix: 2.1785e+00 
21-09-11 01:03:15.165 - INFO: [epoch:  1, iter: 405,000, lr:(1.738e-05,)] l_pix: 1.9095e+00 
21-09-11 01:04:33.324 - INFO: # Validation # PSNR: 2.9028e+01
21-09-11 01:04:33.325 - INFO: Saving models and training states.
21-09-11 01:05:49.243 - INFO: [epoch:  1, iter: 405,100, lr:(1.735e-05,)] l_pix: 1.5379e+00 
21-09-11 01:07:04.043 - INFO: [epoch:  1, iter: 405,200, lr:(1.731e-05,)] l_pix: 6.7418e-01 
21-09-11 01:08:18.674 - INFO: [epoch:  1, iter: 405,300, lr:(1.728e-05,)] l_pix: 9.2152e-01 
21-09-11 01:09:32.967 - INFO: [epoch:  1, iter: 405,400, lr:(1.724e-05,)] l_pix: 1.1125e+00 
21-09-11 01:10:47.890 - INFO: [epoch:  1, iter: 405,500, lr:(1.721e-05,)] l_pix: 2.7247e+00 
21-09-11 01:12:03.588 - INFO: [epoch:  1, iter: 405,600, lr:(1.717e-05,)] l_pix: 8.9226e-01 
21-09-11 01:13:19.292 - INFO: [epoch:  1, iter: 405,700, lr:(1.714e-05,)] l_pix: 2.4122e+00 
21-09-11 01:14:34.774 - INFO: [epoch:  1, iter: 405,800, lr:(1.710e-05,)] l_pix: 4.7401e-01 
21-09-11 01:15:50.589 - INFO: [epoch:  1, iter: 405,900, lr:(1.707e-05,)] l_pix: 1.6237e+00 
21-09-11 01:17:06.146 - INFO: [epoch:  1, iter: 406,000, lr:(1.703e-05,)] l_pix: 2.7150e+00 
21-09-11 01:18:21.873 - INFO: [epoch:  1, iter: 406,100, lr:(1.700e-05,)] l_pix: 1.8566e+00 
21-09-11 01:19:37.475 - INFO: [epoch:  1, iter: 406,200, lr:(1.696e-05,)] l_pix: 1.0810e+00 
21-09-11 01:20:53.226 - INFO: [epoch:  1, iter: 406,300, lr:(1.693e-05,)] l_pix: 9.6346e-01 
21-09-11 01:22:08.888 - INFO: [epoch:  1, iter: 406,400, lr:(1.689e-05,)] l_pix: 1.4300e+00 
21-09-11 01:23:24.491 - INFO: [epoch:  1, iter: 406,500, lr:(1.686e-05,)] l_pix: 5.6274e-01 
21-09-11 01:24:40.056 - INFO: [epoch:  1, iter: 406,600, lr:(1.682e-05,)] l_pix: 9.1449e-01 
21-09-11 01:25:55.720 - INFO: [epoch:  1, iter: 406,700, lr:(1.679e-05,)] l_pix: 1.0630e+00 
21-09-11 01:27:11.330 - INFO: [epoch:  1, iter: 406,800, lr:(1.675e-05,)] l_pix: 1.2540e+00 
21-09-11 01:28:26.537 - INFO: [epoch:  1, iter: 406,900, lr:(1.672e-05,)] l_pix: 5.7100e-01 
21-09-11 01:29:41.757 - INFO: [epoch:  1, iter: 407,000, lr:(1.668e-05,)] l_pix: 1.3272e+00 
21-09-11 01:30:57.709 - INFO: [epoch:  1, iter: 407,100, lr:(1.665e-05,)] l_pix: 2.2732e+00 
21-09-11 01:32:12.531 - INFO: [epoch:  1, iter: 407,200, lr:(1.661e-05,)] l_pix: 2.6776e+00 
21-09-11 01:33:26.672 - INFO: [epoch:  1, iter: 407,300, lr:(1.658e-05,)] l_pix: 1.1040e+00 
21-09-11 01:34:40.875 - INFO: [epoch:  1, iter: 407,400, lr:(1.655e-05,)] l_pix: 6.5861e-01 
21-09-11 01:35:56.077 - INFO: [epoch:  1, iter: 407,500, lr:(1.651e-05,)] l_pix: 2.3016e+00 
21-09-11 01:37:10.875 - INFO: [epoch:  1, iter: 407,600, lr:(1.648e-05,)] l_pix: 2.8420e+00 
21-09-11 01:38:25.917 - INFO: [epoch:  1, iter: 407,700, lr:(1.644e-05,)] l_pix: 7.9146e-01 
21-09-11 01:39:41.072 - INFO: [epoch:  1, iter: 407,800, lr:(1.641e-05,)] l_pix: 4.3914e-01 
21-09-11 01:40:55.673 - INFO: [epoch:  1, iter: 407,900, lr:(1.637e-05,)] l_pix: 2.4169e+00 
21-09-11 01:42:09.893 - INFO: [epoch:  1, iter: 408,000, lr:(1.634e-05,)] l_pix: 5.9942e-01 
21-09-11 01:43:24.857 - INFO: [epoch:  1, iter: 408,100, lr:(1.630e-05,)] l_pix: 2.5161e+00 
21-09-11 01:44:39.694 - INFO: [epoch:  1, iter: 408,200, lr:(1.627e-05,)] l_pix: 2.9009e+00 
21-09-11 01:45:55.150 - INFO: [epoch:  1, iter: 408,300, lr:(1.624e-05,)] l_pix: 1.3374e+00 
21-09-11 01:47:10.054 - INFO: [epoch:  1, iter: 408,400, lr:(1.620e-05,)] l_pix: 6.7448e-01 
21-09-11 01:48:24.513 - INFO: [epoch:  1, iter: 408,500, lr:(1.617e-05,)] l_pix: 7.4771e-01 
21-09-11 01:49:39.425 - INFO: [epoch:  1, iter: 408,600, lr:(1.613e-05,)] l_pix: 5.6688e-01 
21-09-11 01:50:54.586 - INFO: [epoch:  1, iter: 408,700, lr:(1.610e-05,)] l_pix: 2.2742e+00 
21-09-11 01:52:09.943 - INFO: [epoch:  1, iter: 408,800, lr:(1.607e-05,)] l_pix: 1.8718e+00 
21-09-11 01:53:25.401 - INFO: [epoch:  1, iter: 408,900, lr:(1.603e-05,)] l_pix: 4.4539e-01 
21-09-11 01:54:40.207 - INFO: [epoch:  1, iter: 409,000, lr:(1.600e-05,)] l_pix: 7.7580e-01 
21-09-11 01:55:54.769 - INFO: [epoch:  1, iter: 409,100, lr:(1.596e-05,)] l_pix: 5.7052e-01 
21-09-11 01:57:09.345 - INFO: [epoch:  1, iter: 409,200, lr:(1.593e-05,)] l_pix: 1.2884e+00 
21-09-11 01:58:24.010 - INFO: [epoch:  1, iter: 409,300, lr:(1.590e-05,)] l_pix: 2.1074e+00 
21-09-11 01:59:38.647 - INFO: [epoch:  1, iter: 409,400, lr:(1.586e-05,)] l_pix: 2.7782e+00 
21-09-11 02:00:53.651 - INFO: [epoch:  1, iter: 409,500, lr:(1.583e-05,)] l_pix: 5.8639e-01 
21-09-11 02:02:08.321 - INFO: [epoch:  1, iter: 409,600, lr:(1.579e-05,)] l_pix: 2.1775e+00 
21-09-11 02:03:22.878 - INFO: [epoch:  1, iter: 409,700, lr:(1.576e-05,)] l_pix: 1.7299e+00 
21-09-11 02:04:37.371 - INFO: [epoch:  1, iter: 409,800, lr:(1.573e-05,)] l_pix: 2.4072e+00 
21-09-11 02:05:52.378 - INFO: [epoch:  1, iter: 409,900, lr:(1.569e-05,)] l_pix: 5.1781e-01 
21-09-11 02:07:06.956 - INFO: [epoch:  1, iter: 410,000, lr:(1.566e-05,)] l_pix: 6.7017e-01 
21-09-11 02:08:25.158 - INFO: # Validation # PSNR: 2.8897e+01
21-09-11 02:08:25.158 - INFO: Saving models and training states.
21-09-11 02:09:40.579 - INFO: [epoch:  1, iter: 410,100, lr:(1.563e-05,)] l_pix: 2.8078e+00 
21-09-11 02:10:55.256 - INFO: [epoch:  1, iter: 410,200, lr:(1.559e-05,)] l_pix: 3.0101e+00 
21-09-11 02:12:09.860 - INFO: [epoch:  1, iter: 410,300, lr:(1.556e-05,)] l_pix: 7.0155e-01 
21-09-11 02:13:24.345 - INFO: [epoch:  1, iter: 410,400, lr:(1.552e-05,)] l_pix: 5.4225e-01 
21-09-11 02:14:38.808 - INFO: [epoch:  1, iter: 410,500, lr:(1.549e-05,)] l_pix: 1.0689e+00 
21-09-11 02:15:53.609 - INFO: [epoch:  1, iter: 410,600, lr:(1.546e-05,)] l_pix: 5.4755e-01 
21-09-11 02:17:08.256 - INFO: [epoch:  1, iter: 410,700, lr:(1.542e-05,)] l_pix: 6.5010e-01 
21-09-11 02:18:22.977 - INFO: [epoch:  1, iter: 410,800, lr:(1.539e-05,)] l_pix: 3.1514e+00 
21-09-11 02:19:38.255 - INFO: [epoch:  1, iter: 410,900, lr:(1.536e-05,)] l_pix: 1.2540e+00 
21-09-11 02:20:53.300 - INFO: [epoch:  1, iter: 411,000, lr:(1.532e-05,)] l_pix: 1.5119e+00 
21-09-11 02:22:08.010 - INFO: [epoch:  1, iter: 411,100, lr:(1.529e-05,)] l_pix: 2.1565e+00 
21-09-11 02:23:34.717 - INFO: [epoch:  1, iter: 411,200, lr:(1.526e-05,)] l_pix: 1.1450e+00 
21-09-11 02:25:02.390 - INFO: [epoch:  1, iter: 411,300, lr:(1.522e-05,)] l_pix: 7.6692e-01 
21-09-11 02:26:30.033 - INFO: [epoch:  1, iter: 411,400, lr:(1.519e-05,)] l_pix: 1.3105e+00 
21-09-11 02:27:49.589 - INFO: [epoch:  1, iter: 411,500, lr:(1.516e-05,)] l_pix: 1.1921e+00 
21-09-11 02:29:04.807 - INFO: [epoch:  1, iter: 411,600, lr:(1.512e-05,)] l_pix: 4.1883e-01 
21-09-11 02:30:20.437 - INFO: [epoch:  1, iter: 411,700, lr:(1.509e-05,)] l_pix: 1.6678e+00 
21-09-11 02:31:35.215 - INFO: [epoch:  1, iter: 411,800, lr:(1.506e-05,)] l_pix: 2.5403e+00 
21-09-11 02:32:50.484 - INFO: [epoch:  1, iter: 411,900, lr:(1.503e-05,)] l_pix: 6.0005e-01 
21-09-11 02:34:05.613 - INFO: [epoch:  1, iter: 412,000, lr:(1.499e-05,)] l_pix: 1.2922e+00 
21-09-11 02:35:20.948 - INFO: [epoch:  1, iter: 412,100, lr:(1.496e-05,)] l_pix: 1.8535e+00 
21-09-11 02:36:35.769 - INFO: [epoch:  1, iter: 412,200, lr:(1.493e-05,)] l_pix: 1.2043e+00 
21-09-11 02:37:51.383 - INFO: [epoch:  1, iter: 412,300, lr:(1.489e-05,)] l_pix: 1.3179e+00 
21-09-11 02:39:06.773 - INFO: [epoch:  1, iter: 412,400, lr:(1.486e-05,)] l_pix: 6.9040e-01 
21-09-11 02:40:22.189 - INFO: [epoch:  1, iter: 412,500, lr:(1.483e-05,)] l_pix: 1.2619e+00 
21-09-11 02:41:37.175 - INFO: [epoch:  1, iter: 412,600, lr:(1.480e-05,)] l_pix: 7.3788e-01 
21-09-11 02:42:52.492 - INFO: [epoch:  1, iter: 412,700, lr:(1.476e-05,)] l_pix: 7.5450e-01 
21-09-11 02:44:06.852 - INFO: [epoch:  1, iter: 412,800, lr:(1.473e-05,)] l_pix: 2.8053e+00 
21-09-11 02:45:21.523 - INFO: [epoch:  1, iter: 412,900, lr:(1.470e-05,)] l_pix: 7.0635e-01 
21-09-11 02:46:35.895 - INFO: [epoch:  1, iter: 413,000, lr:(1.466e-05,)] l_pix: 2.0709e+00 
21-09-11 02:47:51.192 - INFO: [epoch:  1, iter: 413,100, lr:(1.463e-05,)] l_pix: 1.0612e+00 
21-09-11 02:49:18.049 - INFO: [epoch:  1, iter: 413,200, lr:(1.460e-05,)] l_pix: 1.0678e+00 
21-09-11 02:50:44.790 - INFO: [epoch:  1, iter: 413,300, lr:(1.457e-05,)] l_pix: 1.1864e+00 
21-09-11 02:52:11.569 - INFO: [epoch:  1, iter: 413,400, lr:(1.453e-05,)] l_pix: 7.9886e-01 
21-09-11 02:53:38.039 - INFO: [epoch:  1, iter: 413,500, lr:(1.450e-05,)] l_pix: 1.7548e+00 
21-09-11 02:55:05.060 - INFO: [epoch:  1, iter: 413,600, lr:(1.447e-05,)] l_pix: 2.2845e+00 
21-09-11 02:56:31.606 - INFO: [epoch:  1, iter: 413,700, lr:(1.444e-05,)] l_pix: 1.1627e+00 
21-09-11 02:57:58.151 - INFO: [epoch:  1, iter: 413,800, lr:(1.440e-05,)] l_pix: 1.4089e+00 
21-09-11 02:59:23.439 - INFO: [epoch:  1, iter: 413,900, lr:(1.437e-05,)] l_pix: 1.0292e+00 
21-09-11 03:00:49.386 - INFO: [epoch:  1, iter: 414,000, lr:(1.434e-05,)] l_pix: 1.5698e+00 
21-09-11 03:02:12.289 - INFO: [epoch:  1, iter: 414,100, lr:(1.431e-05,)] l_pix: 8.1593e-01 
21-09-11 03:03:26.128 - INFO: [epoch:  1, iter: 414,200, lr:(1.428e-05,)] l_pix: 1.5720e+00 
21-09-11 03:04:40.187 - INFO: [epoch:  1, iter: 414,300, lr:(1.424e-05,)] l_pix: 2.9219e+00 
21-09-11 03:05:54.644 - INFO: [epoch:  1, iter: 414,400, lr:(1.421e-05,)] l_pix: 1.5185e+00 
21-09-11 03:07:08.729 - INFO: [epoch:  1, iter: 414,500, lr:(1.418e-05,)] l_pix: 2.7580e+00 
21-09-11 03:08:22.550 - INFO: [epoch:  1, iter: 414,600, lr:(1.415e-05,)] l_pix: 1.0628e+00 
21-09-11 03:09:36.889 - INFO: [epoch:  1, iter: 414,700, lr:(1.411e-05,)] l_pix: 1.1424e+00 
21-09-11 03:10:52.041 - INFO: [epoch:  1, iter: 414,800, lr:(1.408e-05,)] l_pix: 7.8269e-01 
21-09-11 03:12:07.208 - INFO: [epoch:  1, iter: 414,900, lr:(1.405e-05,)] l_pix: 4.6877e-01 
21-09-11 03:13:21.297 - INFO: [epoch:  1, iter: 415,000, lr:(1.402e-05,)] l_pix: 2.3039e+00 
21-09-11 03:14:40.054 - INFO: # Validation # PSNR: 2.9002e+01
21-09-11 03:14:40.055 - INFO: Saving models and training states.
21-09-11 03:15:56.425 - INFO: [epoch:  1, iter: 415,100, lr:(1.399e-05,)] l_pix: 2.0457e+00 
21-09-11 03:17:11.321 - INFO: [epoch:  1, iter: 415,200, lr:(1.395e-05,)] l_pix: 2.0227e+00 
21-09-11 03:18:26.325 - INFO: [epoch:  1, iter: 415,300, lr:(1.392e-05,)] l_pix: 1.5424e+00 
21-09-11 03:19:40.943 - INFO: [epoch:  1, iter: 415,400, lr:(1.389e-05,)] l_pix: 1.6186e+00 
21-09-11 03:20:55.971 - INFO: [epoch:  1, iter: 415,500, lr:(1.386e-05,)] l_pix: 1.3324e+00 
21-09-11 03:22:10.896 - INFO: [epoch:  1, iter: 415,600, lr:(1.383e-05,)] l_pix: 1.1855e+00 
21-09-11 03:23:25.840 - INFO: [epoch:  1, iter: 415,700, lr:(1.380e-05,)] l_pix: 1.2594e+00 
21-09-11 03:24:41.567 - INFO: [epoch:  1, iter: 415,800, lr:(1.376e-05,)] l_pix: 1.2859e+00 
21-09-11 03:25:57.619 - INFO: [epoch:  1, iter: 415,900, lr:(1.373e-05,)] l_pix: 1.3531e+00 
21-09-11 03:27:13.179 - INFO: [epoch:  1, iter: 416,000, lr:(1.370e-05,)] l_pix: 2.3677e+00 
21-09-11 03:28:28.863 - INFO: [epoch:  1, iter: 416,100, lr:(1.367e-05,)] l_pix: 2.1243e+00 
21-09-11 03:29:44.422 - INFO: [epoch:  1, iter: 416,200, lr:(1.364e-05,)] l_pix: 2.3523e+00 
21-09-11 03:31:00.595 - INFO: [epoch:  1, iter: 416,300, lr:(1.361e-05,)] l_pix: 2.5307e+00 
21-09-11 03:32:16.204 - INFO: [epoch:  1, iter: 416,400, lr:(1.357e-05,)] l_pix: 4.1865e-01 
21-09-11 03:33:31.859 - INFO: [epoch:  1, iter: 416,500, lr:(1.354e-05,)] l_pix: 2.0367e+00 
21-09-11 03:34:47.462 - INFO: [epoch:  1, iter: 416,600, lr:(1.351e-05,)] l_pix: 4.6390e-01 
21-09-11 03:36:03.467 - INFO: [epoch:  1, iter: 416,700, lr:(1.348e-05,)] l_pix: 2.6650e+00 
21-09-11 03:37:19.235 - INFO: [epoch:  1, iter: 416,800, lr:(1.345e-05,)] l_pix: 1.6143e+00 
21-09-11 03:38:34.950 - INFO: [epoch:  1, iter: 416,900, lr:(1.342e-05,)] l_pix: 7.7835e-01 
21-09-11 03:39:50.287 - INFO: [epoch:  1, iter: 417,000, lr:(1.339e-05,)] l_pix: 9.4620e-01 
21-09-11 03:41:05.216 - INFO: [epoch:  1, iter: 417,100, lr:(1.335e-05,)] l_pix: 1.8483e+00 
21-09-11 03:42:19.812 - INFO: [epoch:  1, iter: 417,200, lr:(1.332e-05,)] l_pix: 1.5249e+00 
21-09-11 03:43:35.026 - INFO: [epoch:  1, iter: 417,300, lr:(1.329e-05,)] l_pix: 1.3537e+00 
21-09-11 03:44:50.576 - INFO: [epoch:  1, iter: 417,400, lr:(1.326e-05,)] l_pix: 6.9158e-01 
21-09-11 03:46:05.197 - INFO: [epoch:  1, iter: 417,500, lr:(1.323e-05,)] l_pix: 1.5319e+00 
21-09-11 03:47:18.920 - INFO: [epoch:  1, iter: 417,600, lr:(1.320e-05,)] l_pix: 2.9272e+00 
21-09-11 03:48:32.872 - INFO: [epoch:  1, iter: 417,700, lr:(1.317e-05,)] l_pix: 1.7986e+00 
21-09-11 03:49:46.716 - INFO: [epoch:  1, iter: 417,800, lr:(1.314e-05,)] l_pix: 2.8770e+00 
21-09-11 03:51:00.886 - INFO: [epoch:  1, iter: 417,900, lr:(1.311e-05,)] l_pix: 2.5099e+00 
21-09-11 03:52:14.671 - INFO: [epoch:  1, iter: 418,000, lr:(1.307e-05,)] l_pix: 2.5651e+00 
21-09-11 03:53:28.516 - INFO: [epoch:  1, iter: 418,100, lr:(1.304e-05,)] l_pix: 1.4713e+00 
21-09-11 03:54:55.850 - INFO: [epoch:  1, iter: 418,200, lr:(1.301e-05,)] l_pix: 1.9397e+00 
21-09-11 03:56:23.329 - INFO: [epoch:  1, iter: 418,300, lr:(1.298e-05,)] l_pix: 9.1701e-01 
21-09-11 03:57:50.657 - INFO: [epoch:  1, iter: 418,400, lr:(1.295e-05,)] l_pix: 2.6200e+00 
21-09-11 03:59:17.968 - INFO: [epoch:  1, iter: 418,500, lr:(1.292e-05,)] l_pix: 2.7003e+00 
21-09-11 04:00:45.800 - INFO: [epoch:  1, iter: 418,600, lr:(1.289e-05,)] l_pix: 7.1637e-01 
21-09-11 04:02:13.147 - INFO: [epoch:  1, iter: 418,700, lr:(1.286e-05,)] l_pix: 2.5448e+00 
21-09-11 04:03:40.465 - INFO: [epoch:  1, iter: 418,800, lr:(1.283e-05,)] l_pix: 3.4958e-01 
21-09-11 04:05:01.834 - INFO: [epoch:  1, iter: 418,900, lr:(1.280e-05,)] l_pix: 2.5067e+00 
21-09-11 04:06:16.460 - INFO: [epoch:  1, iter: 419,000, lr:(1.277e-05,)] l_pix: 7.2139e-01 
21-09-11 04:07:30.840 - INFO: [epoch:  1, iter: 419,100, lr:(1.274e-05,)] l_pix: 1.3656e+00 
21-09-11 04:08:45.734 - INFO: [epoch:  1, iter: 419,200, lr:(1.271e-05,)] l_pix: 1.6258e+00 
21-09-11 04:10:00.732 - INFO: [epoch:  1, iter: 419,300, lr:(1.268e-05,)] l_pix: 1.8030e+00 
21-09-11 04:11:15.368 - INFO: [epoch:  1, iter: 419,400, lr:(1.264e-05,)] l_pix: 2.1692e+00 
21-09-11 04:12:29.508 - INFO: [epoch:  1, iter: 419,500, lr:(1.261e-05,)] l_pix: 1.4456e+00 
21-09-11 04:13:44.035 - INFO: [epoch:  1, iter: 419,600, lr:(1.258e-05,)] l_pix: 2.2652e+00 
21-09-11 04:14:58.585 - INFO: [epoch:  1, iter: 419,700, lr:(1.255e-05,)] l_pix: 2.1900e+00 
21-09-11 04:16:13.012 - INFO: [epoch:  1, iter: 419,800, lr:(1.252e-05,)] l_pix: 5.0325e-01 
21-09-11 04:17:27.380 - INFO: [epoch:  1, iter: 419,900, lr:(1.249e-05,)] l_pix: 9.3861e-01 
21-09-11 04:18:41.583 - INFO: [epoch:  1, iter: 420,000, lr:(1.246e-05,)] l_pix: 1.5081e+00 
21-09-11 04:20:00.336 - INFO: # Validation # PSNR: 2.8991e+01
21-09-11 04:20:00.337 - INFO: Saving models and training states.
21-09-11 04:21:16.044 - INFO: [epoch:  1, iter: 420,100, lr:(1.243e-05,)] l_pix: 7.8850e-01 
21-09-11 04:22:30.899 - INFO: [epoch:  1, iter: 420,200, lr:(1.240e-05,)] l_pix: 7.2536e-01 
21-09-11 04:23:45.603 - INFO: [epoch:  1, iter: 420,300, lr:(1.237e-05,)] l_pix: 8.9191e-01 
21-09-11 04:25:00.806 - INFO: [epoch:  1, iter: 420,400, lr:(1.234e-05,)] l_pix: 2.5132e-01 
21-09-11 04:26:15.713 - INFO: [epoch:  1, iter: 420,500, lr:(1.231e-05,)] l_pix: 2.3816e-01 
21-09-11 04:27:30.530 - INFO: [epoch:  1, iter: 420,600, lr:(1.228e-05,)] l_pix: 1.0231e+00 
21-09-11 04:28:45.297 - INFO: [epoch:  1, iter: 420,700, lr:(1.225e-05,)] l_pix: 2.4616e+00 
21-09-11 04:30:00.337 - INFO: [epoch:  1, iter: 420,800, lr:(1.222e-05,)] l_pix: 2.6588e+00 
21-09-11 04:31:16.748 - INFO: [epoch:  1, iter: 420,900, lr:(1.219e-05,)] l_pix: 4.2211e-01 
21-09-11 04:32:32.531 - INFO: [epoch:  1, iter: 421,000, lr:(1.216e-05,)] l_pix: 3.7783e-01 
21-09-11 04:33:48.085 - INFO: [epoch:  1, iter: 421,100, lr:(1.213e-05,)] l_pix: 9.3829e-01 
21-09-11 04:35:03.565 - INFO: [epoch:  1, iter: 421,200, lr:(1.210e-05,)] l_pix: 1.0218e+00 
21-09-11 04:36:18.439 - INFO: [epoch:  1, iter: 421,300, lr:(1.207e-05,)] l_pix: 1.1847e+00 
21-09-11 04:37:32.970 - INFO: [epoch:  1, iter: 421,400, lr:(1.204e-05,)] l_pix: 5.7286e-01 
21-09-11 04:38:47.649 - INFO: [epoch:  1, iter: 421,500, lr:(1.201e-05,)] l_pix: 2.2973e+00 
21-09-11 04:40:02.928 - INFO: [epoch:  1, iter: 421,600, lr:(1.198e-05,)] l_pix: 1.1091e-01 
21-09-11 04:41:17.839 - INFO: [epoch:  1, iter: 421,700, lr:(1.195e-05,)] l_pix: 1.8055e+00 
21-09-11 04:42:32.817 - INFO: [epoch:  1, iter: 421,800, lr:(1.192e-05,)] l_pix: 1.5433e+00 
21-09-11 04:43:47.558 - INFO: [epoch:  1, iter: 421,900, lr:(1.189e-05,)] l_pix: 8.1772e-01 
21-09-11 04:45:02.858 - INFO: [epoch:  1, iter: 422,000, lr:(1.186e-05,)] l_pix: 1.3116e+00 
21-09-11 04:46:18.912 - INFO: [epoch:  1, iter: 422,100, lr:(1.184e-05,)] l_pix: 2.4520e+00 
21-09-11 04:47:34.433 - INFO: [epoch:  1, iter: 422,200, lr:(1.181e-05,)] l_pix: 1.3219e+00 
21-09-11 04:48:49.695 - INFO: [epoch:  1, iter: 422,300, lr:(1.178e-05,)] l_pix: 7.1560e-01 
21-09-11 04:50:04.510 - INFO: [epoch:  1, iter: 422,400, lr:(1.175e-05,)] l_pix: 9.1850e-01 
21-09-11 04:51:19.025 - INFO: [epoch:  1, iter: 422,500, lr:(1.172e-05,)] l_pix: 1.5695e+00 
21-09-11 04:52:33.570 - INFO: [epoch:  1, iter: 422,600, lr:(1.169e-05,)] l_pix: 2.8839e+00 
21-09-11 04:53:48.135 - INFO: [epoch:  1, iter: 422,700, lr:(1.166e-05,)] l_pix: 1.4284e+00 
21-09-11 04:55:02.908 - INFO: [epoch:  1, iter: 422,800, lr:(1.163e-05,)] l_pix: 1.8431e+00 
21-09-11 04:56:17.616 - INFO: [epoch:  1, iter: 422,900, lr:(1.160e-05,)] l_pix: 9.8781e-01 
21-09-11 04:57:32.290 - INFO: [epoch:  1, iter: 423,000, lr:(1.157e-05,)] l_pix: 5.5105e-01 
21-09-11 04:58:46.747 - INFO: [epoch:  1, iter: 423,100, lr:(1.154e-05,)] l_pix: 2.0970e+00 
21-09-11 05:00:01.488 - INFO: [epoch:  1, iter: 423,200, lr:(1.151e-05,)] l_pix: 7.7357e-01 
21-09-11 05:01:16.075 - INFO: [epoch:  1, iter: 423,300, lr:(1.148e-05,)] l_pix: 6.4560e-01 
21-09-11 05:02:30.556 - INFO: [epoch:  1, iter: 423,400, lr:(1.145e-05,)] l_pix: 3.5254e-01 
21-09-11 05:03:46.230 - INFO: [epoch:  1, iter: 423,500, lr:(1.143e-05,)] l_pix: 2.8953e+00 
21-09-11 05:05:01.648 - INFO: [epoch:  1, iter: 423,600, lr:(1.140e-05,)] l_pix: 9.1114e-01 
21-09-11 05:06:16.987 - INFO: [epoch:  1, iter: 423,700, lr:(1.137e-05,)] l_pix: 3.0885e-01 
21-09-11 05:07:32.343 - INFO: [epoch:  1, iter: 423,800, lr:(1.134e-05,)] l_pix: 7.0945e-01 
21-09-11 05:08:47.739 - INFO: [epoch:  1, iter: 423,900, lr:(1.131e-05,)] l_pix: 1.6414e+00 
21-09-11 05:10:03.322 - INFO: [epoch:  1, iter: 424,000, lr:(1.128e-05,)] l_pix: 3.8224e-01 
21-09-11 05:11:18.452 - INFO: [epoch:  1, iter: 424,100, lr:(1.125e-05,)] l_pix: 1.0561e+00 
21-09-11 05:12:34.603 - INFO: [epoch:  1, iter: 424,200, lr:(1.122e-05,)] l_pix: 2.2966e+00 
21-09-11 05:13:59.374 - INFO: [epoch:  1, iter: 424,300, lr:(1.119e-05,)] l_pix: 4.3030e-01 
21-09-11 05:15:13.940 - INFO: [epoch:  1, iter: 424,400, lr:(1.117e-05,)] l_pix: 9.7135e-01 
21-09-11 05:16:28.411 - INFO: [epoch:  1, iter: 424,500, lr:(1.114e-05,)] l_pix: 1.1094e+00 
21-09-11 05:17:42.455 - INFO: [epoch:  1, iter: 424,600, lr:(1.111e-05,)] l_pix: 2.5933e+00 
21-09-11 05:18:56.854 - INFO: [epoch:  1, iter: 424,700, lr:(1.108e-05,)] l_pix: 2.3830e+00 
21-09-11 05:20:11.465 - INFO: [epoch:  1, iter: 424,800, lr:(1.105e-05,)] l_pix: 4.3864e-02 
21-09-11 05:21:26.129 - INFO: [epoch:  1, iter: 424,900, lr:(1.102e-05,)] l_pix: 1.1664e+00 
21-09-11 05:22:41.827 - INFO: [epoch:  1, iter: 425,000, lr:(1.099e-05,)] l_pix: 7.3968e-01 
21-09-11 05:24:00.365 - INFO: # Validation # PSNR: 2.8994e+01
21-09-11 05:24:00.365 - INFO: Saving models and training states.
21-09-11 05:25:17.125 - INFO: [epoch:  1, iter: 425,100, lr:(1.097e-05,)] l_pix: 4.4017e-01 
21-09-11 05:26:33.280 - INFO: [epoch:  1, iter: 425,200, lr:(1.094e-05,)] l_pix: 5.1356e-01 
21-09-11 05:27:49.624 - INFO: [epoch:  1, iter: 425,300, lr:(1.091e-05,)] l_pix: 4.9197e-01 
21-09-11 05:29:04.785 - INFO: [epoch:  1, iter: 425,400, lr:(1.088e-05,)] l_pix: 4.5024e-01 
21-09-11 05:30:19.946 - INFO: [epoch:  1, iter: 425,500, lr:(1.085e-05,)] l_pix: 3.4364e-01 
21-09-11 05:31:35.182 - INFO: [epoch:  1, iter: 425,600, lr:(1.082e-05,)] l_pix: 1.2330e+00 
21-09-11 05:32:50.868 - INFO: [epoch:  1, iter: 425,700, lr:(1.079e-05,)] l_pix: 1.0467e+00 
21-09-11 05:34:05.850 - INFO: [epoch:  1, iter: 425,800, lr:(1.077e-05,)] l_pix: 1.6664e+00 
21-09-11 05:35:20.728 - INFO: [epoch:  1, iter: 425,900, lr:(1.074e-05,)] l_pix: 2.1821e+00 
21-09-11 05:36:35.361 - INFO: [epoch:  1, iter: 426,000, lr:(1.071e-05,)] l_pix: 1.7851e+00 
21-09-11 05:37:49.445 - INFO: [epoch:  1, iter: 426,100, lr:(1.068e-05,)] l_pix: 6.9922e-01 
21-09-11 05:39:03.536 - INFO: [epoch:  1, iter: 426,200, lr:(1.065e-05,)] l_pix: 4.5450e-01 
21-09-11 05:40:18.092 - INFO: [epoch:  1, iter: 426,300, lr:(1.063e-05,)] l_pix: 1.8566e+00 
21-09-11 05:41:32.509 - INFO: [epoch:  1, iter: 426,400, lr:(1.060e-05,)] l_pix: 5.0888e-01 
21-09-11 05:42:52.350 - INFO: [epoch:  1, iter: 426,500, lr:(1.057e-05,)] l_pix: 5.7881e-01 
21-09-11 05:44:19.154 - INFO: [epoch:  1, iter: 426,600, lr:(1.054e-05,)] l_pix: 1.5332e+00 
21-09-11 05:45:33.711 - INFO: [epoch:  1, iter: 426,700, lr:(1.051e-05,)] l_pix: 2.9932e+00 
21-09-11 05:46:48.606 - INFO: [epoch:  1, iter: 426,800, lr:(1.049e-05,)] l_pix: 2.1437e+00 
21-09-11 05:48:03.354 - INFO: [epoch:  1, iter: 426,900, lr:(1.046e-05,)] l_pix: 9.9884e-01 
21-09-11 05:49:18.039 - INFO: [epoch:  1, iter: 427,000, lr:(1.043e-05,)] l_pix: 8.7565e-01 
21-09-11 05:50:33.242 - INFO: [epoch:  1, iter: 427,100, lr:(1.040e-05,)] l_pix: 1.9850e-01 
21-09-11 05:51:48.159 - INFO: [epoch:  1, iter: 427,200, lr:(1.037e-05,)] l_pix: 2.8735e-01 
21-09-11 05:53:02.790 - INFO: [epoch:  1, iter: 427,300, lr:(1.035e-05,)] l_pix: 2.9115e-01 
21-09-11 05:54:17.321 - INFO: [epoch:  1, iter: 427,400, lr:(1.032e-05,)] l_pix: 2.2319e+00 
21-09-11 05:55:32.162 - INFO: [epoch:  1, iter: 427,500, lr:(1.029e-05,)] l_pix: 6.0385e-01 
21-09-11 05:56:49.092 - INFO: [epoch:  1, iter: 427,600, lr:(1.026e-05,)] l_pix: 2.3404e+00 
21-09-11 05:58:03.351 - INFO: [epoch:  1, iter: 427,700, lr:(1.024e-05,)] l_pix: 4.2334e-01 
21-09-11 05:59:17.820 - INFO: [epoch:  1, iter: 427,800, lr:(1.021e-05,)] l_pix: 4.7691e-01 
21-09-11 06:00:32.359 - INFO: [epoch:  1, iter: 427,900, lr:(1.018e-05,)] l_pix: 2.4069e+00 
21-09-11 06:01:46.415 - INFO: [epoch:  1, iter: 428,000, lr:(1.015e-05,)] l_pix: 6.2585e-01 
21-09-11 06:03:00.693 - INFO: [epoch:  1, iter: 428,100, lr:(1.013e-05,)] l_pix: 1.5652e+00 
21-09-11 06:04:14.897 - INFO: [epoch:  1, iter: 428,200, lr:(1.010e-05,)] l_pix: 7.4366e-01 
21-09-11 06:05:29.409 - INFO: [epoch:  1, iter: 428,300, lr:(1.007e-05,)] l_pix: 6.2458e-01 
21-09-11 06:06:44.916 - INFO: [epoch:  1, iter: 428,400, lr:(1.004e-05,)] l_pix: 1.0582e+00 
21-09-11 06:07:59.937 - INFO: [epoch:  1, iter: 428,500, lr:(1.002e-05,)] l_pix: 2.1603e+00 
21-09-11 06:09:15.172 - INFO: [epoch:  1, iter: 428,600, lr:(9.990e-06,)] l_pix: 2.4271e+00 
21-09-11 06:10:30.188 - INFO: [epoch:  1, iter: 428,700, lr:(9.963e-06,)] l_pix: 1.0411e+00 
21-09-11 06:11:44.924 - INFO: [epoch:  1, iter: 428,800, lr:(9.936e-06,)] l_pix: 1.3977e+00 
21-09-11 06:12:59.865 - INFO: [epoch:  1, iter: 428,900, lr:(9.909e-06,)] l_pix: 1.6478e+00 
21-09-11 06:14:15.166 - INFO: [epoch:  1, iter: 429,000, lr:(9.881e-06,)] l_pix: 8.9658e-01 
21-09-11 06:15:31.247 - INFO: [epoch:  1, iter: 429,100, lr:(9.854e-06,)] l_pix: 1.5362e+00 
21-09-11 06:16:47.231 - INFO: [epoch:  1, iter: 429,200, lr:(9.827e-06,)] l_pix: 1.3660e+00 
21-09-11 06:18:03.332 - INFO: [epoch:  1, iter: 429,300, lr:(9.800e-06,)] l_pix: 8.5617e-01 
21-09-11 06:19:19.340 - INFO: [epoch:  1, iter: 429,400, lr:(9.773e-06,)] l_pix: 2.0280e+00 
21-09-11 06:20:35.005 - INFO: [epoch:  1, iter: 429,500, lr:(9.746e-06,)] l_pix: 1.4639e+00 
21-09-11 06:21:49.735 - INFO: [epoch:  1, iter: 429,600, lr:(9.720e-06,)] l_pix: 1.3987e+00 
21-09-11 06:23:03.898 - INFO: [epoch:  1, iter: 429,700, lr:(9.693e-06,)] l_pix: 1.1453e+00 
21-09-11 06:24:18.216 - INFO: [epoch:  1, iter: 429,800, lr:(9.666e-06,)] l_pix: 2.7951e-01 
21-09-11 06:25:32.879 - INFO: [epoch:  1, iter: 429,900, lr:(9.639e-06,)] l_pix: 6.7424e-01 
21-09-11 06:26:47.155 - INFO: [epoch:  1, iter: 430,000, lr:(9.612e-06,)] l_pix: 2.0956e+00 
21-09-11 06:28:06.161 - INFO: # Validation # PSNR: 2.8960e+01
21-09-11 06:28:06.161 - INFO: Saving models and training states.
21-09-11 06:29:21.833 - INFO: [epoch:  1, iter: 430,100, lr:(9.586e-06,)] l_pix: 2.6698e+00 
21-09-11 06:30:36.963 - INFO: [epoch:  1, iter: 430,200, lr:(9.559e-06,)] l_pix: 1.2202e+00 
21-09-11 06:31:51.505 - INFO: [epoch:  1, iter: 430,300, lr:(9.532e-06,)] l_pix: 5.8559e-01 
21-09-11 06:33:07.381 - INFO: [epoch:  1, iter: 430,400, lr:(9.506e-06,)] l_pix: 2.6000e+00 
21-09-11 06:34:22.911 - INFO: [epoch:  1, iter: 430,500, lr:(9.479e-06,)] l_pix: 8.1738e-01 
21-09-11 06:35:38.101 - INFO: [epoch:  1, iter: 430,600, lr:(9.452e-06,)] l_pix: 1.0663e+00 
21-09-11 06:36:53.124 - INFO: [epoch:  1, iter: 430,700, lr:(9.426e-06,)] l_pix: 1.1904e+00 
21-09-11 06:38:08.288 - INFO: [epoch:  1, iter: 430,800, lr:(9.400e-06,)] l_pix: 1.6986e+00 
21-09-11 06:39:23.194 - INFO: [epoch:  1, iter: 430,900, lr:(9.373e-06,)] l_pix: 8.0633e-01 
21-09-11 06:40:38.287 - INFO: [epoch:  1, iter: 431,000, lr:(9.347e-06,)] l_pix: 8.7947e-01 
21-09-11 06:41:53.233 - INFO: [epoch:  1, iter: 431,100, lr:(9.320e-06,)] l_pix: 7.9172e-01 
21-09-11 06:43:08.015 - INFO: [epoch:  1, iter: 431,200, lr:(9.294e-06,)] l_pix: 1.0274e+00 
21-09-11 06:44:22.909 - INFO: [epoch:  1, iter: 431,300, lr:(9.268e-06,)] l_pix: 1.1483e+00 
21-09-11 06:45:37.964 - INFO: [epoch:  1, iter: 431,400, lr:(9.241e-06,)] l_pix: 2.6255e+00 
21-09-11 06:46:53.432 - INFO: [epoch:  1, iter: 431,500, lr:(9.215e-06,)] l_pix: 2.7878e+00 
21-09-11 06:48:07.502 - INFO: [epoch:  1, iter: 431,600, lr:(9.189e-06,)] l_pix: 4.0634e-01 
21-09-11 06:49:21.494 - INFO: [epoch:  1, iter: 431,700, lr:(9.163e-06,)] l_pix: 1.2034e+00 
21-09-11 06:50:35.388 - INFO: [epoch:  1, iter: 431,800, lr:(9.137e-06,)] l_pix: 2.2410e+00 
21-09-11 06:51:49.444 - INFO: [epoch:  1, iter: 431,900, lr:(9.111e-06,)] l_pix: 9.9998e-01 
21-09-11 06:53:03.653 - INFO: [epoch:  1, iter: 432,000, lr:(9.085e-06,)] l_pix: 2.0728e+00 
21-09-11 06:54:17.921 - INFO: [epoch:  1, iter: 432,100, lr:(9.059e-06,)] l_pix: 1.1876e+00 
21-09-11 06:55:32.168 - INFO: [epoch:  1, iter: 432,200, lr:(9.033e-06,)] l_pix: 3.3672e+00 
21-09-11 06:56:46.638 - INFO: [epoch:  1, iter: 432,300, lr:(9.007e-06,)] l_pix: 3.1292e+00 
21-09-11 06:58:01.304 - INFO: [epoch:  1, iter: 432,400, lr:(8.981e-06,)] l_pix: 3.1797e+00 
21-09-11 06:59:15.859 - INFO: [epoch:  1, iter: 432,500, lr:(8.955e-06,)] l_pix: 5.8211e-01 
21-09-11 07:00:31.076 - INFO: [epoch:  1, iter: 432,600, lr:(8.929e-06,)] l_pix: 5.0079e-01 
21-09-11 07:01:46.538 - INFO: [epoch:  1, iter: 432,700, lr:(8.903e-06,)] l_pix: 1.8201e+00 
21-09-11 07:03:01.814 - INFO: [epoch:  1, iter: 432,800, lr:(8.878e-06,)] l_pix: 1.8028e+00 
21-09-11 07:04:17.236 - INFO: [epoch:  1, iter: 432,900, lr:(8.852e-06,)] l_pix: 4.4412e-02 
21-09-11 07:05:33.130 - INFO: [epoch:  1, iter: 433,000, lr:(8.826e-06,)] l_pix: 1.1527e+00 
21-09-11 07:06:48.991 - INFO: [epoch:  1, iter: 433,100, lr:(8.801e-06,)] l_pix: 8.3743e-01 
21-09-11 07:08:04.632 - INFO: [epoch:  1, iter: 433,200, lr:(8.775e-06,)] l_pix: 1.7248e+00 
21-09-11 07:09:20.434 - INFO: [epoch:  1, iter: 433,300, lr:(8.749e-06,)] l_pix: 1.5590e+00 
21-09-11 07:10:35.844 - INFO: [epoch:  1, iter: 433,400, lr:(8.724e-06,)] l_pix: 4.2556e-01 
21-09-11 07:11:50.319 - INFO: [epoch:  1, iter: 433,500, lr:(8.698e-06,)] l_pix: 2.8934e+00 
21-09-11 07:13:04.498 - INFO: [epoch:  1, iter: 433,600, lr:(8.673e-06,)] l_pix: 5.7377e-01 
21-09-11 07:14:18.880 - INFO: [epoch:  1, iter: 433,700, lr:(8.647e-06,)] l_pix: 1.1820e+00 
21-09-11 07:15:33.409 - INFO: [epoch:  1, iter: 433,800, lr:(8.622e-06,)] l_pix: 1.2489e+00 
21-09-11 07:16:48.232 - INFO: [epoch:  1, iter: 433,900, lr:(8.597e-06,)] l_pix: 2.7260e+00 
21-09-11 07:18:02.892 - INFO: [epoch:  1, iter: 434,000, lr:(8.571e-06,)] l_pix: 2.4236e-01 
21-09-11 07:19:17.634 - INFO: [epoch:  1, iter: 434,100, lr:(8.546e-06,)] l_pix: 1.1929e+00 
21-09-11 07:20:32.134 - INFO: [epoch:  1, iter: 434,200, lr:(8.521e-06,)] l_pix: 4.2240e-02 
21-09-11 07:21:46.379 - INFO: [epoch:  1, iter: 434,300, lr:(8.496e-06,)] l_pix: 1.7778e+00 
21-09-11 07:23:00.528 - INFO: [epoch:  1, iter: 434,400, lr:(8.470e-06,)] l_pix: 2.1444e+00 
21-09-11 07:24:14.640 - INFO: [epoch:  1, iter: 434,500, lr:(8.445e-06,)] l_pix: 1.3080e+00 
21-09-11 07:25:29.248 - INFO: [epoch:  1, iter: 434,600, lr:(8.420e-06,)] l_pix: 2.3952e+00 
21-09-11 07:26:44.174 - INFO: [epoch:  1, iter: 434,700, lr:(8.395e-06,)] l_pix: 4.5683e-01 
21-09-11 07:27:58.880 - INFO: [epoch:  1, iter: 434,800, lr:(8.370e-06,)] l_pix: 5.1905e-01 
21-09-11 07:29:13.752 - INFO: [epoch:  1, iter: 434,900, lr:(8.345e-06,)] l_pix: 6.3196e-01 
21-09-11 07:30:28.560 - INFO: [epoch:  1, iter: 435,000, lr:(8.320e-06,)] l_pix: 1.5407e+00 
21-09-11 07:31:47.238 - INFO: # Validation # PSNR: 2.8996e+01
21-09-11 07:31:47.239 - INFO: Saving models and training states.
21-09-11 07:33:02.848 - INFO: [epoch:  1, iter: 435,100, lr:(8.295e-06,)] l_pix: 2.6802e+00 
21-09-11 07:34:17.658 - INFO: [epoch:  1, iter: 435,200, lr:(8.270e-06,)] l_pix: 1.0906e+00 
21-09-11 07:35:32.777 - INFO: [epoch:  1, iter: 435,300, lr:(8.246e-06,)] l_pix: 1.3263e+00 
21-09-11 07:36:48.181 - INFO: [epoch:  1, iter: 435,400, lr:(8.221e-06,)] l_pix: 2.3773e+00 
21-09-11 07:38:03.735 - INFO: [epoch:  1, iter: 435,500, lr:(8.196e-06,)] l_pix: 7.1745e-01 
21-09-11 07:39:19.197 - INFO: [epoch:  1, iter: 435,600, lr:(8.171e-06,)] l_pix: 1.5132e+00 
21-09-11 07:40:34.770 - INFO: [epoch:  1, iter: 435,700, lr:(8.146e-06,)] l_pix: 1.3097e+00 
21-09-11 07:41:50.317 - INFO: [epoch:  1, iter: 435,800, lr:(8.122e-06,)] l_pix: 1.3606e+00 
21-09-11 07:43:05.896 - INFO: [epoch:  1, iter: 435,900, lr:(8.097e-06,)] l_pix: 9.4082e-01 
21-09-11 07:44:21.235 - INFO: [epoch:  1, iter: 436,000, lr:(8.073e-06,)] l_pix: 1.1819e+00 
21-09-11 07:45:36.872 - INFO: [epoch:  1, iter: 436,100, lr:(8.048e-06,)] l_pix: 9.9949e-01 
21-09-11 07:46:52.457 - INFO: [epoch:  1, iter: 436,200, lr:(8.023e-06,)] l_pix: 4.8383e-01 
21-09-11 07:48:08.135 - INFO: [epoch:  1, iter: 436,300, lr:(7.999e-06,)] l_pix: 1.6879e+00 
21-09-11 07:49:23.381 - INFO: [epoch:  1, iter: 436,400, lr:(7.975e-06,)] l_pix: 1.7877e+00 
21-09-11 07:50:38.947 - INFO: [epoch:  1, iter: 436,500, lr:(7.950e-06,)] l_pix: 1.3693e+00 
21-09-11 07:51:54.481 - INFO: [epoch:  1, iter: 436,600, lr:(7.926e-06,)] l_pix: 2.2294e+00 
21-09-11 07:53:10.061 - INFO: [epoch:  1, iter: 436,700, lr:(7.901e-06,)] l_pix: 2.5846e+00 
21-09-11 07:54:24.819 - INFO: [epoch:  1, iter: 436,800, lr:(7.877e-06,)] l_pix: 2.4135e+00 
21-09-11 07:55:39.689 - INFO: [epoch:  1, iter: 436,900, lr:(7.853e-06,)] l_pix: 4.4338e-01 
21-09-11 07:56:54.654 - INFO: [epoch:  1, iter: 437,000, lr:(7.829e-06,)] l_pix: 2.1801e+00 
21-09-11 07:58:09.838 - INFO: [epoch:  1, iter: 437,100, lr:(7.804e-06,)] l_pix: 3.6803e-01 
21-09-11 07:59:24.568 - INFO: [epoch:  1, iter: 437,200, lr:(7.780e-06,)] l_pix: 5.3922e-01 
21-09-11 08:00:39.588 - INFO: [epoch:  1, iter: 437,300, lr:(7.756e-06,)] l_pix: 2.0593e+00 
21-09-11 08:01:54.196 - INFO: [epoch:  1, iter: 437,400, lr:(7.732e-06,)] l_pix: 6.3062e-01 
21-09-11 08:03:09.042 - INFO: [epoch:  1, iter: 437,500, lr:(7.708e-06,)] l_pix: 1.0357e+00 
21-09-11 08:04:23.334 - INFO: [epoch:  1, iter: 437,600, lr:(7.684e-06,)] l_pix: 1.7600e+00 
21-09-11 08:05:38.184 - INFO: [epoch:  1, iter: 437,700, lr:(7.660e-06,)] l_pix: 4.3436e-01 
21-09-11 08:06:52.812 - INFO: [epoch:  1, iter: 437,800, lr:(7.636e-06,)] l_pix: 2.5294e+00 
21-09-11 08:08:07.701 - INFO: [epoch:  1, iter: 437,900, lr:(7.612e-06,)] l_pix: 1.4199e+00 
21-09-11 08:09:22.629 - INFO: [epoch:  1, iter: 438,000, lr:(7.588e-06,)] l_pix: 1.4817e+00 
21-09-11 08:10:38.080 - INFO: [epoch:  1, iter: 438,100, lr:(7.564e-06,)] l_pix: 1.1095e+00 
21-09-11 08:11:53.062 - INFO: [epoch:  1, iter: 438,200, lr:(7.541e-06,)] l_pix: 1.4075e+00 
21-09-11 08:13:08.057 - INFO: [epoch:  1, iter: 438,300, lr:(7.517e-06,)] l_pix: 2.5247e+00 
21-09-11 08:14:22.858 - INFO: [epoch:  1, iter: 438,400, lr:(7.493e-06,)] l_pix: 8.0103e-01 
21-09-11 08:15:38.042 - INFO: [epoch:  1, iter: 438,500, lr:(7.470e-06,)] l_pix: 8.9674e-01 
21-09-11 08:16:52.761 - INFO: [epoch:  1, iter: 438,600, lr:(7.446e-06,)] l_pix: 6.5258e-01 
21-09-11 08:18:08.357 - INFO: [epoch:  1, iter: 438,700, lr:(7.422e-06,)] l_pix: 3.7128e-01 
21-09-11 08:19:23.712 - INFO: [epoch:  1, iter: 438,800, lr:(7.399e-06,)] l_pix: 2.3245e+00 
21-09-11 08:20:39.249 - INFO: [epoch:  1, iter: 438,900, lr:(7.375e-06,)] l_pix: 1.2153e+00 
21-09-11 08:21:54.764 - INFO: [epoch:  1, iter: 439,000, lr:(7.352e-06,)] l_pix: 8.1435e-01 
21-09-11 08:23:10.253 - INFO: [epoch:  1, iter: 439,100, lr:(7.328e-06,)] l_pix: 2.1772e-02 
21-09-11 08:24:25.631 - INFO: [epoch:  1, iter: 439,200, lr:(7.305e-06,)] l_pix: 1.2074e+00 
21-09-11 08:25:41.138 - INFO: [epoch:  1, iter: 439,300, lr:(7.281e-06,)] l_pix: 2.3777e+00 
21-09-11 08:26:58.693 - INFO: [epoch:  1, iter: 439,400, lr:(7.258e-06,)] l_pix: 3.2960e-01 
21-09-11 08:28:24.739 - INFO: [epoch:  1, iter: 439,500, lr:(7.235e-06,)] l_pix: 7.3421e-01 
21-09-11 08:29:50.759 - INFO: [epoch:  1, iter: 439,600, lr:(7.211e-06,)] l_pix: 8.4598e-01 
21-09-11 08:31:17.341 - INFO: [epoch:  1, iter: 439,700, lr:(7.188e-06,)] l_pix: 1.9318e+00 
21-09-11 08:32:43.330 - INFO: [epoch:  1, iter: 439,800, lr:(7.165e-06,)] l_pix: 2.2040e+00 
21-09-11 08:34:09.718 - INFO: [epoch:  1, iter: 439,900, lr:(7.142e-06,)] l_pix: 9.3375e-01 
21-09-11 08:35:37.053 - INFO: [epoch:  1, iter: 440,000, lr:(7.119e-06,)] l_pix: 1.3932e+00 
21-09-11 08:36:55.930 - INFO: # Validation # PSNR: 2.9027e+01
21-09-11 08:36:55.930 - INFO: Saving models and training states.
21-09-11 08:38:11.786 - INFO: [epoch:  1, iter: 440,100, lr:(7.096e-06,)] l_pix: 1.3545e+00 
21-09-11 08:39:26.775 - INFO: [epoch:  1, iter: 440,200, lr:(7.072e-06,)] l_pix: 1.5622e+00 
21-09-11 08:40:41.612 - INFO: [epoch:  1, iter: 440,300, lr:(7.049e-06,)] l_pix: 1.2756e+00 
21-09-11 08:41:55.822 - INFO: [epoch:  1, iter: 440,400, lr:(7.026e-06,)] l_pix: 1.0221e+00 
21-09-11 08:43:10.189 - INFO: [epoch:  1, iter: 440,500, lr:(7.003e-06,)] l_pix: 1.7451e+00 
21-09-11 08:44:24.580 - INFO: [epoch:  1, iter: 440,600, lr:(6.981e-06,)] l_pix: 1.7419e+00 
21-09-11 08:45:39.345 - INFO: [epoch:  1, iter: 440,700, lr:(6.958e-06,)] l_pix: 1.3882e+00 
21-09-11 08:46:54.650 - INFO: [epoch:  1, iter: 440,800, lr:(6.935e-06,)] l_pix: 1.3251e+00 
21-09-11 08:48:10.241 - INFO: [epoch:  1, iter: 440,900, lr:(6.912e-06,)] l_pix: 1.2246e+00 
21-09-11 08:49:25.978 - INFO: [epoch:  1, iter: 441,000, lr:(6.889e-06,)] l_pix: 1.2593e+00 
21-09-11 08:50:41.207 - INFO: [epoch:  1, iter: 441,100, lr:(6.867e-06,)] l_pix: 2.2859e+00 
21-09-11 08:51:55.989 - INFO: [epoch:  1, iter: 441,200, lr:(6.844e-06,)] l_pix: 2.0230e+00 
21-09-11 08:53:10.797 - INFO: [epoch:  1, iter: 441,300, lr:(6.821e-06,)] l_pix: 4.4962e-01 
21-09-11 08:54:25.935 - INFO: [epoch:  1, iter: 441,400, lr:(6.799e-06,)] l_pix: 1.1679e+00 
21-09-11 08:55:41.776 - INFO: [epoch:  1, iter: 441,500, lr:(6.776e-06,)] l_pix: 1.6787e+00 
21-09-11 08:56:57.513 - INFO: [epoch:  1, iter: 441,600, lr:(6.753e-06,)] l_pix: 1.4324e+00 
21-09-11 08:58:12.749 - INFO: [epoch:  1, iter: 441,700, lr:(6.731e-06,)] l_pix: 2.0325e+00 
21-09-11 08:59:27.188 - INFO: [epoch:  1, iter: 441,800, lr:(6.708e-06,)] l_pix: 7.6336e-01 
21-09-11 09:00:42.013 - INFO: [epoch:  1, iter: 441,900, lr:(6.686e-06,)] l_pix: 2.2300e+00 
21-09-11 09:01:56.556 - INFO: [epoch:  1, iter: 442,000, lr:(6.664e-06,)] l_pix: 2.2441e+00 
21-09-11 09:03:11.279 - INFO: [epoch:  1, iter: 442,100, lr:(6.641e-06,)] l_pix: 2.7002e+00 
21-09-11 09:04:25.651 - INFO: [epoch:  1, iter: 442,200, lr:(6.619e-06,)] l_pix: 2.3224e+00 
21-09-11 09:05:40.731 - INFO: [epoch:  1, iter: 442,300, lr:(6.597e-06,)] l_pix: 1.1806e+00 
21-09-11 09:06:55.207 - INFO: [epoch:  1, iter: 442,400, lr:(6.574e-06,)] l_pix: 1.5515e+00 
21-09-11 09:08:09.741 - INFO: [epoch:  1, iter: 442,500, lr:(6.552e-06,)] l_pix: 6.5556e-01 
21-09-11 09:09:24.262 - INFO: [epoch:  1, iter: 442,600, lr:(6.530e-06,)] l_pix: 7.9795e-01 
21-09-11 09:10:39.041 - INFO: [epoch:  1, iter: 442,700, lr:(6.508e-06,)] l_pix: 2.9303e+00 
21-09-11 09:11:53.462 - INFO: [epoch:  1, iter: 442,800, lr:(6.486e-06,)] l_pix: 1.8811e+00 
21-09-11 09:13:08.104 - INFO: [epoch:  1, iter: 442,900, lr:(6.464e-06,)] l_pix: 2.0647e+00 
21-09-11 09:14:22.628 - INFO: [epoch:  1, iter: 443,000, lr:(6.442e-06,)] l_pix: 2.5770e+00 
21-09-11 09:15:37.674 - INFO: [epoch:  1, iter: 443,100, lr:(6.420e-06,)] l_pix: 4.8484e-01 
21-09-11 09:16:52.368 - INFO: [epoch:  1, iter: 443,200, lr:(6.398e-06,)] l_pix: 2.3507e+00 
21-09-11 09:18:07.792 - INFO: [epoch:  1, iter: 443,300, lr:(6.376e-06,)] l_pix: 8.0390e-01 
21-09-11 09:19:23.058 - INFO: [epoch:  1, iter: 443,400, lr:(6.354e-06,)] l_pix: 8.3671e-01 
21-09-11 09:20:38.313 - INFO: [epoch:  1, iter: 443,500, lr:(6.332e-06,)] l_pix: 4.8974e-01 
21-09-11 09:21:53.607 - INFO: [epoch:  1, iter: 443,600, lr:(6.310e-06,)] l_pix: 2.7560e+00 
21-09-11 09:23:08.340 - INFO: [epoch:  1, iter: 443,700, lr:(6.288e-06,)] l_pix: 1.2457e+00 
21-09-11 09:24:22.876 - INFO: [epoch:  1, iter: 443,800, lr:(6.267e-06,)] l_pix: 1.6607e+00 
21-09-11 09:25:36.914 - INFO: [epoch:  1, iter: 443,900, lr:(6.245e-06,)] l_pix: 2.6799e+00 
21-09-11 09:26:50.758 - INFO: [epoch:  1, iter: 444,000, lr:(6.223e-06,)] l_pix: 1.0643e+00 
21-09-11 09:28:04.508 - INFO: [epoch:  1, iter: 444,100, lr:(6.202e-06,)] l_pix: 7.1095e-01 
21-09-11 09:29:18.093 - INFO: [epoch:  1, iter: 444,200, lr:(6.180e-06,)] l_pix: 2.5305e+00 
21-09-11 09:30:32.149 - INFO: [epoch:  1, iter: 444,300, lr:(6.159e-06,)] l_pix: 2.1089e+00 
21-09-11 09:31:46.268 - INFO: [epoch:  1, iter: 444,400, lr:(6.137e-06,)] l_pix: 1.5441e+00 
21-09-11 09:33:00.625 - INFO: [epoch:  1, iter: 444,500, lr:(6.116e-06,)] l_pix: 2.3450e+00 
21-09-11 09:34:14.903 - INFO: [epoch:  1, iter: 444,600, lr:(6.094e-06,)] l_pix: 5.7443e-01 
21-09-11 09:35:29.661 - INFO: [epoch:  1, iter: 444,700, lr:(6.073e-06,)] l_pix: 2.0830e+00 
21-09-11 09:36:44.114 - INFO: [epoch:  1, iter: 444,800, lr:(6.051e-06,)] l_pix: 2.2020e+00 
21-09-11 09:37:58.594 - INFO: [epoch:  1, iter: 444,900, lr:(6.030e-06,)] l_pix: 2.2686e+00 
21-09-11 09:39:12.967 - INFO: [epoch:  1, iter: 445,000, lr:(6.009e-06,)] l_pix: 9.7034e-01 
21-09-11 09:40:31.665 - INFO: # Validation # PSNR: 2.9034e+01
21-09-11 09:40:31.666 - INFO: Saving models and training states.
21-09-11 09:41:47.264 - INFO: [epoch:  1, iter: 445,100, lr:(5.988e-06,)] l_pix: 5.6172e-01 
21-09-11 09:43:02.191 - INFO: [epoch:  1, iter: 445,200, lr:(5.966e-06,)] l_pix: 8.6663e-01 
21-09-11 09:44:16.192 - INFO: [epoch:  1, iter: 445,300, lr:(5.945e-06,)] l_pix: 1.2384e+00 
21-09-11 09:45:30.923 - INFO: [epoch:  1, iter: 445,400, lr:(5.924e-06,)] l_pix: 9.3198e-01 
21-09-11 09:46:45.524 - INFO: [epoch:  1, iter: 445,500, lr:(5.903e-06,)] l_pix: 1.3505e+00 
21-09-11 09:48:00.121 - INFO: [epoch:  1, iter: 445,600, lr:(5.882e-06,)] l_pix: 2.0737e+00 
21-09-11 09:49:14.699 - INFO: [epoch:  1, iter: 445,700, lr:(5.861e-06,)] l_pix: 5.0404e-01 
21-09-11 09:50:29.757 - INFO: [epoch:  1, iter: 445,800, lr:(5.840e-06,)] l_pix: 1.7728e+00 
21-09-11 09:51:44.743 - INFO: [epoch:  1, iter: 445,900, lr:(5.819e-06,)] l_pix: 3.7142e-01 
21-09-11 09:52:59.441 - INFO: [epoch:  1, iter: 446,000, lr:(5.798e-06,)] l_pix: 2.0578e+00 
21-09-11 09:54:14.241 - INFO: [epoch:  1, iter: 446,100, lr:(5.777e-06,)] l_pix: 3.2807e+00 
21-09-11 09:55:29.938 - INFO: [epoch:  1, iter: 446,200, lr:(5.756e-06,)] l_pix: 5.0177e-01 
21-09-11 09:56:45.244 - INFO: [epoch:  1, iter: 446,300, lr:(5.735e-06,)] l_pix: 2.4630e+00 
21-09-11 09:58:00.435 - INFO: [epoch:  1, iter: 446,400, lr:(5.715e-06,)] l_pix: 1.4611e+00 
21-09-11 09:59:15.587 - INFO: [epoch:  1, iter: 446,500, lr:(5.694e-06,)] l_pix: 1.0937e+00 
21-09-11 10:00:30.979 - INFO: [epoch:  1, iter: 446,600, lr:(5.673e-06,)] l_pix: 4.9870e-01 
21-09-11 10:01:47.180 - INFO: [epoch:  1, iter: 446,700, lr:(5.652e-06,)] l_pix: 9.2373e-01 
21-09-11 10:03:02.864 - INFO: [epoch:  1, iter: 446,800, lr:(5.632e-06,)] l_pix: 1.6068e+00 
21-09-11 10:04:17.568 - INFO: [epoch:  1, iter: 446,900, lr:(5.611e-06,)] l_pix: 1.0307e+00 
21-09-11 10:05:32.743 - INFO: [epoch:  1, iter: 447,000, lr:(5.591e-06,)] l_pix: 1.7852e+00 
21-09-11 10:06:48.262 - INFO: [epoch:  1, iter: 447,100, lr:(5.570e-06,)] l_pix: 1.4258e+00 
21-09-11 10:08:03.822 - INFO: [epoch:  1, iter: 447,200, lr:(5.550e-06,)] l_pix: 1.0115e+00 
21-09-11 10:09:19.252 - INFO: [epoch:  1, iter: 447,300, lr:(5.529e-06,)] l_pix: 1.4361e+00 
21-09-11 10:10:34.917 - INFO: [epoch:  1, iter: 447,400, lr:(5.509e-06,)] l_pix: 2.1833e+00 
21-09-11 10:11:49.918 - INFO: [epoch:  1, iter: 447,500, lr:(5.489e-06,)] l_pix: 1.3751e+00 
21-09-11 10:13:05.791 - INFO: [epoch:  1, iter: 447,600, lr:(5.468e-06,)] l_pix: 3.7202e-01 
21-09-11 10:14:21.450 - INFO: [epoch:  1, iter: 447,700, lr:(5.448e-06,)] l_pix: 4.0325e-01 
21-09-11 10:15:37.244 - INFO: [epoch:  1, iter: 447,800, lr:(5.428e-06,)] l_pix: 5.3092e-01 
21-09-11 10:16:52.632 - INFO: [epoch:  1, iter: 447,900, lr:(5.407e-06,)] l_pix: 3.4030e+00 
21-09-11 10:18:07.355 - INFO: [epoch:  1, iter: 448,000, lr:(5.387e-06,)] l_pix: 2.5421e+00 
21-09-11 10:19:22.162 - INFO: [epoch:  1, iter: 448,100, lr:(5.367e-06,)] l_pix: 6.3454e-01 
21-09-11 10:20:37.585 - INFO: [epoch:  1, iter: 448,200, lr:(5.347e-06,)] l_pix: 1.0588e+00 
21-09-11 10:21:52.870 - INFO: [epoch:  1, iter: 448,300, lr:(5.327e-06,)] l_pix: 1.7714e+00 
21-09-11 10:23:07.850 - INFO: [epoch:  1, iter: 448,400, lr:(5.307e-06,)] l_pix: 1.2772e+00 
21-09-11 10:24:22.273 - INFO: [epoch:  1, iter: 448,500, lr:(5.287e-06,)] l_pix: 4.8125e-01 
21-09-11 10:25:37.113 - INFO: [epoch:  1, iter: 448,600, lr:(5.267e-06,)] l_pix: 7.7662e-01 
21-09-11 10:26:51.815 - INFO: [epoch:  1, iter: 448,700, lr:(5.247e-06,)] l_pix: 7.8558e-01 
21-09-11 10:28:06.742 - INFO: [epoch:  1, iter: 448,800, lr:(5.227e-06,)] l_pix: 7.1867e-01 
21-09-11 10:29:21.302 - INFO: [epoch:  1, iter: 448,900, lr:(5.207e-06,)] l_pix: 2.1632e+00 
21-09-11 10:30:35.954 - INFO: [epoch:  1, iter: 449,000, lr:(5.188e-06,)] l_pix: 1.0602e+00 
21-09-11 10:31:50.319 - INFO: [epoch:  1, iter: 449,100, lr:(5.168e-06,)] l_pix: 2.9200e+00 
21-09-11 10:33:05.240 - INFO: [epoch:  1, iter: 449,200, lr:(5.148e-06,)] l_pix: 9.0618e-01 
21-09-11 10:34:20.857 - INFO: [epoch:  1, iter: 449,300, lr:(5.128e-06,)] l_pix: 9.0728e-01 
21-09-11 10:35:36.695 - INFO: [epoch:  1, iter: 449,400, lr:(5.109e-06,)] l_pix: 1.6105e+00 
21-09-11 10:36:51.712 - INFO: [epoch:  1, iter: 449,500, lr:(5.089e-06,)] l_pix: 1.5010e+00 
21-09-11 10:38:06.391 - INFO: [epoch:  1, iter: 449,600, lr:(5.070e-06,)] l_pix: 1.9547e+00 
21-09-11 10:39:20.788 - INFO: [epoch:  1, iter: 449,700, lr:(5.050e-06,)] l_pix: 2.3844e+00 
21-09-11 10:40:35.721 - INFO: [epoch:  1, iter: 449,800, lr:(5.031e-06,)] l_pix: 1.2535e+00 
21-09-11 10:41:50.510 - INFO: [epoch:  1, iter: 449,900, lr:(5.011e-06,)] l_pix: 4.5031e-01 
21-09-11 10:43:05.566 - INFO: [epoch:  1, iter: 450,000, lr:(4.992e-06,)] l_pix: 1.5045e+00 
21-09-11 10:44:24.099 - INFO: # Validation # PSNR: 2.8972e+01
21-09-11 10:44:24.099 - INFO: Saving models and training states.
21-09-11 10:45:40.254 - INFO: [epoch:  1, iter: 450,100, lr:(4.972e-06,)] l_pix: 1.6963e+00 
21-09-11 10:46:55.129 - INFO: [epoch:  1, iter: 450,200, lr:(4.953e-06,)] l_pix: 6.9804e-01 
21-09-11 10:48:09.932 - INFO: [epoch:  1, iter: 450,300, lr:(4.934e-06,)] l_pix: 6.6605e-01 
21-09-11 10:49:24.946 - INFO: [epoch:  1, iter: 450,400, lr:(4.914e-06,)] l_pix: 6.7771e-01 
21-09-11 10:50:39.732 - INFO: [epoch:  1, iter: 450,500, lr:(4.895e-06,)] l_pix: 6.5607e-01 
21-09-11 10:51:54.450 - INFO: [epoch:  1, iter: 450,600, lr:(4.876e-06,)] l_pix: 5.9883e-01 
21-09-11 10:53:08.759 - INFO: [epoch:  1, iter: 450,700, lr:(4.857e-06,)] l_pix: 8.2790e-01 
21-09-11 10:54:23.291 - INFO: [epoch:  1, iter: 450,800, lr:(4.838e-06,)] l_pix: 7.6434e-01 
21-09-11 10:55:38.265 - INFO: [epoch:  1, iter: 450,900, lr:(4.819e-06,)] l_pix: 1.1282e+00 
21-09-11 10:56:52.701 - INFO: [epoch:  1, iter: 451,000, lr:(4.800e-06,)] l_pix: 1.1695e+00 
21-09-11 10:58:06.961 - INFO: [epoch:  1, iter: 451,100, lr:(4.781e-06,)] l_pix: 1.6550e+00 
21-09-11 10:59:21.435 - INFO: [epoch:  1, iter: 451,200, lr:(4.762e-06,)] l_pix: 1.8390e+00 
21-09-11 11:00:36.137 - INFO: [epoch:  1, iter: 451,300, lr:(4.743e-06,)] l_pix: 1.2000e+00 
21-09-11 11:01:50.281 - INFO: [epoch:  1, iter: 451,400, lr:(4.724e-06,)] l_pix: 1.1270e+00 
21-09-11 11:03:05.334 - INFO: [epoch:  1, iter: 451,500, lr:(4.705e-06,)] l_pix: 7.5106e-01 
21-09-11 11:04:19.669 - INFO: [epoch:  1, iter: 451,600, lr:(4.686e-06,)] l_pix: 2.3326e+00 
21-09-11 11:05:34.701 - INFO: [epoch:  1, iter: 451,700, lr:(4.667e-06,)] l_pix: 1.6481e+00 
21-09-11 11:06:50.200 - INFO: [epoch:  1, iter: 451,800, lr:(4.648e-06,)] l_pix: 1.1241e+00 
21-09-11 11:08:05.455 - INFO: [epoch:  1, iter: 451,900, lr:(4.630e-06,)] l_pix: 2.6354e+00 
21-09-11 11:09:19.656 - INFO: [epoch:  1, iter: 452,000, lr:(4.611e-06,)] l_pix: 1.2118e+00 
21-09-11 11:10:34.663 - INFO: [epoch:  1, iter: 452,100, lr:(4.592e-06,)] l_pix: 1.1644e+00 
21-09-11 11:11:50.173 - INFO: [epoch:  1, iter: 452,200, lr:(4.574e-06,)] l_pix: 1.2103e+00 
21-09-11 11:13:05.459 - INFO: [epoch:  1, iter: 452,300, lr:(4.555e-06,)] l_pix: 1.3559e+00 
21-09-11 11:14:20.766 - INFO: [epoch:  1, iter: 452,400, lr:(4.537e-06,)] l_pix: 6.8110e-01 
21-09-11 11:15:36.438 - INFO: [epoch:  1, iter: 452,500, lr:(4.518e-06,)] l_pix: 5.2514e-01 
21-09-11 11:16:52.395 - INFO: [epoch:  1, iter: 452,600, lr:(4.500e-06,)] l_pix: 2.8049e+00 
21-09-11 11:18:08.276 - INFO: [epoch:  1, iter: 452,700, lr:(4.481e-06,)] l_pix: 4.9199e-01 
21-09-11 11:19:24.056 - INFO: [epoch:  1, iter: 452,800, lr:(4.463e-06,)] l_pix: 5.4003e-01 
21-09-11 11:20:40.047 - INFO: [epoch:  1, iter: 452,900, lr:(4.445e-06,)] l_pix: 1.0238e+00 
21-09-11 11:21:55.771 - INFO: [epoch:  1, iter: 453,000, lr:(4.426e-06,)] l_pix: 1.3075e+00 
21-09-11 11:23:11.660 - INFO: [epoch:  1, iter: 453,100, lr:(4.408e-06,)] l_pix: 5.1694e-01 
21-09-11 11:24:27.364 - INFO: [epoch:  1, iter: 453,200, lr:(4.390e-06,)] l_pix: 6.6167e-01 
21-09-11 11:25:42.810 - INFO: [epoch:  1, iter: 453,300, lr:(4.372e-06,)] l_pix: 5.8139e-01 
21-09-11 11:26:57.789 - INFO: [epoch:  1, iter: 453,400, lr:(4.354e-06,)] l_pix: 5.9134e-01 
21-09-11 11:28:13.360 - INFO: [epoch:  1, iter: 453,500, lr:(4.336e-06,)] l_pix: 1.0992e+00 
21-09-11 11:29:29.160 - INFO: [epoch:  1, iter: 453,600, lr:(4.317e-06,)] l_pix: 1.8681e+00 
21-09-11 11:30:45.010 - INFO: [epoch:  1, iter: 453,700, lr:(4.299e-06,)] l_pix: 7.3778e-01 
21-09-11 11:32:00.705 - INFO: [epoch:  1, iter: 453,800, lr:(4.281e-06,)] l_pix: 1.2330e+00 
21-09-11 11:33:16.577 - INFO: [epoch:  1, iter: 453,900, lr:(4.263e-06,)] l_pix: 2.2718e+00 
21-09-11 11:34:32.299 - INFO: [epoch:  1, iter: 454,000, lr:(4.246e-06,)] l_pix: 1.2596e+00 
21-09-11 11:35:47.374 - INFO: [epoch:  1, iter: 454,100, lr:(4.228e-06,)] l_pix: 1.6832e+00 
21-09-11 11:37:02.281 - INFO: [epoch:  1, iter: 454,200, lr:(4.210e-06,)] l_pix: 5.3702e-01 
21-09-11 11:38:17.269 - INFO: [epoch:  1, iter: 454,300, lr:(4.192e-06,)] l_pix: 1.0925e+00 
21-09-11 11:39:32.167 - INFO: [epoch:  1, iter: 454,400, lr:(4.174e-06,)] l_pix: 9.1856e-01 
21-09-11 11:40:47.649 - INFO: [epoch:  1, iter: 454,500, lr:(4.157e-06,)] l_pix: 7.8628e-01 
21-09-11 11:42:02.600 - INFO: [epoch:  1, iter: 454,600, lr:(4.139e-06,)] l_pix: 2.4141e+00 
21-09-11 11:43:17.638 - INFO: [epoch:  1, iter: 454,700, lr:(4.121e-06,)] l_pix: 1.8819e+00 
21-09-11 11:44:32.656 - INFO: [epoch:  1, iter: 454,800, lr:(4.104e-06,)] l_pix: 2.2197e+00 
21-09-11 11:45:48.004 - INFO: [epoch:  1, iter: 454,900, lr:(4.086e-06,)] l_pix: 9.1402e-01 
21-09-11 11:47:02.597 - INFO: [epoch:  1, iter: 455,000, lr:(4.068e-06,)] l_pix: 1.4441e+00 
21-09-11 11:48:20.901 - INFO: # Validation # PSNR: 2.8979e+01
21-09-11 11:48:20.902 - INFO: Saving models and training states.
21-09-11 11:49:38.151 - INFO: [epoch:  1, iter: 455,100, lr:(4.051e-06,)] l_pix: 1.2377e+00 
21-09-11 11:50:53.327 - INFO: [epoch:  1, iter: 455,200, lr:(4.034e-06,)] l_pix: 2.2759e+00 
21-09-11 11:52:08.652 - INFO: [epoch:  1, iter: 455,300, lr:(4.016e-06,)] l_pix: 1.0338e+00 
21-09-11 11:53:24.100 - INFO: [epoch:  1, iter: 455,400, lr:(3.999e-06,)] l_pix: 5.2913e-01 
21-09-11 11:54:39.566 - INFO: [epoch:  1, iter: 455,500, lr:(3.981e-06,)] l_pix: 2.8207e+00 
21-09-11 11:55:54.953 - INFO: [epoch:  1, iter: 455,600, lr:(3.964e-06,)] l_pix: 7.4069e-01 
21-09-11 11:57:09.764 - INFO: [epoch:  1, iter: 455,700, lr:(3.947e-06,)] l_pix: 1.4990e+00 
21-09-11 11:58:24.198 - INFO: [epoch:  1, iter: 455,800, lr:(3.930e-06,)] l_pix: 2.2137e+00 
21-09-11 11:59:43.248 - INFO: [epoch:  1, iter: 455,900, lr:(3.912e-06,)] l_pix: 9.8927e-01 
21-09-11 12:01:11.406 - INFO: [epoch:  1, iter: 456,000, lr:(3.895e-06,)] l_pix: 6.1247e-01 
21-09-11 12:02:39.280 - INFO: [epoch:  1, iter: 456,100, lr:(3.878e-06,)] l_pix: 6.5745e-01 
21-09-11 12:04:06.638 - INFO: [epoch:  1, iter: 456,200, lr:(3.861e-06,)] l_pix: 5.1073e-01 
21-09-11 12:05:22.640 - INFO: [epoch:  1, iter: 456,300, lr:(3.844e-06,)] l_pix: 7.9149e-01 
21-09-11 12:06:37.631 - INFO: [epoch:  1, iter: 456,400, lr:(3.827e-06,)] l_pix: 1.8224e+00 
21-09-11 12:07:52.601 - INFO: [epoch:  1, iter: 456,500, lr:(3.810e-06,)] l_pix: 1.9507e-01 
21-09-11 12:09:07.957 - INFO: [epoch:  1, iter: 456,600, lr:(3.793e-06,)] l_pix: 2.1169e+00 
21-09-11 12:10:24.060 - INFO: [epoch:  1, iter: 456,700, lr:(3.776e-06,)] l_pix: 9.6598e-01 
21-09-11 12:11:39.866 - INFO: [epoch:  1, iter: 456,800, lr:(3.759e-06,)] l_pix: 1.5130e+00 
21-09-11 12:13:08.231 - INFO: [epoch:  1, iter: 456,900, lr:(3.742e-06,)] l_pix: 2.0445e+00 
21-09-11 12:14:36.352 - INFO: [epoch:  1, iter: 457,000, lr:(3.726e-06,)] l_pix: 2.0856e+00 
21-09-11 12:16:04.800 - INFO: [epoch:  1, iter: 457,100, lr:(3.709e-06,)] l_pix: 2.9833e+00 
21-09-11 12:17:32.877 - INFO: [epoch:  1, iter: 457,200, lr:(3.692e-06,)] l_pix: 2.3553e+00 
21-09-11 12:18:57.441 - INFO: [epoch:  1, iter: 457,300, lr:(3.676e-06,)] l_pix: 2.1959e+00 
21-09-11 12:20:13.394 - INFO: [epoch:  1, iter: 457,400, lr:(3.659e-06,)] l_pix: 2.7814e+00 
21-09-11 12:21:29.249 - INFO: [epoch:  1, iter: 457,500, lr:(3.642e-06,)] l_pix: 1.7671e+00 
21-09-11 12:22:44.932 - INFO: [epoch:  1, iter: 457,600, lr:(3.626e-06,)] l_pix: 1.3105e+00 
21-09-11 12:24:00.749 - INFO: [epoch:  1, iter: 457,700, lr:(3.609e-06,)] l_pix: 1.0925e+00 
21-09-11 12:25:16.612 - INFO: [epoch:  1, iter: 457,800, lr:(3.593e-06,)] l_pix: 9.5702e-01 
21-09-11 12:26:30.856 - INFO: [epoch:  1, iter: 457,900, lr:(3.576e-06,)] l_pix: 4.9840e-01 
21-09-11 12:27:46.142 - INFO: [epoch:  1, iter: 458,000, lr:(3.560e-06,)] l_pix: 4.4874e-01 
21-09-11 12:29:02.023 - INFO: [epoch:  1, iter: 458,100, lr:(3.544e-06,)] l_pix: 2.1475e+00 
21-09-11 12:30:17.128 - INFO: [epoch:  1, iter: 458,200, lr:(3.527e-06,)] l_pix: 8.4341e-01 
21-09-11 12:31:31.859 - INFO: [epoch:  1, iter: 458,300, lr:(3.511e-06,)] l_pix: 3.2828e+00 
21-09-11 12:32:47.039 - INFO: [epoch:  1, iter: 458,400, lr:(3.495e-06,)] l_pix: 1.7596e+00 
21-09-11 12:34:02.337 - INFO: [epoch:  1, iter: 458,500, lr:(3.479e-06,)] l_pix: 8.6552e-01 
21-09-11 12:35:17.775 - INFO: [epoch:  1, iter: 458,600, lr:(3.462e-06,)] l_pix: 1.9279e+00 
21-09-11 12:36:32.938 - INFO: [epoch:  1, iter: 458,700, lr:(3.446e-06,)] l_pix: 9.3956e-03 
21-09-11 12:37:48.147 - INFO: [epoch:  1, iter: 458,800, lr:(3.430e-06,)] l_pix: 1.1749e-01 
21-09-11 12:39:03.371 - INFO: [epoch:  1, iter: 458,900, lr:(3.414e-06,)] l_pix: 2.8154e+00 
21-09-11 12:40:18.519 - INFO: [epoch:  1, iter: 459,000, lr:(3.398e-06,)] l_pix: 1.3671e+00 
21-09-11 12:41:33.697 - INFO: [epoch:  1, iter: 459,100, lr:(3.382e-06,)] l_pix: 4.5888e-01 
21-09-11 12:42:47.704 - INFO: [epoch:  1, iter: 459,200, lr:(3.366e-06,)] l_pix: 1.4435e+00 
21-09-11 12:44:01.598 - INFO: [epoch:  1, iter: 459,300, lr:(3.350e-06,)] l_pix: 2.4838e-01 
21-09-11 12:45:15.777 - INFO: [epoch:  1, iter: 459,400, lr:(3.334e-06,)] l_pix: 1.1192e-01 
21-09-11 12:46:29.803 - INFO: [epoch:  1, iter: 459,500, lr:(3.319e-06,)] l_pix: 5.6885e-01 
21-09-11 12:47:44.549 - INFO: [epoch:  1, iter: 459,600, lr:(3.303e-06,)] l_pix: 1.0452e+00 
21-09-11 12:49:00.057 - INFO: [epoch:  1, iter: 459,700, lr:(3.287e-06,)] l_pix: 2.1877e+00 
21-09-11 12:50:14.691 - INFO: [epoch:  1, iter: 459,800, lr:(3.271e-06,)] l_pix: 1.7238e+00 
21-09-11 12:51:30.118 - INFO: [epoch:  1, iter: 459,900, lr:(3.256e-06,)] l_pix: 6.0868e-01 
21-09-11 12:52:45.518 - INFO: [epoch:  1, iter: 460,000, lr:(3.240e-06,)] l_pix: 8.7899e-01 
21-09-11 12:54:03.817 - INFO: # Validation # PSNR: 2.9001e+01
21-09-11 12:54:03.818 - INFO: Saving models and training states.
21-09-11 12:55:21.271 - INFO: [epoch:  1, iter: 460,100, lr:(3.224e-06,)] l_pix: 2.2014e+00 
21-09-11 12:56:37.156 - INFO: [epoch:  1, iter: 460,200, lr:(3.209e-06,)] l_pix: 2.4626e+00 
21-09-11 12:57:51.750 - INFO: [epoch:  1, iter: 460,300, lr:(3.193e-06,)] l_pix: 1.2967e+00 
21-09-11 12:59:05.633 - INFO: [epoch:  1, iter: 460,400, lr:(3.178e-06,)] l_pix: 1.5638e+00 
21-09-11 13:00:20.546 - INFO: [epoch:  1, iter: 460,500, lr:(3.162e-06,)] l_pix: 1.2354e+00 
21-09-11 13:01:35.331 - INFO: [epoch:  1, iter: 460,600, lr:(3.147e-06,)] l_pix: 7.5168e-03 
21-09-11 13:02:50.488 - INFO: [epoch:  1, iter: 460,700, lr:(3.132e-06,)] l_pix: 3.9892e-03 
21-09-11 13:04:05.338 - INFO: [epoch:  1, iter: 460,800, lr:(3.116e-06,)] l_pix: 1.3711e+00 
21-09-11 13:05:20.133 - INFO: [epoch:  1, iter: 460,900, lr:(3.101e-06,)] l_pix: 7.3123e-01 
21-09-11 13:06:34.747 - INFO: [epoch:  1, iter: 461,000, lr:(3.086e-06,)] l_pix: 1.9519e+00 
21-09-11 13:07:50.210 - INFO: [epoch:  1, iter: 461,100, lr:(3.070e-06,)] l_pix: 2.5002e+00 
21-09-11 13:09:05.007 - INFO: [epoch:  1, iter: 461,200, lr:(3.055e-06,)] l_pix: 1.8086e+00 
21-09-11 13:10:19.821 - INFO: [epoch:  1, iter: 461,300, lr:(3.040e-06,)] l_pix: 5.3088e-01 
21-09-11 13:11:34.093 - INFO: [epoch:  1, iter: 461,400, lr:(3.025e-06,)] l_pix: 1.7906e+00 
21-09-11 13:12:49.362 - INFO: [epoch:  1, iter: 461,500, lr:(3.010e-06,)] l_pix: 8.0144e-01 
21-09-11 13:14:08.608 - INFO: [epoch:  1, iter: 461,600, lr:(2.995e-06,)] l_pix: 1.6134e+00 
21-09-11 13:15:36.567 - INFO: [epoch:  1, iter: 461,700, lr:(2.980e-06,)] l_pix: 1.9671e-01 
21-09-11 13:17:04.683 - INFO: [epoch:  1, iter: 461,800, lr:(2.965e-06,)] l_pix: 7.5065e-01 
21-09-11 13:18:32.682 - INFO: [epoch:  1, iter: 461,900, lr:(2.950e-06,)] l_pix: 6.9003e-01 
21-09-11 13:20:00.867 - INFO: [epoch:  1, iter: 462,000, lr:(2.935e-06,)] l_pix: 6.6858e-01 
21-09-11 13:21:28.244 - INFO: [epoch:  1, iter: 462,100, lr:(2.920e-06,)] l_pix: 2.3514e+00 
21-09-11 13:22:56.047 - INFO: [epoch:  1, iter: 462,200, lr:(2.906e-06,)] l_pix: 1.8577e+00 
21-09-11 13:24:24.109 - INFO: [epoch:  1, iter: 462,300, lr:(2.891e-06,)] l_pix: 2.2637e+00 
21-09-11 13:25:51.679 - INFO: [epoch:  1, iter: 462,400, lr:(2.876e-06,)] l_pix: 1.2788e+00 
21-09-11 13:27:19.462 - INFO: [epoch:  1, iter: 462,500, lr:(2.861e-06,)] l_pix: 1.7543e+00 
21-09-11 13:28:47.548 - INFO: [epoch:  1, iter: 462,600, lr:(2.847e-06,)] l_pix: 5.7477e-01 
21-09-11 13:30:16.138 - INFO: [epoch:  1, iter: 462,700, lr:(2.832e-06,)] l_pix: 1.7899e+00 
21-09-11 13:31:44.807 - INFO: [epoch:  1, iter: 462,800, lr:(2.818e-06,)] l_pix: 9.8008e-01 
21-09-11 13:33:13.514 - INFO: [epoch:  1, iter: 462,900, lr:(2.803e-06,)] l_pix: 2.5745e+00 
21-09-11 13:34:42.043 - INFO: [epoch:  1, iter: 463,000, lr:(2.789e-06,)] l_pix: 8.5930e-01 
21-09-11 13:36:11.007 - INFO: [epoch:  1, iter: 463,100, lr:(2.774e-06,)] l_pix: 9.7934e-01 
21-09-11 13:37:39.369 - INFO: [epoch:  1, iter: 463,200, lr:(2.760e-06,)] l_pix: 5.8225e-01 
21-09-11 13:39:07.460 - INFO: [epoch:  1, iter: 463,300, lr:(2.745e-06,)] l_pix: 6.1919e-01 
21-09-11 13:40:35.566 - INFO: [epoch:  1, iter: 463,400, lr:(2.731e-06,)] l_pix: 6.2854e-01 
21-09-11 13:42:03.523 - INFO: [epoch:  1, iter: 463,500, lr:(2.717e-06,)] l_pix: 5.0761e-01 
21-09-11 13:43:31.626 - INFO: [epoch:  1, iter: 463,600, lr:(2.703e-06,)] l_pix: 6.2320e-01 
21-09-11 13:44:59.943 - INFO: [epoch:  1, iter: 463,700, lr:(2.688e-06,)] l_pix: 4.8242e-01 
21-09-11 13:46:28.354 - INFO: [epoch:  1, iter: 463,800, lr:(2.674e-06,)] l_pix: 4.3163e-01 
21-09-11 13:47:56.513 - INFO: [epoch:  1, iter: 463,900, lr:(2.660e-06,)] l_pix: 5.2300e-01 
21-09-11 13:49:24.536 - INFO: [epoch:  1, iter: 464,000, lr:(2.646e-06,)] l_pix: 5.4428e-01 
21-09-11 13:50:52.931 - INFO: [epoch:  1, iter: 464,100, lr:(2.632e-06,)] l_pix: 2.3217e+00 
21-09-11 13:52:21.000 - INFO: [epoch:  1, iter: 464,200, lr:(2.618e-06,)] l_pix: 1.1123e+00 
21-09-11 13:53:49.110 - INFO: [epoch:  1, iter: 464,300, lr:(2.604e-06,)] l_pix: 3.3705e-01 
21-09-11 13:55:17.429 - INFO: [epoch:  1, iter: 464,400, lr:(2.590e-06,)] l_pix: 1.2050e+00 
21-09-11 13:56:45.361 - INFO: [epoch:  1, iter: 464,500, lr:(2.576e-06,)] l_pix: 1.3228e+00 
21-09-11 13:58:13.662 - INFO: [epoch:  1, iter: 464,600, lr:(2.562e-06,)] l_pix: 2.6421e+00 
21-09-11 13:59:33.464 - INFO: [epoch:  1, iter: 464,700, lr:(2.548e-06,)] l_pix: 4.1527e-01 
21-09-11 14:00:48.266 - INFO: [epoch:  1, iter: 464,800, lr:(2.534e-06,)] l_pix: 5.5549e-01 
21-09-11 14:02:03.394 - INFO: [epoch:  1, iter: 464,900, lr:(2.521e-06,)] l_pix: 3.7445e-01 
21-09-11 14:03:18.886 - INFO: [epoch:  1, iter: 465,000, lr:(2.507e-06,)] l_pix: 5.7644e-01 
21-09-11 14:04:36.901 - INFO: # Validation # PSNR: 2.8993e+01
21-09-11 14:04:36.901 - INFO: Saving models and training states.
21-09-11 14:05:53.571 - INFO: [epoch:  1, iter: 465,100, lr:(2.493e-06,)] l_pix: 4.5330e-01 
21-09-11 14:07:08.351 - INFO: [epoch:  1, iter: 465,200, lr:(2.480e-06,)] l_pix: 1.1291e+00 
21-09-11 14:08:23.104 - INFO: [epoch:  1, iter: 465,300, lr:(2.466e-06,)] l_pix: 1.0933e+00 
21-09-11 14:09:37.602 - INFO: [epoch:  1, iter: 465,400, lr:(2.452e-06,)] l_pix: 9.9377e-01 
21-09-11 14:10:52.732 - INFO: [epoch:  1, iter: 465,500, lr:(2.439e-06,)] l_pix: 9.5181e-01 
21-09-11 14:12:08.001 - INFO: [epoch:  1, iter: 465,600, lr:(2.425e-06,)] l_pix: 9.2879e-01 
21-09-11 14:13:23.011 - INFO: [epoch:  1, iter: 465,700, lr:(2.412e-06,)] l_pix: 1.0708e+00 
21-09-11 14:14:37.064 - INFO: [epoch:  1, iter: 465,800, lr:(2.399e-06,)] l_pix: 1.6500e+00 
21-09-11 14:15:52.195 - INFO: [epoch:  1, iter: 465,900, lr:(2.385e-06,)] l_pix: 8.3532e-01 
21-09-11 14:17:07.278 - INFO: [epoch:  1, iter: 466,000, lr:(2.372e-06,)] l_pix: 4.7052e-01 
21-09-11 14:18:23.122 - INFO: [epoch:  1, iter: 466,100, lr:(2.359e-06,)] l_pix: 5.4866e-01 
21-09-11 14:19:38.185 - INFO: [epoch:  1, iter: 466,200, lr:(2.345e-06,)] l_pix: 5.1172e-01 
21-09-11 14:20:53.874 - INFO: [epoch:  1, iter: 466,300, lr:(2.332e-06,)] l_pix: 6.2025e-01 
21-09-11 14:22:09.090 - INFO: [epoch:  1, iter: 466,400, lr:(2.319e-06,)] l_pix: 6.9045e-01 
21-09-11 14:23:23.835 - INFO: [epoch:  1, iter: 466,500, lr:(2.306e-06,)] l_pix: 1.6546e+00 
21-09-11 14:24:38.318 - INFO: [epoch:  1, iter: 466,600, lr:(2.293e-06,)] l_pix: 9.3470e-01 
21-09-11 14:25:53.775 - INFO: [epoch:  1, iter: 466,700, lr:(2.280e-06,)] l_pix: 6.5446e-01 
21-09-11 14:27:12.463 - INFO: [epoch:  1, iter: 466,800, lr:(2.267e-06,)] l_pix: 7.9248e-01 
21-09-11 14:28:40.875 - INFO: [epoch:  1, iter: 466,900, lr:(2.254e-06,)] l_pix: 1.0677e+00 
21-09-11 14:30:09.795 - INFO: [epoch:  1, iter: 467,000, lr:(2.241e-06,)] l_pix: 7.2053e-01 
21-09-11 14:31:25.542 - INFO: [epoch:  1, iter: 467,100, lr:(2.228e-06,)] l_pix: 8.8355e-01 
21-09-11 14:32:40.233 - INFO: [epoch:  1, iter: 467,200, lr:(2.215e-06,)] l_pix: 1.4090e+00 
21-09-11 14:33:55.012 - INFO: [epoch:  1, iter: 467,300, lr:(2.202e-06,)] l_pix: 7.1813e-01 
21-09-11 14:35:10.207 - INFO: [epoch:  1, iter: 467,400, lr:(2.189e-06,)] l_pix: 1.9378e+00 
21-09-11 14:36:25.255 - INFO: [epoch:  1, iter: 467,500, lr:(2.177e-06,)] l_pix: 9.6901e-01 
21-09-11 14:37:40.279 - INFO: [epoch:  1, iter: 467,600, lr:(2.164e-06,)] l_pix: 3.6754e-01 
21-09-11 14:38:55.068 - INFO: [epoch:  1, iter: 467,700, lr:(2.151e-06,)] l_pix: 1.5407e+00 
21-09-11 14:40:09.933 - INFO: [epoch:  1, iter: 467,800, lr:(2.139e-06,)] l_pix: 2.0629e+00 
21-09-11 14:41:24.952 - INFO: [epoch:  1, iter: 467,900, lr:(2.126e-06,)] l_pix: 2.1577e+00 
21-09-11 14:42:39.949 - INFO: [epoch:  1, iter: 468,000, lr:(2.113e-06,)] l_pix: 4.5753e-01 
21-09-11 14:43:55.920 - INFO: [epoch:  1, iter: 468,100, lr:(2.101e-06,)] l_pix: 1.0248e+00 
21-09-11 14:45:12.011 - INFO: [epoch:  1, iter: 468,200, lr:(2.088e-06,)] l_pix: 1.7432e-01 
21-09-11 14:46:28.022 - INFO: [epoch:  1, iter: 468,300, lr:(2.076e-06,)] l_pix: 1.2516e+00 
21-09-11 14:47:43.932 - INFO: [epoch:  1, iter: 468,400, lr:(2.064e-06,)] l_pix: 7.5606e-01 
21-09-11 14:48:59.970 - INFO: [epoch:  1, iter: 468,500, lr:(2.051e-06,)] l_pix: 2.0707e+00 
21-09-11 14:50:16.427 - INFO: [epoch:  1, iter: 468,600, lr:(2.039e-06,)] l_pix: 1.0493e+00 
21-09-11 14:51:40.007 - INFO: [epoch:  1, iter: 468,700, lr:(2.027e-06,)] l_pix: 7.4510e-01 
21-09-11 14:53:09.162 - INFO: [epoch:  1, iter: 468,800, lr:(2.014e-06,)] l_pix: 8.6015e-01 
21-09-11 14:54:32.272 - INFO: [epoch:  1, iter: 468,900, lr:(2.002e-06,)] l_pix: 1.7743e+00 
21-09-11 14:55:48.913 - INFO: [epoch:  1, iter: 469,000, lr:(1.990e-06,)] l_pix: 1.0252e+00 
21-09-11 14:57:04.944 - INFO: [epoch:  1, iter: 469,100, lr:(1.978e-06,)] l_pix: 2.9721e+00 
21-09-11 14:58:20.912 - INFO: [epoch:  1, iter: 469,200, lr:(1.966e-06,)] l_pix: 4.9405e-03 
21-09-11 14:59:36.466 - INFO: [epoch:  1, iter: 469,300, lr:(1.954e-06,)] l_pix: 8.8894e-02 
21-09-11 15:00:51.927 - INFO: [epoch:  1, iter: 469,400, lr:(1.942e-06,)] l_pix: 1.1158e+00 
21-09-11 15:02:07.023 - INFO: [epoch:  1, iter: 469,500, lr:(1.930e-06,)] l_pix: 1.9092e+00 
21-09-11 15:03:22.097 - INFO: [epoch:  1, iter: 469,600, lr:(1.918e-06,)] l_pix: 1.2626e+00 
21-09-11 15:04:37.192 - INFO: [epoch:  1, iter: 469,700, lr:(1.906e-06,)] l_pix: 1.2724e+00 
21-09-11 15:05:52.494 - INFO: [epoch:  1, iter: 469,800, lr:(1.894e-06,)] l_pix: 1.0859e+00 
21-09-11 15:07:07.734 - INFO: [epoch:  1, iter: 469,900, lr:(1.882e-06,)] l_pix: 2.6601e+00 
21-09-11 15:08:22.721 - INFO: [epoch:  1, iter: 470,000, lr:(1.870e-06,)] l_pix: 9.5749e-01 
21-09-11 15:09:41.203 - INFO: # Validation # PSNR: 2.9005e+01
21-09-11 15:09:41.204 - INFO: Saving models and training states.
21-09-11 15:10:56.635 - INFO: [epoch:  1, iter: 470,100, lr:(1.859e-06,)] l_pix: 1.0735e+00 
21-09-11 15:12:11.339 - INFO: [epoch:  1, iter: 470,200, lr:(1.847e-06,)] l_pix: 1.2070e+00 
21-09-11 15:13:26.123 - INFO: [epoch:  1, iter: 470,300, lr:(1.835e-06,)] l_pix: 3.0290e-01 
21-09-11 15:14:40.857 - INFO: [epoch:  1, iter: 470,400, lr:(1.824e-06,)] l_pix: 1.4929e+00 
21-09-11 15:15:56.404 - INFO: [epoch:  1, iter: 470,500, lr:(1.812e-06,)] l_pix: 1.6790e+00 
21-09-11 15:17:11.975 - INFO: [epoch:  1, iter: 470,600, lr:(1.800e-06,)] l_pix: 1.5516e+00 
21-09-11 15:18:26.773 - INFO: [epoch:  1, iter: 470,700, lr:(1.789e-06,)] l_pix: 3.7424e-01 
21-09-11 15:19:41.862 - INFO: [epoch:  1, iter: 470,800, lr:(1.777e-06,)] l_pix: 2.0731e+00 
21-09-11 15:20:57.831 - INFO: [epoch:  1, iter: 470,900, lr:(1.766e-06,)] l_pix: 2.1577e+00 
21-09-11 15:22:12.423 - INFO: [epoch:  1, iter: 471,000, lr:(1.755e-06,)] l_pix: 2.2631e+00 
21-09-11 15:23:26.985 - INFO: [epoch:  1, iter: 471,100, lr:(1.743e-06,)] l_pix: 2.2859e+00 
21-09-11 15:24:47.785 - INFO: [epoch:  1, iter: 471,200, lr:(1.732e-06,)] l_pix: 5.2460e-01 
21-09-11 15:26:15.733 - INFO: [epoch:  1, iter: 471,300, lr:(1.721e-06,)] l_pix: 2.0011e-01 
21-09-11 15:27:38.365 - INFO: [epoch:  1, iter: 471,400, lr:(1.709e-06,)] l_pix: 1.5423e+00 
21-09-11 15:28:53.059 - INFO: [epoch:  1, iter: 471,500, lr:(1.698e-06,)] l_pix: 1.8259e+00 
21-09-11 15:30:08.168 - INFO: [epoch:  1, iter: 471,600, lr:(1.687e-06,)] l_pix: 1.3739e+00 
21-09-11 15:31:22.997 - INFO: [epoch:  1, iter: 471,700, lr:(1.676e-06,)] l_pix: 2.3919e+00 
21-09-11 15:32:37.788 - INFO: [epoch:  1, iter: 471,800, lr:(1.665e-06,)] l_pix: 2.3682e+00 
21-09-11 15:33:52.391 - INFO: [epoch:  1, iter: 471,900, lr:(1.654e-06,)] l_pix: 4.0886e-01 
21-09-11 15:35:07.414 - INFO: [epoch:  1, iter: 472,000, lr:(1.643e-06,)] l_pix: 1.9948e+00 
21-09-11 15:36:22.205 - INFO: [epoch:  1, iter: 472,100, lr:(1.632e-06,)] l_pix: 1.4977e+00 
21-09-11 15:37:36.887 - INFO: [epoch:  1, iter: 472,200, lr:(1.621e-06,)] l_pix: 1.6651e+00 
21-09-11 15:38:51.773 - INFO: [epoch:  1, iter: 472,300, lr:(1.610e-06,)] l_pix: 2.2635e+00 
21-09-11 15:40:07.001 - INFO: [epoch:  1, iter: 472,400, lr:(1.599e-06,)] l_pix: 1.5736e+00 
21-09-11 15:41:21.876 - INFO: [epoch:  1, iter: 472,500, lr:(1.588e-06,)] l_pix: 1.5052e+00 
21-09-11 15:42:36.579 - INFO: [epoch:  1, iter: 472,600, lr:(1.577e-06,)] l_pix: 1.3735e+00 
21-09-11 15:43:51.044 - INFO: [epoch:  1, iter: 472,700, lr:(1.567e-06,)] l_pix: 2.0322e+00 
21-09-11 15:45:05.730 - INFO: [epoch:  1, iter: 472,800, lr:(1.556e-06,)] l_pix: 2.6141e+00 
21-09-11 15:46:21.006 - INFO: [epoch:  1, iter: 472,900, lr:(1.545e-06,)] l_pix: 2.9494e+00 
21-09-11 15:47:37.017 - INFO: [epoch:  1, iter: 473,000, lr:(1.535e-06,)] l_pix: 5.7024e-01 
21-09-11 15:48:54.498 - INFO: [epoch:  1, iter: 473,100, lr:(1.524e-06,)] l_pix: 5.3798e-01 
21-09-11 15:50:22.323 - INFO: [epoch:  1, iter: 473,200, lr:(1.514e-06,)] l_pix: 1.6692e+00 
21-09-11 15:51:49.658 - INFO: [epoch:  1, iter: 473,300, lr:(1.503e-06,)] l_pix: 2.4782e+00 
21-09-11 15:53:17.925 - INFO: [epoch:  1, iter: 473,400, lr:(1.493e-06,)] l_pix: 2.4659e+00 
21-09-11 15:54:46.284 - INFO: [epoch:  1, iter: 473,500, lr:(1.482e-06,)] l_pix: 2.0253e+00 
21-09-11 15:56:14.602 - INFO: [epoch:  1, iter: 473,600, lr:(1.472e-06,)] l_pix: 5.7911e-01 
21-09-11 15:57:42.719 - INFO: [epoch:  1, iter: 473,700, lr:(1.461e-06,)] l_pix: 1.4721e+00 
21-09-11 15:59:04.978 - INFO: [epoch:  1, iter: 473,800, lr:(1.451e-06,)] l_pix: 1.8174e+00 
21-09-11 16:00:19.944 - INFO: [epoch:  1, iter: 473,900, lr:(1.441e-06,)] l_pix: 1.1227e+00 
21-09-11 16:01:34.131 - INFO: [epoch:  1, iter: 474,000, lr:(1.431e-06,)] l_pix: 1.1985e+00 
21-09-11 16:02:48.522 - INFO: [epoch:  1, iter: 474,100, lr:(1.420e-06,)] l_pix: 1.1177e+00 
21-09-11 16:04:03.114 - INFO: [epoch:  1, iter: 474,200, lr:(1.410e-06,)] l_pix: 1.2483e+00 
21-09-11 16:05:18.189 - INFO: [epoch:  1, iter: 474,300, lr:(1.400e-06,)] l_pix: 1.3751e+00 
21-09-11 16:06:32.682 - INFO: [epoch:  1, iter: 474,400, lr:(1.390e-06,)] l_pix: 2.6788e-01 
21-09-11 16:07:47.391 - INFO: [epoch:  1, iter: 474,500, lr:(1.380e-06,)] l_pix: 2.6229e+00 
21-09-11 16:09:02.007 - INFO: [epoch:  1, iter: 474,600, lr:(1.370e-06,)] l_pix: 7.6533e-01 
21-09-11 16:10:16.870 - INFO: [epoch:  1, iter: 474,700, lr:(1.360e-06,)] l_pix: 1.2445e+00 
21-09-11 16:11:31.341 - INFO: [epoch:  1, iter: 474,800, lr:(1.350e-06,)] l_pix: 1.2233e+00 
21-09-11 16:12:45.819 - INFO: [epoch:  1, iter: 474,900, lr:(1.340e-06,)] l_pix: 6.0919e-01 
21-09-11 16:14:10.847 - INFO: [epoch:  1, iter: 475,000, lr:(1.330e-06,)] l_pix: 1.6754e+00 
21-09-11 16:15:29.797 - INFO: # Validation # PSNR: 2.9012e+01
21-09-11 16:15:29.797 - INFO: Saving models and training states.
21-09-11 16:16:58.382 - INFO: [epoch:  1, iter: 475,100, lr:(1.321e-06,)] l_pix: 1.7745e+00 
21-09-11 16:18:26.761 - INFO: [epoch:  1, iter: 475,200, lr:(1.311e-06,)] l_pix: 1.3216e+00 
21-09-11 16:19:50.727 - INFO: [epoch:  1, iter: 475,300, lr:(1.301e-06,)] l_pix: 7.4429e-01 
21-09-11 16:21:05.412 - INFO: [epoch:  1, iter: 475,400, lr:(1.291e-06,)] l_pix: 6.2281e-01 
21-09-11 16:22:19.910 - INFO: [epoch:  1, iter: 475,500, lr:(1.282e-06,)] l_pix: 5.0878e-01 
21-09-11 16:23:34.876 - INFO: [epoch:  1, iter: 475,600, lr:(1.272e-06,)] l_pix: 1.1883e+00 
21-09-11 16:24:50.470 - INFO: [epoch:  1, iter: 475,700, lr:(1.263e-06,)] l_pix: 8.8897e-01 
21-09-11 16:26:06.087 - INFO: [epoch:  1, iter: 475,800, lr:(1.253e-06,)] l_pix: 7.9448e-01 
21-09-11 16:27:21.647 - INFO: [epoch:  1, iter: 475,900, lr:(1.244e-06,)] l_pix: 6.9778e-01 
21-09-11 16:28:37.524 - INFO: [epoch:  1, iter: 476,000, lr:(1.234e-06,)] l_pix: 1.9143e+00 
21-09-11 16:29:52.860 - INFO: [epoch:  1, iter: 476,100, lr:(1.225e-06,)] l_pix: 2.6716e+00 
21-09-11 16:31:08.361 - INFO: [epoch:  1, iter: 476,200, lr:(1.215e-06,)] l_pix: 2.0991e+00 
21-09-11 16:32:23.233 - INFO: [epoch:  1, iter: 476,300, lr:(1.206e-06,)] l_pix: 2.0949e+00 
21-09-11 16:33:37.967 - INFO: [epoch:  1, iter: 476,400, lr:(1.197e-06,)] l_pix: 1.1419e+00 
21-09-11 16:34:52.634 - INFO: [epoch:  1, iter: 476,500, lr:(1.187e-06,)] l_pix: 3.0489e+00 
21-09-11 16:36:07.341 - INFO: [epoch:  1, iter: 476,600, lr:(1.178e-06,)] l_pix: 7.3047e-01 
21-09-11 16:37:21.741 - INFO: [epoch:  1, iter: 476,700, lr:(1.169e-06,)] l_pix: 1.2830e+00 
21-09-11 16:38:36.145 - INFO: [epoch:  1, iter: 476,800, lr:(1.160e-06,)] l_pix: 5.3616e-01 
21-09-11 16:39:50.688 - INFO: [epoch:  1, iter: 476,900, lr:(1.151e-06,)] l_pix: 1.8104e+00 
21-09-11 16:41:06.709 - INFO: [epoch:  1, iter: 477,000, lr:(1.142e-06,)] l_pix: 5.6055e-01 
21-09-11 16:42:20.759 - INFO: [epoch:  1, iter: 477,100, lr:(1.133e-06,)] l_pix: 1.9074e+00 
21-09-11 16:43:34.386 - INFO: [epoch:  1, iter: 477,200, lr:(1.124e-06,)] l_pix: 6.3483e-01 
21-09-11 16:44:48.233 - INFO: [epoch:  1, iter: 477,300, lr:(1.115e-06,)] l_pix: 3.7137e-01 
21-09-11 16:46:02.862 - INFO: [epoch:  1, iter: 477,400, lr:(1.106e-06,)] l_pix: 1.3836e+00 
21-09-11 16:47:17.210 - INFO: [epoch:  1, iter: 477,500, lr:(1.097e-06,)] l_pix: 2.2775e+00 
21-09-11 16:48:31.696 - INFO: [epoch:  1, iter: 477,600, lr:(1.088e-06,)] l_pix: 9.7350e-01 
21-09-11 16:49:46.332 - INFO: [epoch:  1, iter: 477,700, lr:(1.079e-06,)] l_pix: 6.9229e-01 
21-09-11 16:51:02.268 - INFO: [epoch:  1, iter: 477,800, lr:(1.071e-06,)] l_pix: 5.9327e-01 
21-09-11 16:52:18.114 - INFO: [epoch:  1, iter: 477,900, lr:(1.062e-06,)] l_pix: 2.4632e+00 
21-09-11 16:53:33.876 - INFO: [epoch:  1, iter: 478,000, lr:(1.053e-06,)] l_pix: 7.5459e-01 
21-09-11 16:54:49.710 - INFO: [epoch:  1, iter: 478,100, lr:(1.045e-06,)] l_pix: 9.8187e-01 
21-09-11 16:56:04.781 - INFO: [epoch:  1, iter: 478,200, lr:(1.036e-06,)] l_pix: 1.3984e+00 
21-09-11 16:57:19.656 - INFO: [epoch:  1, iter: 478,300, lr:(1.028e-06,)] l_pix: 9.5259e-01 
21-09-11 16:58:34.678 - INFO: [epoch:  1, iter: 478,400, lr:(1.019e-06,)] l_pix: 2.1040e+00 
21-09-11 16:59:49.138 - INFO: [epoch:  1, iter: 478,500, lr:(1.011e-06,)] l_pix: 1.6072e+00 
21-09-11 17:01:04.616 - INFO: [epoch:  1, iter: 478,600, lr:(1.002e-06,)] l_pix: 1.8146e+00 
21-09-11 17:02:18.487 - INFO: [epoch:  1, iter: 478,700, lr:(9.937e-07,)] l_pix: 1.1200e+00 
21-09-11 17:03:32.525 - INFO: [epoch:  1, iter: 478,800, lr:(9.853e-07,)] l_pix: 7.8965e-01 
21-09-11 17:04:46.417 - INFO: [epoch:  1, iter: 478,900, lr:(9.770e-07,)] l_pix: 8.1613e-01 
21-09-11 17:06:00.606 - INFO: [epoch:  1, iter: 479,000, lr:(9.687e-07,)] l_pix: 7.5892e-01 
21-09-11 17:07:14.847 - INFO: [epoch:  1, iter: 479,100, lr:(9.605e-07,)] l_pix: 1.7180e+00 
21-09-11 17:08:29.979 - INFO: [epoch:  1, iter: 479,200, lr:(9.523e-07,)] l_pix: 1.6461e+00 
21-09-11 17:09:45.108 - INFO: [epoch:  1, iter: 479,300, lr:(9.441e-07,)] l_pix: 7.6983e-01 
21-09-11 17:11:00.521 - INFO: [epoch:  1, iter: 479,400, lr:(9.360e-07,)] l_pix: 1.6819e-01 
21-09-11 17:12:14.744 - INFO: [epoch:  1, iter: 479,500, lr:(9.279e-07,)] l_pix: 2.2512e+00 
21-09-11 17:13:29.257 - INFO: [epoch:  1, iter: 479,600, lr:(9.199e-07,)] l_pix: 2.3821e+00 
21-09-11 17:14:43.706 - INFO: [epoch:  1, iter: 479,700, lr:(9.118e-07,)] l_pix: 2.7232e+00 
21-09-11 17:15:58.149 - INFO: [epoch:  1, iter: 479,800, lr:(9.039e-07,)] l_pix: 1.3052e+00 
21-09-11 17:17:12.499 - INFO: [epoch:  1, iter: 479,900, lr:(8.959e-07,)] l_pix: 2.3083e+00 
21-09-11 17:18:26.756 - INFO: [epoch:  1, iter: 480,000, lr:(8.881e-07,)] l_pix: 1.7043e+00 
21-09-11 17:19:45.268 - INFO: # Validation # PSNR: 2.8997e+01
21-09-11 17:19:45.269 - INFO: Saving models and training states.
21-09-11 17:21:01.219 - INFO: [epoch:  1, iter: 480,100, lr:(8.802e-07,)] l_pix: 1.5581e+00 
21-09-11 17:22:16.173 - INFO: [epoch:  1, iter: 480,200, lr:(8.724e-07,)] l_pix: 7.0171e-01 
21-09-11 17:23:30.617 - INFO: [epoch:  1, iter: 480,300, lr:(8.646e-07,)] l_pix: 2.3587e+00 
21-09-11 17:24:45.270 - INFO: [epoch:  1, iter: 480,400, lr:(8.569e-07,)] l_pix: 8.5977e-01 
21-09-11 17:26:00.093 - INFO: [epoch:  1, iter: 480,500, lr:(8.492e-07,)] l_pix: 7.0550e-01 
21-09-11 17:27:14.729 - INFO: [epoch:  1, iter: 480,600, lr:(8.415e-07,)] l_pix: 6.9972e-01 
21-09-11 17:28:29.475 - INFO: [epoch:  1, iter: 480,700, lr:(8.339e-07,)] l_pix: 1.7711e+00 
21-09-11 17:29:45.201 - INFO: [epoch:  1, iter: 480,800, lr:(8.263e-07,)] l_pix: 8.2570e-01 
21-09-11 17:31:01.169 - INFO: [epoch:  1, iter: 480,900, lr:(8.188e-07,)] l_pix: 1.0199e+00 
21-09-11 17:32:15.413 - INFO: [epoch:  1, iter: 481,000, lr:(8.113e-07,)] l_pix: 1.1797e+00 
21-09-11 17:33:30.780 - INFO: [epoch:  1, iter: 481,100, lr:(8.038e-07,)] l_pix: 3.6880e-01 
21-09-11 17:34:46.324 - INFO: [epoch:  1, iter: 481,200, lr:(7.964e-07,)] l_pix: 5.9177e-01 
21-09-11 17:36:01.719 - INFO: [epoch:  1, iter: 481,300, lr:(7.890e-07,)] l_pix: 1.7152e+00 
21-09-11 17:37:16.129 - INFO: [epoch:  1, iter: 481,400, lr:(7.817e-07,)] l_pix: 2.0342e+00 
21-09-11 17:38:31.030 - INFO: [epoch:  1, iter: 481,500, lr:(7.744e-07,)] l_pix: 8.8796e-01 
21-09-11 17:39:45.918 - INFO: [epoch:  1, iter: 481,600, lr:(7.671e-07,)] l_pix: 7.6172e-01 
21-09-11 17:41:00.904 - INFO: [epoch:  1, iter: 481,700, lr:(7.599e-07,)] l_pix: 5.9557e-01 
21-09-11 17:42:15.768 - INFO: [epoch:  1, iter: 481,800, lr:(7.527e-07,)] l_pix: 2.0924e+00 
21-09-11 17:43:30.532 - INFO: [epoch:  1, iter: 481,900, lr:(7.456e-07,)] l_pix: 6.3624e-01 
21-09-11 17:44:45.421 - INFO: [epoch:  1, iter: 482,000, lr:(7.385e-07,)] l_pix: 7.1534e-01 
21-09-11 17:46:00.559 - INFO: [epoch:  1, iter: 482,100, lr:(7.314e-07,)] l_pix: 1.7992e+00 
21-09-11 17:47:15.728 - INFO: [epoch:  1, iter: 482,200, lr:(7.244e-07,)] l_pix: 6.7752e-01 
21-09-11 17:48:30.460 - INFO: [epoch:  1, iter: 482,300, lr:(7.174e-07,)] l_pix: 1.0001e+00 
21-09-11 17:49:45.624 - INFO: [epoch:  1, iter: 482,400, lr:(7.104e-07,)] l_pix: 2.1085e+00 
21-09-11 17:51:01.217 - INFO: [epoch:  1, iter: 482,500, lr:(7.035e-07,)] l_pix: 2.6144e+00 
21-09-11 17:52:16.751 - INFO: [epoch:  1, iter: 482,600, lr:(6.967e-07,)] l_pix: 1.4199e+00 
21-09-11 17:53:31.739 - INFO: [epoch:  1, iter: 482,700, lr:(6.898e-07,)] l_pix: 7.3385e-01 
21-09-11 17:54:46.432 - INFO: [epoch:  1, iter: 482,800, lr:(6.830e-07,)] l_pix: 1.3417e+00 
21-09-11 17:56:01.125 - INFO: [epoch:  1, iter: 482,900, lr:(6.763e-07,)] l_pix: 2.8472e+00 
21-09-11 17:57:16.978 - INFO: [epoch:  1, iter: 483,000, lr:(6.696e-07,)] l_pix: 2.5200e+00 
21-09-11 17:58:32.579 - INFO: [epoch:  1, iter: 483,100, lr:(6.629e-07,)] l_pix: 1.3396e+00 
21-09-11 17:59:48.188 - INFO: [epoch:  1, iter: 483,200, lr:(6.563e-07,)] l_pix: 6.8612e-01 
21-09-11 18:01:03.102 - INFO: [epoch:  1, iter: 483,300, lr:(6.497e-07,)] l_pix: 5.0633e-03 
21-09-11 18:02:18.631 - INFO: [epoch:  1, iter: 483,400, lr:(6.431e-07,)] l_pix: 5.2798e-01 
21-09-11 18:03:34.660 - INFO: [epoch:  1, iter: 483,500, lr:(6.366e-07,)] l_pix: 1.0360e-01 
21-09-11 18:04:49.910 - INFO: [epoch:  1, iter: 483,600, lr:(6.301e-07,)] l_pix: 9.6635e-01 
21-09-11 18:06:04.678 - INFO: [epoch:  1, iter: 483,700, lr:(6.237e-07,)] l_pix: 1.1978e+00 
21-09-11 18:07:19.152 - INFO: [epoch:  1, iter: 483,800, lr:(6.173e-07,)] l_pix: 8.8112e-01 
21-09-11 18:08:33.600 - INFO: [epoch:  1, iter: 483,900, lr:(6.109e-07,)] l_pix: 8.1218e-01 
21-09-11 18:09:48.079 - INFO: [epoch:  1, iter: 484,000, lr:(6.046e-07,)] l_pix: 1.2614e+00 
21-09-11 18:11:05.410 - INFO: [epoch:  1, iter: 484,100, lr:(5.983e-07,)] l_pix: 1.0363e+00 
21-09-11 18:12:31.988 - INFO: [epoch:  1, iter: 484,200, lr:(5.921e-07,)] l_pix: 3.3591e+00 
21-09-11 18:13:55.195 - INFO: [epoch:  1, iter: 484,300, lr:(5.859e-07,)] l_pix: 1.5299e+00 
21-09-11 18:15:10.042 - INFO: [epoch:  1, iter: 484,400, lr:(5.797e-07,)] l_pix: 8.1734e-01 
21-09-11 18:16:24.920 - INFO: [epoch:  1, iter: 484,500, lr:(5.736e-07,)] l_pix: 7.2624e-01 
21-09-11 18:17:39.988 - INFO: [epoch:  1, iter: 484,600, lr:(5.675e-07,)] l_pix: 2.2428e+00 
21-09-11 18:18:55.106 - INFO: [epoch:  1, iter: 484,700, lr:(5.614e-07,)] l_pix: 2.0751e+00 
21-09-11 18:20:09.967 - INFO: [epoch:  1, iter: 484,800, lr:(5.554e-07,)] l_pix: 7.7048e-01 
21-09-11 18:21:24.635 - INFO: [epoch:  1, iter: 484,900, lr:(5.495e-07,)] l_pix: 7.3580e-01 
21-09-11 18:22:39.452 - INFO: [epoch:  1, iter: 485,000, lr:(5.435e-07,)] l_pix: 8.1905e-01 
21-09-11 18:23:58.968 - INFO: # Validation # PSNR: 2.9007e+01
21-09-11 18:23:58.968 - INFO: Saving models and training states.
21-09-11 18:25:14.901 - INFO: [epoch:  1, iter: 485,100, lr:(5.376e-07,)] l_pix: 8.0124e-01 
21-09-11 18:26:29.505 - INFO: [epoch:  1, iter: 485,200, lr:(5.318e-07,)] l_pix: 1.4903e+00 
21-09-11 18:27:44.154 - INFO: [epoch:  1, iter: 485,300, lr:(5.260e-07,)] l_pix: 3.2979e+00 
21-09-11 18:28:59.125 - INFO: [epoch:  1, iter: 485,400, lr:(5.202e-07,)] l_pix: 1.3162e+00 
21-09-11 18:30:14.128 - INFO: [epoch:  1, iter: 485,500, lr:(5.145e-07,)] l_pix: 2.4175e+00 
21-09-11 18:31:28.901 - INFO: [epoch:  1, iter: 485,600, lr:(5.088e-07,)] l_pix: 1.0023e+00 
21-09-11 18:32:43.681 - INFO: [epoch:  1, iter: 485,700, lr:(5.031e-07,)] l_pix: 1.0239e+00 
21-09-11 18:33:58.259 - INFO: [epoch:  1, iter: 485,800, lr:(4.975e-07,)] l_pix: 1.2043e+00 
21-09-11 18:35:12.911 - INFO: [epoch:  1, iter: 485,900, lr:(4.919e-07,)] l_pix: 3.1479e-01 
21-09-11 18:36:27.127 - INFO: [epoch:  1, iter: 486,000, lr:(4.864e-07,)] l_pix: 5.3684e-01 
21-09-11 18:37:41.545 - INFO: [epoch:  1, iter: 486,100, lr:(4.809e-07,)] l_pix: 7.5444e-01 
21-09-11 18:38:56.330 - INFO: [epoch:  1, iter: 486,200, lr:(4.754e-07,)] l_pix: 1.1104e+00 
21-09-11 18:40:10.980 - INFO: [epoch:  1, iter: 486,300, lr:(4.700e-07,)] l_pix: 7.8206e-01 
21-09-11 18:41:25.356 - INFO: [epoch:  1, iter: 486,400, lr:(4.646e-07,)] l_pix: 2.7337e+00 
21-09-11 18:42:40.260 - INFO: [epoch:  1, iter: 486,500, lr:(4.593e-07,)] l_pix: 2.8478e+00 
21-09-11 18:43:55.112 - INFO: [epoch:  1, iter: 486,600, lr:(4.540e-07,)] l_pix: 1.4955e+00 
21-09-11 18:45:09.736 - INFO: [epoch:  1, iter: 486,700, lr:(4.487e-07,)] l_pix: 1.6857e+00 
21-09-11 18:46:24.089 - INFO: [epoch:  1, iter: 486,800, lr:(4.435e-07,)] l_pix: 8.3346e-01 
21-09-11 18:47:38.641 - INFO: [epoch:  1, iter: 486,900, lr:(4.383e-07,)] l_pix: 1.9001e+00 
21-09-11 18:48:53.185 - INFO: [epoch:  1, iter: 487,000, lr:(4.332e-07,)] l_pix: 1.0181e+00 
21-09-11 18:50:07.826 - INFO: [epoch:  1, iter: 487,100, lr:(4.281e-07,)] l_pix: 1.8819e+00 
21-09-11 18:51:22.210 - INFO: [epoch:  1, iter: 487,200, lr:(4.230e-07,)] l_pix: 7.9821e-01 
21-09-11 18:52:36.943 - INFO: [epoch:  1, iter: 487,300, lr:(4.180e-07,)] l_pix: 1.2517e+00 
21-09-11 18:53:52.256 - INFO: [epoch:  1, iter: 487,400, lr:(4.130e-07,)] l_pix: 6.9032e-01 
21-09-11 18:55:08.184 - INFO: [epoch:  1, iter: 487,500, lr:(4.081e-07,)] l_pix: 2.0752e+00 
21-09-11 18:56:23.684 - INFO: [epoch:  1, iter: 487,600, lr:(4.032e-07,)] l_pix: 2.4469e+00 
21-09-11 18:57:39.376 - INFO: [epoch:  1, iter: 487,700, lr:(3.983e-07,)] l_pix: 4.8483e-01 
21-09-11 18:58:55.334 - INFO: [epoch:  1, iter: 487,800, lr:(3.935e-07,)] l_pix: 4.9299e-01 
21-09-11 19:00:11.436 - INFO: [epoch:  1, iter: 487,900, lr:(3.887e-07,)] l_pix: 1.2059e+00 
21-09-11 19:01:26.907 - INFO: [epoch:  1, iter: 488,000, lr:(3.839e-07,)] l_pix: 2.9086e+00 
21-09-11 19:02:41.834 - INFO: [epoch:  1, iter: 488,100, lr:(3.792e-07,)] l_pix: 2.4134e+00 
21-09-11 19:03:56.113 - INFO: [epoch:  1, iter: 488,200, lr:(3.745e-07,)] l_pix: 1.9026e+00 
21-09-11 19:05:10.477 - INFO: [epoch:  1, iter: 488,300, lr:(3.699e-07,)] l_pix: 9.3574e-01 
21-09-11 19:06:24.335 - INFO: [epoch:  1, iter: 488,400, lr:(3.653e-07,)] l_pix: 1.0272e+00 
21-09-11 19:07:38.568 - INFO: [epoch:  1, iter: 488,500, lr:(3.608e-07,)] l_pix: 2.0946e+00 
21-09-11 19:08:52.815 - INFO: [epoch:  1, iter: 488,600, lr:(3.562e-07,)] l_pix: 1.9086e+00 
21-09-11 19:10:07.310 - INFO: [epoch:  1, iter: 488,700, lr:(3.518e-07,)] l_pix: 6.4463e-01 
21-09-11 19:11:21.278 - INFO: [epoch:  1, iter: 488,800, lr:(3.473e-07,)] l_pix: 7.1149e-01 
21-09-11 19:12:35.877 - INFO: [epoch:  1, iter: 488,900, lr:(3.429e-07,)] l_pix: 2.1545e+00 
21-09-11 19:13:51.481 - INFO: [epoch:  1, iter: 489,000, lr:(3.386e-07,)] l_pix: 8.2528e-01 
21-09-11 19:15:08.000 - INFO: [epoch:  1, iter: 489,100, lr:(3.343e-07,)] l_pix: 8.0261e-01 
21-09-11 19:16:24.053 - INFO: [epoch:  1, iter: 489,200, lr:(3.300e-07,)] l_pix: 2.7654e+00 
21-09-11 19:17:40.083 - INFO: [epoch:  1, iter: 489,300, lr:(3.258e-07,)] l_pix: 6.2163e-01 
21-09-11 19:19:03.560 - INFO: [epoch:  1, iter: 489,400, lr:(3.216e-07,)] l_pix: 2.8957e+00 
21-09-11 19:20:32.114 - INFO: [epoch:  1, iter: 489,500, lr:(3.174e-07,)] l_pix: 2.2405e+00 
21-09-11 19:22:00.387 - INFO: [epoch:  1, iter: 489,600, lr:(3.133e-07,)] l_pix: 1.2919e+00 
21-09-11 19:23:28.698 - INFO: [epoch:  1, iter: 489,700, lr:(3.092e-07,)] l_pix: 4.4929e-01 
21-09-11 19:24:57.090 - INFO: [epoch:  1, iter: 489,800, lr:(3.052e-07,)] l_pix: 7.6386e-01 
21-09-11 19:26:25.674 - INFO: [epoch:  1, iter: 489,900, lr:(3.012e-07,)] l_pix: 1.0282e+00 
21-09-11 19:27:53.834 - INFO: [epoch:  1, iter: 490,000, lr:(2.972e-07,)] l_pix: 7.3066e-01 
21-09-11 19:29:11.592 - INFO: # Validation # PSNR: 2.9023e+01
21-09-11 19:29:11.593 - INFO: Saving models and training states.
21-09-11 19:30:39.230 - INFO: [epoch:  1, iter: 490,100, lr:(2.933e-07,)] l_pix: 1.4178e+00 
21-09-11 19:32:05.735 - INFO: [epoch:  1, iter: 490,200, lr:(2.894e-07,)] l_pix: 4.8463e-01 
21-09-11 19:33:32.086 - INFO: [epoch:  1, iter: 490,300, lr:(2.855e-07,)] l_pix: 2.5026e+00 
21-09-11 19:34:59.163 - INFO: [epoch:  1, iter: 490,400, lr:(2.817e-07,)] l_pix: 6.9918e-01 
21-09-11 19:36:27.010 - INFO: [epoch:  1, iter: 490,500, lr:(2.780e-07,)] l_pix: 1.5479e+00 
21-09-11 19:37:54.765 - INFO: [epoch:  1, iter: 490,600, lr:(2.742e-07,)] l_pix: 4.6335e-01 
21-09-11 19:39:22.497 - INFO: [epoch:  1, iter: 490,700, lr:(2.706e-07,)] l_pix: 1.4738e+00 
21-09-11 19:40:50.297 - INFO: [epoch:  1, iter: 490,800, lr:(2.669e-07,)] l_pix: 8.0018e-01 
21-09-11 19:42:18.018 - INFO: [epoch:  1, iter: 490,900, lr:(2.633e-07,)] l_pix: 6.5726e-01 
21-09-11 19:43:45.363 - INFO: [epoch:  1, iter: 491,000, lr:(2.597e-07,)] l_pix: 8.1801e-01 
21-09-11 19:45:12.394 - INFO: [epoch:  1, iter: 491,100, lr:(2.562e-07,)] l_pix: 2.0435e+00 
21-09-11 19:46:33.749 - INFO: [epoch:  1, iter: 491,200, lr:(2.527e-07,)] l_pix: 2.9716e+00 
21-09-11 19:47:48.545 - INFO: [epoch:  1, iter: 491,300, lr:(2.493e-07,)] l_pix: 2.9749e+00 
21-09-11 19:49:03.196 - INFO: [epoch:  1, iter: 491,400, lr:(2.458e-07,)] l_pix: 3.2512e+00 
21-09-11 19:50:18.591 - INFO: [epoch:  1, iter: 491,500, lr:(2.425e-07,)] l_pix: 6.9696e-01 
21-09-11 19:51:33.799 - INFO: [epoch:  1, iter: 491,600, lr:(2.391e-07,)] l_pix: 6.3327e-01 
21-09-11 19:52:49.665 - INFO: [epoch:  1, iter: 491,700, lr:(2.359e-07,)] l_pix: 5.3140e-01 
21-09-11 19:54:05.362 - INFO: [epoch:  1, iter: 491,800, lr:(2.326e-07,)] l_pix: 7.0289e-01 
21-09-11 19:55:21.128 - INFO: [epoch:  1, iter: 491,900, lr:(2.294e-07,)] l_pix: 2.0223e+00 
21-09-11 19:56:36.746 - INFO: [epoch:  1, iter: 492,000, lr:(2.262e-07,)] l_pix: 2.2152e+00 
21-09-11 19:57:52.512 - INFO: [epoch:  1, iter: 492,100, lr:(2.231e-07,)] l_pix: 2.5102e-01 
21-09-11 19:59:07.680 - INFO: [epoch:  1, iter: 492,200, lr:(2.200e-07,)] l_pix: 4.9049e-01 
21-09-11 20:00:23.545 - INFO: [epoch:  1, iter: 492,300, lr:(2.169e-07,)] l_pix: 4.4932e-01 
21-09-11 20:01:39.691 - INFO: [epoch:  1, iter: 492,400, lr:(2.139e-07,)] l_pix: 2.8399e+00 
21-09-11 20:02:58.531 - INFO: [epoch:  1, iter: 492,500, lr:(2.109e-07,)] l_pix: 4.8353e-01 
21-09-11 20:04:14.250 - INFO: [epoch:  1, iter: 492,600, lr:(2.080e-07,)] l_pix: 1.3391e+00 
21-09-11 20:05:30.312 - INFO: [epoch:  1, iter: 492,700, lr:(2.051e-07,)] l_pix: 1.2325e+00 
21-09-11 20:06:46.019 - INFO: [epoch:  1, iter: 492,800, lr:(2.022e-07,)] l_pix: 1.2643e+00 
21-09-11 20:08:02.014 - INFO: [epoch:  1, iter: 492,900, lr:(1.994e-07,)] l_pix: 2.3419e+00 
21-09-11 20:09:16.532 - INFO: [epoch:  1, iter: 493,000, lr:(1.966e-07,)] l_pix: 8.4717e-01 
21-09-11 20:10:30.999 - INFO: [epoch:  1, iter: 493,100, lr:(1.939e-07,)] l_pix: 1.1347e+00 
21-09-11 20:11:45.071 - INFO: [epoch:  1, iter: 493,200, lr:(1.912e-07,)] l_pix: 1.2834e+00 
21-09-11 20:12:59.562 - INFO: [epoch:  1, iter: 493,300, lr:(1.885e-07,)] l_pix: 1.4078e+00 
21-09-11 20:14:13.770 - INFO: [epoch:  1, iter: 493,400, lr:(1.859e-07,)] l_pix: 1.0462e+00 
21-09-11 20:15:28.812 - INFO: [epoch:  1, iter: 493,500, lr:(1.833e-07,)] l_pix: 5.8725e-01 
21-09-11 20:16:43.424 - INFO: [epoch:  1, iter: 493,600, lr:(1.808e-07,)] l_pix: 4.8484e-01 
21-09-11 20:17:58.224 - INFO: [epoch:  1, iter: 493,700, lr:(1.783e-07,)] l_pix: 3.4379e-01 
21-09-11 20:19:12.750 - INFO: [epoch:  1, iter: 493,800, lr:(1.758e-07,)] l_pix: 7.9451e-01 
21-09-11 20:20:33.202 - INFO: [epoch:  1, iter: 493,900, lr:(1.734e-07,)] l_pix: 6.1936e-01 
21-09-11 20:22:01.591 - INFO: [epoch:  1, iter: 494,000, lr:(1.710e-07,)] l_pix: 1.3916e+00 
21-09-11 20:23:30.030 - INFO: [epoch:  1, iter: 494,100, lr:(1.686e-07,)] l_pix: 4.2724e-01 
21-09-11 20:24:58.746 - INFO: [epoch:  1, iter: 494,200, lr:(1.663e-07,)] l_pix: 8.0590e-01 
21-09-11 20:26:26.853 - INFO: [epoch:  1, iter: 494,300, lr:(1.641e-07,)] l_pix: 8.3653e-01 
21-09-11 20:27:42.150 - INFO: [epoch:  1, iter: 494,400, lr:(1.618e-07,)] l_pix: 4.3939e-01 
21-09-11 20:28:57.132 - INFO: [epoch:  1, iter: 494,500, lr:(1.597e-07,)] l_pix: 1.1238e+00 
21-09-11 20:30:11.913 - INFO: [epoch:  1, iter: 494,600, lr:(1.575e-07,)] l_pix: 5.5274e-01 
21-09-11 20:31:26.556 - INFO: [epoch:  1, iter: 494,700, lr:(1.554e-07,)] l_pix: 2.1491e+00 
21-09-11 20:32:41.094 - INFO: [epoch:  1, iter: 494,800, lr:(1.533e-07,)] l_pix: 1.5374e+00 
21-09-11 20:33:55.979 - INFO: [epoch:  1, iter: 494,900, lr:(1.513e-07,)] l_pix: 3.4445e+00 
21-09-11 20:35:11.002 - INFO: [epoch:  1, iter: 495,000, lr:(1.493e-07,)] l_pix: 1.2546e+00 
21-09-11 20:36:29.533 - INFO: # Validation # PSNR: 2.9016e+01
21-09-11 20:36:29.533 - INFO: Saving models and training states.
21-09-11 20:37:45.816 - INFO: [epoch:  1, iter: 495,100, lr:(1.473e-07,)] l_pix: 1.0748e+00 
21-09-11 20:39:01.347 - INFO: [epoch:  1, iter: 495,200, lr:(1.454e-07,)] l_pix: 1.3671e+00 
21-09-11 20:40:16.483 - INFO: [epoch:  1, iter: 495,300, lr:(1.436e-07,)] l_pix: 1.9968e+00 
21-09-11 20:41:31.708 - INFO: [epoch:  1, iter: 495,400, lr:(1.417e-07,)] l_pix: 8.3271e-01 
21-09-11 20:42:46.734 - INFO: [epoch:  1, iter: 495,500, lr:(1.399e-07,)] l_pix: 1.9621e+00 
21-09-11 20:44:01.613 - INFO: [epoch:  1, iter: 495,600, lr:(1.382e-07,)] l_pix: 7.1846e-01 
21-09-11 20:45:16.983 - INFO: [epoch:  1, iter: 495,700, lr:(1.365e-07,)] l_pix: 4.9299e-01 
21-09-11 20:46:32.010 - INFO: [epoch:  1, iter: 495,800, lr:(1.348e-07,)] l_pix: 8.9437e-01 
21-09-11 20:47:47.198 - INFO: [epoch:  1, iter: 495,900, lr:(1.331e-07,)] l_pix: 7.7457e-01 
21-09-11 20:49:03.072 - INFO: [epoch:  1, iter: 496,000, lr:(1.315e-07,)] l_pix: 4.9303e-01 
21-09-11 20:50:19.273 - INFO: [epoch:  1, iter: 496,100, lr:(1.300e-07,)] l_pix: 2.4738e-01 
21-09-11 20:51:34.915 - INFO: [epoch:  1, iter: 496,200, lr:(1.285e-07,)] l_pix: 7.0644e-01 
21-09-11 20:52:50.707 - INFO: [epoch:  1, iter: 496,300, lr:(1.270e-07,)] l_pix: 1.7008e+00 
21-09-11 20:54:05.664 - INFO: [epoch:  1, iter: 496,400, lr:(1.256e-07,)] l_pix: 2.3909e+00 
21-09-11 20:55:21.664 - INFO: [epoch:  1, iter: 496,500, lr:(1.242e-07,)] l_pix: 7.2903e-01 
21-09-11 20:56:37.318 - INFO: [epoch:  1, iter: 496,600, lr:(1.228e-07,)] l_pix: 1.1885e+00 
21-09-11 20:57:53.133 - INFO: [epoch:  1, iter: 496,700, lr:(1.215e-07,)] l_pix: 1.0902e+00 
21-09-11 20:59:08.718 - INFO: [epoch:  1, iter: 496,800, lr:(1.202e-07,)] l_pix: 1.4097e+00 
21-09-11 21:00:24.256 - INFO: [epoch:  1, iter: 496,900, lr:(1.189e-07,)] l_pix: 1.9207e+00 
21-09-11 21:01:39.086 - INFO: [epoch:  1, iter: 497,000, lr:(1.177e-07,)] l_pix: 2.3890e+00 
21-09-11 21:02:53.651 - INFO: [epoch:  1, iter: 497,100, lr:(1.166e-07,)] l_pix: 1.5416e+00 
21-09-11 21:04:08.011 - INFO: [epoch:  1, iter: 497,200, lr:(1.155e-07,)] l_pix: 1.2435e+00 
21-09-11 21:05:22.749 - INFO: [epoch:  1, iter: 497,300, lr:(1.144e-07,)] l_pix: 7.0600e-01 
21-09-11 21:06:37.521 - INFO: [epoch:  1, iter: 497,400, lr:(1.133e-07,)] l_pix: 2.6131e-01 
21-09-11 21:07:52.245 - INFO: [epoch:  1, iter: 497,500, lr:(1.123e-07,)] l_pix: 1.2249e+00 
21-09-11 21:09:06.754 - INFO: [epoch:  1, iter: 497,600, lr:(1.114e-07,)] l_pix: 9.6279e-01 
21-09-11 21:10:21.381 - INFO: [epoch:  1, iter: 497,700, lr:(1.104e-07,)] l_pix: 6.9182e-01 
21-09-11 21:11:36.054 - INFO: [epoch:  1, iter: 497,800, lr:(1.095e-07,)] l_pix: 1.4799e+00 
21-09-11 21:12:50.829 - INFO: [epoch:  1, iter: 497,900, lr:(1.087e-07,)] l_pix: 1.3048e+00 
21-09-11 21:14:05.409 - INFO: [epoch:  1, iter: 498,000, lr:(1.079e-07,)] l_pix: 8.2012e-01 
21-09-11 21:15:19.854 - INFO: [epoch:  1, iter: 498,100, lr:(1.071e-07,)] l_pix: 1.6676e+00 
21-09-11 21:16:34.551 - INFO: [epoch:  1, iter: 498,200, lr:(1.064e-07,)] l_pix: 1.5350e+00 
21-09-11 21:17:49.242 - INFO: [epoch:  1, iter: 498,300, lr:(1.057e-07,)] l_pix: 1.8677e+00 
21-09-11 21:19:11.616 - INFO: [epoch:  1, iter: 498,400, lr:(1.050e-07,)] l_pix: 2.4102e+00 
21-09-11 21:20:39.363 - INFO: [epoch:  1, iter: 498,500, lr:(1.044e-07,)] l_pix: 8.8683e-01 
21-09-11 21:22:06.869 - INFO: [epoch:  1, iter: 498,600, lr:(1.039e-07,)] l_pix: 1.1288e+00 
21-09-11 21:23:34.255 - INFO: [epoch:  1, iter: 498,700, lr:(1.033e-07,)] l_pix: 1.3087e+00 
21-09-11 21:24:50.069 - INFO: [epoch:  1, iter: 498,800, lr:(1.028e-07,)] l_pix: 1.8528e+00 
21-09-11 21:26:04.247 - INFO: [epoch:  1, iter: 498,900, lr:(1.024e-07,)] l_pix: 3.5203e-01 
21-09-11 21:27:18.940 - INFO: [epoch:  1, iter: 499,000, lr:(1.020e-07,)] l_pix: 2.2700e+00 
21-09-11 21:28:33.634 - INFO: [epoch:  1, iter: 499,100, lr:(1.016e-07,)] l_pix: 2.2438e+00 
21-09-11 21:29:48.202 - INFO: [epoch:  1, iter: 499,200, lr:(1.013e-07,)] l_pix: 1.2046e+00 
21-09-11 21:31:03.083 - INFO: [epoch:  1, iter: 499,300, lr:(1.010e-07,)] l_pix: 1.2209e+00 
21-09-11 21:32:18.824 - INFO: [epoch:  1, iter: 499,400, lr:(1.007e-07,)] l_pix: 1.4356e+00 
21-09-11 21:33:34.496 - INFO: [epoch:  1, iter: 499,500, lr:(1.005e-07,)] l_pix: 2.0064e+00 
21-09-11 21:34:50.513 - INFO: [epoch:  1, iter: 499,600, lr:(1.003e-07,)] l_pix: 1.3995e+00 
21-09-11 21:36:06.089 - INFO: [epoch:  1, iter: 499,700, lr:(1.002e-07,)] l_pix: 1.1032e+00 
21-09-11 21:37:20.721 - INFO: [epoch:  1, iter: 499,800, lr:(1.001e-07,)] l_pix: 1.6258e+00 
21-09-11 21:38:35.191 - INFO: [epoch:  1, iter: 499,900, lr:(1.000e-07,)] l_pix: 1.5168e+00 
21-09-11 21:39:49.967 - INFO: [epoch:  1, iter: 500,000, lr:(1.000e-07,)] l_pix: 8.7386e-01 
21-09-11 21:41:08.340 - INFO: # Validation # PSNR: 2.9005e+01
21-09-11 21:41:08.340 - INFO: Saving models and training states.
21-09-11 21:41:11.091 - INFO: Saving the final model.
21-09-11 21:41:11.650 - INFO: End of training.
