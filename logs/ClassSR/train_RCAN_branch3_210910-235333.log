21-09-10 23:53:33.584 - INFO:   name: RCAN_branch3
  use_tb_logger: True
  model: sr
  distortion: sr
  scale: 4
  gpu_ids: [0]
  network_G:[
    which_model_G: RCAN
    n_resblocks: 20
    n_feats: 64
    n_resgroups: 10
    res_scale: 1
    n_colors: 3
    rgb_range: 255
    scale: 4
    reduction: 16
  ]
  datasets:[
    train:[
      name: DIV2K
      mode: LQGT_rcan
      dataroot_GT: E:\dataset\div2k\class\DIV2k_scale_sub_psnr_GT_class3
      dataroot_LQ: E:\dataset\div2k\class\DIV2k_scale_sub_psnr_LR_class3
      use_shuffle: True
      n_workers: 6
      batch_size: 16
      GT_size: 128
      use_flip: True
      use_rot: True
      color: RGB
      phase: train
      scale: 4
      data_type: img
    ]
    val:[
      name: Set5
      mode: LQGT_rcan
      dataroot_GT: E:\dataset\div2k\Set5_valid_sub\Set5_valid_sub\GT
      dataroot_LQ: E:\dataset\div2k\Set5_valid_sub\Set5_valid_sub\LR
      phase: val
      scale: 4
      data_type: img
    ]
  ]
  path:[
    pretrain_model_G: E:\paddle_paper\ClassSR_paddle-develop\experiments\RCAN_branch3\models\165000_G.pth
    strict_load: True
    resume_state: E:\paddle_paper\ClassSR_paddle-develop\experiments\RCAN_branch3\training_state\165000.state
    root: E:\paddle_paper\ClassSR_paddle-develop
    experiments_root: E:\paddle_paper\ClassSR_paddle-develop\experiments\RCAN_branch3
    models: E:\paddle_paper\ClassSR_paddle-develop\experiments\RCAN_branch3\models
    training_state: E:\paddle_paper\ClassSR_paddle-develop\experiments\RCAN_branch3\training_state
    log: E:\paddle_paper\ClassSR_paddle-develop\experiments\RCAN_branch3
    val_images: E:\paddle_paper\ClassSR_paddle-develop\experiments\RCAN_branch3\val_images
  ]
  train:[
    lr_G: 0.0002
    lr_scheme: CosineAnnealingLR_Restart
    beta1: 0.9
    beta2: 0.99
    niter: 500000
    warmup_iter: -1
    T_period: [500000]
    restarts: [500000]
    restart_weights: [1]
    eta_min: 1e-07
    lr_gamma: 0.5
    clear_state: 1000000
    pixel_criterion: l1
    pixel_weight: 1.0
    manual_seed: 9990
    val_freq: 5000
  ]
  logger:[
    print_freq: 100
    save_checkpoint_freq: 5000
  ]
  is_train: True
  dist: False

21-09-10 23:53:33.984 - INFO: Random seed: 9990
21-09-10 23:53:37.919 - INFO: Dataset [LQGTDataset_rcan - DIV2K] is created.
21-09-10 23:53:37.947 - INFO: Number of train images: 531,335, iters: 33,209
21-09-10 23:53:37.947 - INFO: Total epochs needed: 16 for iters 500,000
21-09-10 23:53:37.950 - INFO: Dataset [LQGTDataset_rcan - Set5] is created.
21-09-10 23:53:37.950 - INFO: Number of val images in [Set5]: 252
21-09-10 23:53:42.532 - INFO: Network G structure: RCAN, with parameters: 15,592,379
21-09-10 23:53:42.533 - INFO: RCAN(
  (sub_mean): MeanShift(3, 3, kernel_size=[1, 1], data_format=NCHW)
  (add_mean): MeanShift(3, 3, kernel_size=[1, 1], data_format=NCHW)
  (head): Sequential(
    (0): Conv2D(3, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
  )
  (body): Sequential(
    (0): ResidualGroup(
      (body): Sequential(
        (0): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (1): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (2): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (3): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (4): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (5): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (6): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (7): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (8): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (9): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (10): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (11): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (12): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (13): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (14): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (15): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (16): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (17): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (18): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (19): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (20): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
      )
    )
    (1): ResidualGroup(
      (body): Sequential(
        (0): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (1): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (2): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (3): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (4): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (5): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (6): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (7): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (8): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (9): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (10): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (11): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (12): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (13): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (14): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (15): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (16): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (17): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (18): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (19): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (20): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
      )
    )
    (2): ResidualGroup(
      (body): Sequential(
        (0): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (1): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (2): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (3): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (4): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (5): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (6): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (7): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (8): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (9): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (10): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (11): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (12): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (13): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (14): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (15): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (16): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (17): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (18): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (19): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (20): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
      )
    )
    (3): ResidualGroup(
      (body): Sequential(
        (0): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (1): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (2): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (3): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (4): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (5): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (6): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (7): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (8): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (9): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (10): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (11): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (12): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (13): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (14): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (15): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (16): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (17): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (18): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (19): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (20): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
      )
    )
    (4): ResidualGroup(
      (body): Sequential(
        (0): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (1): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (2): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (3): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (4): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (5): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (6): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (7): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (8): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (9): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (10): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (11): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (12): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (13): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (14): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (15): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (16): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (17): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (18): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (19): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (20): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
      )
    )
    (5): ResidualGroup(
      (body): Sequential(
        (0): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (1): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (2): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (3): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (4): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (5): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (6): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (7): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (8): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (9): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (10): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (11): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (12): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (13): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (14): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (15): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (16): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (17): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (18): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (19): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (20): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
      )
    )
    (6): ResidualGroup(
      (body): Sequential(
        (0): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (1): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (2): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (3): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (4): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (5): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (6): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (7): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (8): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (9): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (10): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (11): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (12): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (13): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (14): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (15): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (16): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (17): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (18): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (19): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (20): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
      )
    )
    (7): ResidualGroup(
      (body): Sequential(
        (0): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (1): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (2): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (3): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (4): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (5): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (6): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (7): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (8): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (9): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (10): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (11): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (12): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (13): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (14): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (15): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (16): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (17): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (18): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (19): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (20): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
      )
    )
    (8): ResidualGroup(
      (body): Sequential(
        (0): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (1): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (2): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (3): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (4): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (5): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (6): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (7): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (8): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (9): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (10): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (11): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (12): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (13): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (14): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (15): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (16): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (17): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (18): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (19): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (20): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
      )
    )
    (9): ResidualGroup(
      (body): Sequential(
        (0): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (1): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (2): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (3): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (4): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (5): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (6): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (7): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (8): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (9): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (10): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (11): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (12): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (13): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (14): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (15): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (16): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (17): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (18): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (19): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (20): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
      )
    )
    (10): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2D(64, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
      (1): PixelShuffle(upscale_factor=2)
      (2): Conv2D(64, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
      (3): PixelShuffle(upscale_factor=2)
    )
    (1): Conv2D(64, 3, kernel_size=[3, 3], padding=1, data_format=NCHW)
  )
)
21-09-10 23:53:42.567 - INFO: Loading model for G [E:\paddle_paper\ClassSR_paddle-develop\experiments\RCAN_branch3\models\165000_G.pth] ...
21-09-10 23:53:43.170 - INFO: Model [SRModel] is created.
21-09-10 23:53:43.170 - INFO: Resuming training from epoch: 1, iter: 165000.
21-09-10 23:53:43.170 - INFO: Start training from epoch: 1, iter: 165000
21-09-10 23:55:31.159 - INFO: [epoch:  1, iter: 165,100, lr:(1.509e-04,)] l_pix: 1.1160e+01 
21-09-10 23:57:16.255 - INFO: [epoch:  1, iter: 165,200, lr:(1.508e-04,)] l_pix: 1.0938e+01 
21-09-10 23:59:01.311 - INFO: [epoch:  1, iter: 165,300, lr:(1.508e-04,)] l_pix: 1.3144e+01 
21-09-11 00:00:46.000 - INFO: [epoch:  1, iter: 165,400, lr:(1.507e-04,)] l_pix: 1.2097e+01 
21-09-11 00:02:30.681 - INFO: [epoch:  1, iter: 165,500, lr:(1.507e-04,)] l_pix: 1.1566e+01 
21-09-11 00:04:15.810 - INFO: [epoch:  1, iter: 165,600, lr:(1.506e-04,)] l_pix: 1.1575e+01 
21-09-11 00:06:00.809 - INFO: [epoch:  1, iter: 165,700, lr:(1.505e-04,)] l_pix: 1.1540e+01 
21-09-11 00:07:45.583 - INFO: [epoch:  1, iter: 165,800, lr:(1.505e-04,)] l_pix: 1.0997e+01 
21-09-11 00:09:30.530 - INFO: [epoch:  1, iter: 165,900, lr:(1.504e-04,)] l_pix: 1.3336e+01 
21-09-11 00:11:15.483 - INFO: [epoch:  1, iter: 166,000, lr:(1.504e-04,)] l_pix: 1.2898e+01 
21-09-11 00:13:00.402 - INFO: [epoch:  1, iter: 166,100, lr:(1.503e-04,)] l_pix: 1.0731e+01 
21-09-11 00:14:45.121 - INFO: [epoch:  1, iter: 166,200, lr:(1.503e-04,)] l_pix: 1.2167e+01 
21-09-11 00:16:29.736 - INFO: [epoch:  1, iter: 166,300, lr:(1.502e-04,)] l_pix: 1.1585e+01 
21-09-11 00:18:14.226 - INFO: [epoch:  1, iter: 166,400, lr:(1.502e-04,)] l_pix: 1.1194e+01 
21-09-11 00:19:59.155 - INFO: [epoch:  1, iter: 166,500, lr:(1.501e-04,)] l_pix: 1.2625e+01 
21-09-11 00:21:43.987 - INFO: [epoch:  1, iter: 166,600, lr:(1.501e-04,)] l_pix: 1.2058e+01 
21-09-11 00:23:28.559 - INFO: [epoch:  1, iter: 166,700, lr:(1.500e-04,)] l_pix: 1.2948e+01 
21-09-11 00:25:13.140 - INFO: [epoch:  1, iter: 166,800, lr:(1.500e-04,)] l_pix: 1.2696e+01 
21-09-11 00:26:58.285 - INFO: [epoch:  1, iter: 166,900, lr:(1.499e-04,)] l_pix: 1.1442e+01 
21-09-11 00:28:43.404 - INFO: [epoch:  1, iter: 167,000, lr:(1.498e-04,)] l_pix: 1.2624e+01 
21-09-11 00:30:28.697 - INFO: [epoch:  1, iter: 167,100, lr:(1.498e-04,)] l_pix: 1.1946e+01 
21-09-11 00:32:13.934 - INFO: [epoch:  1, iter: 167,200, lr:(1.497e-04,)] l_pix: 1.0642e+01 
21-09-11 00:33:58.948 - INFO: [epoch:  1, iter: 167,300, lr:(1.497e-04,)] l_pix: 1.0749e+01 
21-09-11 00:35:44.126 - INFO: [epoch:  1, iter: 167,400, lr:(1.496e-04,)] l_pix: 1.3415e+01 
21-09-11 00:37:29.180 - INFO: [epoch:  1, iter: 167,500, lr:(1.496e-04,)] l_pix: 8.7848e+00 
21-09-11 00:39:14.344 - INFO: [epoch:  1, iter: 167,600, lr:(1.495e-04,)] l_pix: 1.3129e+01 
21-09-11 00:40:59.409 - INFO: [epoch:  1, iter: 167,700, lr:(1.495e-04,)] l_pix: 1.1545e+01 
21-09-11 00:42:44.444 - INFO: [epoch:  1, iter: 167,800, lr:(1.494e-04,)] l_pix: 1.1784e+01 
21-09-11 00:44:29.373 - INFO: [epoch:  1, iter: 167,900, lr:(1.494e-04,)] l_pix: 1.1213e+01 
21-09-11 00:46:14.262 - INFO: [epoch:  1, iter: 168,000, lr:(1.493e-04,)] l_pix: 1.2296e+01 
21-09-11 00:47:59.068 - INFO: [epoch:  1, iter: 168,100, lr:(1.492e-04,)] l_pix: 1.3483e+01 
21-09-11 00:49:44.259 - INFO: [epoch:  1, iter: 168,200, lr:(1.492e-04,)] l_pix: 1.2137e+01 
21-09-11 00:51:29.750 - INFO: [epoch:  1, iter: 168,300, lr:(1.491e-04,)] l_pix: 1.1849e+01 
21-09-11 00:53:15.133 - INFO: [epoch:  1, iter: 168,400, lr:(1.491e-04,)] l_pix: 1.1847e+01 
21-09-11 00:55:00.409 - INFO: [epoch:  1, iter: 168,500, lr:(1.490e-04,)] l_pix: 1.1536e+01 
21-09-11 00:56:45.528 - INFO: [epoch:  1, iter: 168,600, lr:(1.490e-04,)] l_pix: 1.0481e+01 
21-09-11 00:58:30.690 - INFO: [epoch:  1, iter: 168,700, lr:(1.489e-04,)] l_pix: 1.1585e+01 
21-09-11 01:00:15.867 - INFO: [epoch:  1, iter: 168,800, lr:(1.489e-04,)] l_pix: 1.1283e+01 
21-09-11 01:02:00.810 - INFO: [epoch:  1, iter: 168,900, lr:(1.488e-04,)] l_pix: 1.1139e+01 
21-09-11 01:03:45.857 - INFO: [epoch:  1, iter: 169,000, lr:(1.488e-04,)] l_pix: 1.0268e+01 
21-09-11 01:05:31.090 - INFO: [epoch:  1, iter: 169,100, lr:(1.487e-04,)] l_pix: 1.1397e+01 
21-09-11 01:07:16.204 - INFO: [epoch:  1, iter: 169,200, lr:(1.486e-04,)] l_pix: 1.2077e+01 
21-09-11 01:09:01.263 - INFO: [epoch:  1, iter: 169,300, lr:(1.486e-04,)] l_pix: 9.9272e+00 
21-09-11 01:10:46.032 - INFO: [epoch:  1, iter: 169,400, lr:(1.485e-04,)] l_pix: 1.0903e+01 
21-09-11 01:12:31.194 - INFO: [epoch:  1, iter: 169,500, lr:(1.485e-04,)] l_pix: 1.0470e+01 
21-09-11 01:14:16.580 - INFO: [epoch:  1, iter: 169,600, lr:(1.484e-04,)] l_pix: 1.2249e+01 
21-09-11 01:16:02.009 - INFO: [epoch:  1, iter: 169,700, lr:(1.484e-04,)] l_pix: 9.6296e+00 
21-09-11 01:17:47.184 - INFO: [epoch:  1, iter: 169,800, lr:(1.483e-04,)] l_pix: 1.1249e+01 
21-09-11 01:19:32.568 - INFO: [epoch:  1, iter: 169,900, lr:(1.483e-04,)] l_pix: 1.1654e+01 
21-09-11 01:21:17.880 - INFO: [epoch:  1, iter: 170,000, lr:(1.482e-04,)] l_pix: 1.1230e+01 
21-09-11 01:23:23.932 - INFO: # Validation # PSNR: 2.8828e+01
21-09-11 01:23:23.932 - INFO: Saving models and training states.
21-09-11 01:25:09.980 - INFO: [epoch:  1, iter: 170,100, lr:(1.481e-04,)] l_pix: 1.0910e+01 
21-09-11 01:26:55.001 - INFO: [epoch:  1, iter: 170,200, lr:(1.481e-04,)] l_pix: 1.2456e+01 
21-09-11 01:28:39.855 - INFO: [epoch:  1, iter: 170,300, lr:(1.480e-04,)] l_pix: 9.6323e+00 
21-09-11 01:30:24.841 - INFO: [epoch:  1, iter: 170,400, lr:(1.480e-04,)] l_pix: 9.7461e+00 
21-09-11 01:32:09.844 - INFO: [epoch:  1, iter: 170,500, lr:(1.479e-04,)] l_pix: 1.1722e+01 
21-09-11 01:33:54.689 - INFO: [epoch:  1, iter: 170,600, lr:(1.479e-04,)] l_pix: 1.0723e+01 
21-09-11 01:35:39.242 - INFO: [epoch:  1, iter: 170,700, lr:(1.478e-04,)] l_pix: 1.1240e+01 
21-09-11 01:37:24.126 - INFO: [epoch:  1, iter: 170,800, lr:(1.478e-04,)] l_pix: 1.2715e+01 
21-09-11 01:39:08.799 - INFO: [epoch:  1, iter: 170,900, lr:(1.477e-04,)] l_pix: 1.2644e+01 
21-09-11 01:40:53.831 - INFO: [epoch:  1, iter: 171,000, lr:(1.476e-04,)] l_pix: 1.1657e+01 
21-09-11 01:42:39.042 - INFO: [epoch:  1, iter: 171,100, lr:(1.476e-04,)] l_pix: 1.2813e+01 
21-09-11 01:44:24.201 - INFO: [epoch:  1, iter: 171,200, lr:(1.475e-04,)] l_pix: 1.2819e+01 
21-09-11 01:46:09.394 - INFO: [epoch:  1, iter: 171,300, lr:(1.475e-04,)] l_pix: 1.5793e+01 
21-09-11 01:47:54.449 - INFO: [epoch:  1, iter: 171,400, lr:(1.474e-04,)] l_pix: 1.2419e+01 
21-09-11 01:49:39.623 - INFO: [epoch:  1, iter: 171,500, lr:(1.474e-04,)] l_pix: 9.7057e+00 
21-09-11 01:51:24.584 - INFO: [epoch:  1, iter: 171,600, lr:(1.473e-04,)] l_pix: 1.1493e+01 
21-09-11 01:53:09.574 - INFO: [epoch:  1, iter: 171,700, lr:(1.473e-04,)] l_pix: 1.1690e+01 
21-09-11 01:54:54.493 - INFO: [epoch:  1, iter: 171,800, lr:(1.472e-04,)] l_pix: 1.1143e+01 
21-09-11 01:56:39.567 - INFO: [epoch:  1, iter: 171,900, lr:(1.472e-04,)] l_pix: 1.3603e+01 
21-09-11 01:58:24.452 - INFO: [epoch:  1, iter: 172,000, lr:(1.471e-04,)] l_pix: 1.0167e+01 
21-09-11 02:00:09.368 - INFO: [epoch:  1, iter: 172,100, lr:(1.470e-04,)] l_pix: 1.1083e+01 
21-09-11 02:01:54.600 - INFO: [epoch:  1, iter: 172,200, lr:(1.470e-04,)] l_pix: 1.2627e+01 
21-09-11 02:03:39.645 - INFO: [epoch:  1, iter: 172,300, lr:(1.469e-04,)] l_pix: 1.1886e+01 
21-09-11 02:05:24.857 - INFO: [epoch:  1, iter: 172,400, lr:(1.469e-04,)] l_pix: 9.9434e+00 
21-09-11 02:07:09.965 - INFO: [epoch:  1, iter: 172,500, lr:(1.468e-04,)] l_pix: 1.3739e+01 
21-09-11 02:08:55.146 - INFO: [epoch:  1, iter: 172,600, lr:(1.468e-04,)] l_pix: 1.0657e+01 
21-09-11 02:10:40.241 - INFO: [epoch:  1, iter: 172,700, lr:(1.467e-04,)] l_pix: 9.8680e+00 
21-09-11 02:12:25.179 - INFO: [epoch:  1, iter: 172,800, lr:(1.467e-04,)] l_pix: 1.2779e+01 
21-09-11 02:14:10.283 - INFO: [epoch:  1, iter: 172,900, lr:(1.466e-04,)] l_pix: 1.2931e+01 
21-09-11 02:15:55.313 - INFO: [epoch:  1, iter: 173,000, lr:(1.465e-04,)] l_pix: 1.1845e+01 
21-09-11 02:17:40.250 - INFO: [epoch:  1, iter: 173,100, lr:(1.465e-04,)] l_pix: 1.2605e+01 
21-09-11 02:19:25.133 - INFO: [epoch:  1, iter: 173,200, lr:(1.464e-04,)] l_pix: 1.2114e+01 
21-09-11 02:21:10.089 - INFO: [epoch:  1, iter: 173,300, lr:(1.464e-04,)] l_pix: 1.2168e+01 
21-09-11 02:22:55.026 - INFO: [epoch:  1, iter: 173,400, lr:(1.463e-04,)] l_pix: 1.2653e+01 
21-09-11 02:24:40.264 - INFO: [epoch:  1, iter: 173,500, lr:(1.463e-04,)] l_pix: 1.0064e+01 
21-09-11 02:26:25.613 - INFO: [epoch:  1, iter: 173,600, lr:(1.462e-04,)] l_pix: 1.1919e+01 
21-09-11 02:28:10.845 - INFO: [epoch:  1, iter: 173,700, lr:(1.462e-04,)] l_pix: 1.3356e+01 
21-09-11 02:29:55.876 - INFO: [epoch:  1, iter: 173,800, lr:(1.461e-04,)] l_pix: 1.0066e+01 
21-09-11 02:31:40.997 - INFO: [epoch:  1, iter: 173,900, lr:(1.460e-04,)] l_pix: 1.2802e+01 
21-09-11 02:33:26.077 - INFO: [epoch:  1, iter: 174,000, lr:(1.460e-04,)] l_pix: 1.0561e+01 
21-09-11 02:35:11.152 - INFO: [epoch:  1, iter: 174,100, lr:(1.459e-04,)] l_pix: 1.0574e+01 
21-09-11 02:36:56.243 - INFO: [epoch:  1, iter: 174,200, lr:(1.459e-04,)] l_pix: 1.2244e+01 
21-09-11 02:38:41.305 - INFO: [epoch:  1, iter: 174,300, lr:(1.458e-04,)] l_pix: 1.0572e+01 
21-09-11 02:40:26.123 - INFO: [epoch:  1, iter: 174,400, lr:(1.458e-04,)] l_pix: 1.2069e+01 
21-09-11 02:42:10.938 - INFO: [epoch:  1, iter: 174,500, lr:(1.457e-04,)] l_pix: 1.0162e+01 
21-09-11 02:43:55.694 - INFO: [epoch:  1, iter: 174,600, lr:(1.456e-04,)] l_pix: 1.0426e+01 
21-09-11 02:45:40.526 - INFO: [epoch:  1, iter: 174,700, lr:(1.456e-04,)] l_pix: 1.0050e+01 
21-09-11 02:47:25.241 - INFO: [epoch:  1, iter: 174,800, lr:(1.455e-04,)] l_pix: 1.0421e+01 
21-09-11 02:49:09.937 - INFO: [epoch:  1, iter: 174,900, lr:(1.455e-04,)] l_pix: 1.2611e+01 
21-09-11 02:50:54.951 - INFO: [epoch:  1, iter: 175,000, lr:(1.454e-04,)] l_pix: 1.1868e+01 
21-09-11 02:53:01.188 - INFO: # Validation # PSNR: 2.8879e+01
21-09-11 02:53:01.188 - INFO: Saving models and training states.
21-09-11 02:54:46.691 - INFO: [epoch:  1, iter: 175,100, lr:(1.454e-04,)] l_pix: 1.2152e+01 
21-09-11 02:56:31.286 - INFO: [epoch:  1, iter: 175,200, lr:(1.453e-04,)] l_pix: 1.1495e+01 
21-09-11 02:58:15.977 - INFO: [epoch:  1, iter: 175,300, lr:(1.453e-04,)] l_pix: 1.2246e+01 
21-09-11 03:00:00.624 - INFO: [epoch:  1, iter: 175,400, lr:(1.452e-04,)] l_pix: 1.1607e+01 
21-09-11 03:01:45.769 - INFO: [epoch:  1, iter: 175,500, lr:(1.451e-04,)] l_pix: 9.8555e+00 
21-09-11 03:03:30.943 - INFO: [epoch:  1, iter: 175,600, lr:(1.451e-04,)] l_pix: 1.2141e+01 
21-09-11 03:05:16.246 - INFO: [epoch:  1, iter: 175,700, lr:(1.450e-04,)] l_pix: 1.1526e+01 
21-09-11 03:07:01.390 - INFO: [epoch:  1, iter: 175,800, lr:(1.450e-04,)] l_pix: 1.0712e+01 
21-09-11 03:08:46.449 - INFO: [epoch:  1, iter: 175,900, lr:(1.449e-04,)] l_pix: 1.1177e+01 
21-09-11 03:10:31.692 - INFO: [epoch:  1, iter: 176,000, lr:(1.449e-04,)] l_pix: 1.1528e+01 
21-09-11 03:12:16.903 - INFO: [epoch:  1, iter: 176,100, lr:(1.448e-04,)] l_pix: 1.0087e+01 
21-09-11 03:14:02.032 - INFO: [epoch:  1, iter: 176,200, lr:(1.448e-04,)] l_pix: 1.3620e+01 
21-09-11 03:15:46.773 - INFO: [epoch:  1, iter: 176,300, lr:(1.447e-04,)] l_pix: 1.3291e+01 
21-09-11 03:17:31.743 - INFO: [epoch:  1, iter: 176,400, lr:(1.446e-04,)] l_pix: 1.1173e+01 
21-09-11 03:19:16.986 - INFO: [epoch:  1, iter: 176,500, lr:(1.446e-04,)] l_pix: 1.1131e+01 
21-09-11 03:21:02.018 - INFO: [epoch:  1, iter: 176,600, lr:(1.445e-04,)] l_pix: 1.1561e+01 
21-09-11 03:22:46.935 - INFO: [epoch:  1, iter: 176,700, lr:(1.445e-04,)] l_pix: 1.2007e+01 
21-09-11 03:24:31.746 - INFO: [epoch:  1, iter: 176,800, lr:(1.444e-04,)] l_pix: 1.1409e+01 
21-09-11 03:26:16.478 - INFO: [epoch:  1, iter: 176,900, lr:(1.444e-04,)] l_pix: 1.1440e+01 
21-09-11 03:28:01.238 - INFO: [epoch:  1, iter: 177,000, lr:(1.443e-04,)] l_pix: 1.2378e+01 
21-09-11 03:29:46.555 - INFO: [epoch:  1, iter: 177,100, lr:(1.442e-04,)] l_pix: 1.3873e+01 
21-09-11 03:31:31.766 - INFO: [epoch:  1, iter: 177,200, lr:(1.442e-04,)] l_pix: 1.1218e+01 
21-09-11 03:33:16.926 - INFO: [epoch:  1, iter: 177,300, lr:(1.441e-04,)] l_pix: 1.1279e+01 
21-09-11 03:35:02.018 - INFO: [epoch:  1, iter: 177,400, lr:(1.441e-04,)] l_pix: 1.2746e+01 
21-09-11 03:36:47.043 - INFO: [epoch:  1, iter: 177,500, lr:(1.440e-04,)] l_pix: 1.3331e+01 
21-09-11 03:38:32.259 - INFO: [epoch:  1, iter: 177,600, lr:(1.440e-04,)] l_pix: 1.0113e+01 
21-09-11 03:40:17.346 - INFO: [epoch:  1, iter: 177,700, lr:(1.439e-04,)] l_pix: 1.0744e+01 
21-09-11 03:42:02.249 - INFO: [epoch:  1, iter: 177,800, lr:(1.439e-04,)] l_pix: 1.2228e+01 
21-09-11 03:43:47.141 - INFO: [epoch:  1, iter: 177,900, lr:(1.438e-04,)] l_pix: 1.1370e+01 
21-09-11 03:45:32.051 - INFO: [epoch:  1, iter: 178,000, lr:(1.437e-04,)] l_pix: 1.0836e+01 
21-09-11 03:47:17.094 - INFO: [epoch:  1, iter: 178,100, lr:(1.437e-04,)] l_pix: 1.3149e+01 
21-09-11 03:49:02.165 - INFO: [epoch:  1, iter: 178,200, lr:(1.436e-04,)] l_pix: 1.0980e+01 
21-09-11 03:50:47.249 - INFO: [epoch:  1, iter: 178,300, lr:(1.436e-04,)] l_pix: 1.1850e+01 
21-09-11 03:52:32.323 - INFO: [epoch:  1, iter: 178,400, lr:(1.435e-04,)] l_pix: 1.2345e+01 
21-09-11 03:54:17.253 - INFO: [epoch:  1, iter: 178,500, lr:(1.435e-04,)] l_pix: 1.0094e+01 
21-09-11 03:56:02.062 - INFO: [epoch:  1, iter: 178,600, lr:(1.434e-04,)] l_pix: 1.1474e+01 
21-09-11 03:57:46.833 - INFO: [epoch:  1, iter: 178,700, lr:(1.433e-04,)] l_pix: 1.1244e+01 
21-09-11 03:59:32.084 - INFO: [epoch:  1, iter: 178,800, lr:(1.433e-04,)] l_pix: 1.1847e+01 
21-09-11 04:01:17.322 - INFO: [epoch:  1, iter: 178,900, lr:(1.432e-04,)] l_pix: 1.0213e+01 
21-09-11 04:03:02.583 - INFO: [epoch:  1, iter: 179,000, lr:(1.432e-04,)] l_pix: 1.0867e+01 
21-09-11 04:04:47.758 - INFO: [epoch:  1, iter: 179,100, lr:(1.431e-04,)] l_pix: 1.0828e+01 
21-09-11 04:06:32.874 - INFO: [epoch:  1, iter: 179,200, lr:(1.431e-04,)] l_pix: 1.1619e+01 
21-09-11 04:08:18.227 - INFO: [epoch:  1, iter: 179,300, lr:(1.430e-04,)] l_pix: 1.2739e+01 
21-09-11 04:10:03.268 - INFO: [epoch:  1, iter: 179,400, lr:(1.429e-04,)] l_pix: 1.2844e+01 
21-09-11 04:11:48.294 - INFO: [epoch:  1, iter: 179,500, lr:(1.429e-04,)] l_pix: 1.1992e+01 
21-09-11 04:13:33.348 - INFO: [epoch:  1, iter: 179,600, lr:(1.428e-04,)] l_pix: 1.1921e+01 
21-09-11 04:15:18.206 - INFO: [epoch:  1, iter: 179,700, lr:(1.428e-04,)] l_pix: 1.1647e+01 
21-09-11 04:17:03.224 - INFO: [epoch:  1, iter: 179,800, lr:(1.427e-04,)] l_pix: 1.0203e+01 
21-09-11 04:18:48.206 - INFO: [epoch:  1, iter: 179,900, lr:(1.427e-04,)] l_pix: 1.2854e+01 
21-09-11 04:20:32.884 - INFO: [epoch:  1, iter: 180,000, lr:(1.426e-04,)] l_pix: 1.3595e+01 
21-09-11 04:22:39.241 - INFO: # Validation # PSNR: 2.8892e+01
21-09-11 04:22:39.242 - INFO: Saving models and training states.
21-09-11 04:24:25.445 - INFO: [epoch:  1, iter: 180,100, lr:(1.425e-04,)] l_pix: 1.1455e+01 
21-09-11 04:26:10.711 - INFO: [epoch:  1, iter: 180,200, lr:(1.425e-04,)] l_pix: 1.1004e+01 
21-09-11 04:27:55.892 - INFO: [epoch:  1, iter: 180,300, lr:(1.424e-04,)] l_pix: 1.0084e+01 
21-09-11 04:29:40.903 - INFO: [epoch:  1, iter: 180,400, lr:(1.424e-04,)] l_pix: 9.4969e+00 
21-09-11 04:31:25.968 - INFO: [epoch:  1, iter: 180,500, lr:(1.423e-04,)] l_pix: 1.2422e+01 
21-09-11 04:33:10.885 - INFO: [epoch:  1, iter: 180,600, lr:(1.423e-04,)] l_pix: 1.3265e+01 
21-09-11 04:34:55.814 - INFO: [epoch:  1, iter: 180,700, lr:(1.422e-04,)] l_pix: 1.1484e+01 
21-09-11 04:36:40.831 - INFO: [epoch:  1, iter: 180,800, lr:(1.422e-04,)] l_pix: 1.1927e+01 
21-09-11 04:38:25.836 - INFO: [epoch:  1, iter: 180,900, lr:(1.421e-04,)] l_pix: 1.1954e+01 
21-09-11 04:40:10.867 - INFO: [epoch:  1, iter: 181,000, lr:(1.420e-04,)] l_pix: 1.2845e+01 
21-09-11 04:41:55.786 - INFO: [epoch:  1, iter: 181,100, lr:(1.420e-04,)] l_pix: 1.2969e+01 
21-09-11 04:43:40.652 - INFO: [epoch:  1, iter: 181,200, lr:(1.419e-04,)] l_pix: 1.0671e+01 
21-09-11 04:45:25.605 - INFO: [epoch:  1, iter: 181,300, lr:(1.419e-04,)] l_pix: 1.1808e+01 
21-09-11 04:47:10.305 - INFO: [epoch:  1, iter: 181,400, lr:(1.418e-04,)] l_pix: 1.2988e+01 
21-09-11 04:48:54.927 - INFO: [epoch:  1, iter: 181,500, lr:(1.418e-04,)] l_pix: 1.0216e+01 
21-09-11 04:50:40.144 - INFO: [epoch:  1, iter: 181,600, lr:(1.417e-04,)] l_pix: 1.1557e+01 
21-09-11 04:52:25.334 - INFO: [epoch:  1, iter: 181,700, lr:(1.416e-04,)] l_pix: 1.1000e+01 
21-09-11 04:54:10.352 - INFO: [epoch:  1, iter: 181,800, lr:(1.416e-04,)] l_pix: 1.2268e+01 
21-09-11 04:55:55.710 - INFO: [epoch:  1, iter: 181,900, lr:(1.415e-04,)] l_pix: 1.1824e+01 
21-09-11 04:57:40.687 - INFO: [epoch:  1, iter: 182,000, lr:(1.415e-04,)] l_pix: 1.1402e+01 
21-09-11 04:59:25.641 - INFO: [epoch:  1, iter: 182,100, lr:(1.414e-04,)] l_pix: 1.1869e+01 
21-09-11 05:01:10.743 - INFO: [epoch:  1, iter: 182,200, lr:(1.414e-04,)] l_pix: 9.1102e+00 
21-09-11 05:02:55.654 - INFO: [epoch:  1, iter: 182,300, lr:(1.413e-04,)] l_pix: 1.1531e+01 
21-09-11 05:04:40.506 - INFO: [epoch:  1, iter: 182,400, lr:(1.412e-04,)] l_pix: 1.0357e+01 
21-09-11 05:06:25.318 - INFO: [epoch:  1, iter: 182,500, lr:(1.412e-04,)] l_pix: 9.9994e+00 
21-09-11 05:08:10.222 - INFO: [epoch:  1, iter: 182,600, lr:(1.411e-04,)] l_pix: 1.1907e+01 
21-09-11 05:09:54.959 - INFO: [epoch:  1, iter: 182,700, lr:(1.411e-04,)] l_pix: 1.1728e+01 
21-09-11 05:11:39.719 - INFO: [epoch:  1, iter: 182,800, lr:(1.410e-04,)] l_pix: 1.3282e+01 
21-09-11 05:13:24.300 - INFO: [epoch:  1, iter: 182,900, lr:(1.410e-04,)] l_pix: 1.0615e+01 
21-09-11 05:15:08.905 - INFO: [epoch:  1, iter: 183,000, lr:(1.409e-04,)] l_pix: 1.1332e+01 
21-09-11 05:16:54.016 - INFO: [epoch:  1, iter: 183,100, lr:(1.408e-04,)] l_pix: 1.1102e+01 
21-09-11 05:18:39.444 - INFO: [epoch:  1, iter: 183,200, lr:(1.408e-04,)] l_pix: 1.1591e+01 
21-09-11 05:20:24.744 - INFO: [epoch:  1, iter: 183,300, lr:(1.407e-04,)] l_pix: 1.1431e+01 
21-09-11 05:22:09.682 - INFO: [epoch:  1, iter: 183,400, lr:(1.407e-04,)] l_pix: 1.0617e+01 
21-09-11 05:23:54.798 - INFO: [epoch:  1, iter: 183,500, lr:(1.406e-04,)] l_pix: 1.1010e+01 
21-09-11 05:25:39.842 - INFO: [epoch:  1, iter: 183,600, lr:(1.405e-04,)] l_pix: 1.1475e+01 
21-09-11 05:27:24.829 - INFO: [epoch:  1, iter: 183,700, lr:(1.405e-04,)] l_pix: 1.0414e+01 
21-09-11 05:29:09.898 - INFO: [epoch:  1, iter: 183,800, lr:(1.404e-04,)] l_pix: 9.8902e+00 
21-09-11 05:30:54.627 - INFO: [epoch:  1, iter: 183,900, lr:(1.404e-04,)] l_pix: 1.2566e+01 
21-09-11 05:32:39.293 - INFO: [epoch:  1, iter: 184,000, lr:(1.403e-04,)] l_pix: 1.1749e+01 
21-09-11 05:34:24.128 - INFO: [epoch:  1, iter: 184,100, lr:(1.403e-04,)] l_pix: 1.1390e+01 
21-09-11 05:36:09.088 - INFO: [epoch:  1, iter: 184,200, lr:(1.402e-04,)] l_pix: 1.1679e+01 
21-09-11 05:37:53.890 - INFO: [epoch:  1, iter: 184,300, lr:(1.401e-04,)] l_pix: 1.0983e+01 
21-09-11 05:39:38.449 - INFO: [epoch:  1, iter: 184,400, lr:(1.401e-04,)] l_pix: 1.1533e+01 
21-09-11 05:41:22.800 - INFO: [epoch:  1, iter: 184,500, lr:(1.400e-04,)] l_pix: 1.1982e+01 
21-09-11 05:43:07.230 - INFO: [epoch:  1, iter: 184,600, lr:(1.400e-04,)] l_pix: 1.1235e+01 
21-09-11 05:44:52.326 - INFO: [epoch:  1, iter: 184,700, lr:(1.399e-04,)] l_pix: 1.4037e+01 
21-09-11 05:46:37.762 - INFO: [epoch:  1, iter: 184,800, lr:(1.399e-04,)] l_pix: 1.1506e+01 
21-09-11 05:48:22.727 - INFO: [epoch:  1, iter: 184,900, lr:(1.398e-04,)] l_pix: 1.2851e+01 
21-09-11 05:50:07.695 - INFO: [epoch:  1, iter: 185,000, lr:(1.397e-04,)] l_pix: 1.4325e+01 
21-09-11 05:52:13.967 - INFO: # Validation # PSNR: 2.8886e+01
21-09-11 05:52:13.967 - INFO: Saving models and training states.
21-09-11 05:53:59.820 - INFO: [epoch:  1, iter: 185,100, lr:(1.397e-04,)] l_pix: 1.2097e+01 
21-09-11 05:55:44.520 - INFO: [epoch:  1, iter: 185,200, lr:(1.396e-04,)] l_pix: 1.1570e+01 
21-09-11 05:57:29.549 - INFO: [epoch:  1, iter: 185,300, lr:(1.396e-04,)] l_pix: 1.0887e+01 
21-09-11 05:59:14.869 - INFO: [epoch:  1, iter: 185,400, lr:(1.395e-04,)] l_pix: 1.2077e+01 
21-09-11 06:00:59.994 - INFO: [epoch:  1, iter: 185,500, lr:(1.395e-04,)] l_pix: 1.0984e+01 
21-09-11 06:02:45.202 - INFO: [epoch:  1, iter: 185,600, lr:(1.394e-04,)] l_pix: 1.1911e+01 
21-09-11 06:04:30.527 - INFO: [epoch:  1, iter: 185,700, lr:(1.393e-04,)] l_pix: 1.2740e+01 
21-09-11 06:06:15.574 - INFO: [epoch:  1, iter: 185,800, lr:(1.393e-04,)] l_pix: 1.1352e+01 
21-09-11 06:08:00.597 - INFO: [epoch:  1, iter: 185,900, lr:(1.392e-04,)] l_pix: 1.0724e+01 
21-09-11 06:09:45.584 - INFO: [epoch:  1, iter: 186,000, lr:(1.392e-04,)] l_pix: 1.2804e+01 
21-09-11 06:11:30.433 - INFO: [epoch:  1, iter: 186,100, lr:(1.391e-04,)] l_pix: 9.6713e+00 
21-09-11 06:13:15.276 - INFO: [epoch:  1, iter: 186,200, lr:(1.391e-04,)] l_pix: 1.2356e+01 
21-09-11 06:15:00.077 - INFO: [epoch:  1, iter: 186,300, lr:(1.390e-04,)] l_pix: 1.3399e+01 
21-09-11 06:16:44.818 - INFO: [epoch:  1, iter: 186,400, lr:(1.389e-04,)] l_pix: 9.1529e+00 
21-09-11 06:18:29.471 - INFO: [epoch:  1, iter: 186,500, lr:(1.389e-04,)] l_pix: 1.0652e+01 
21-09-11 06:20:14.413 - INFO: [epoch:  1, iter: 186,600, lr:(1.388e-04,)] l_pix: 1.2636e+01 
21-09-11 06:21:59.438 - INFO: [epoch:  1, iter: 186,700, lr:(1.388e-04,)] l_pix: 1.1871e+01 
21-09-11 06:23:44.580 - INFO: [epoch:  1, iter: 186,800, lr:(1.387e-04,)] l_pix: 1.1707e+01 
21-09-11 06:25:29.730 - INFO: [epoch:  1, iter: 186,900, lr:(1.386e-04,)] l_pix: 1.1234e+01 
21-09-11 06:27:14.791 - INFO: [epoch:  1, iter: 187,000, lr:(1.386e-04,)] l_pix: 1.0467e+01 
21-09-11 06:28:59.720 - INFO: [epoch:  1, iter: 187,100, lr:(1.385e-04,)] l_pix: 1.0317e+01 
21-09-11 06:30:44.644 - INFO: [epoch:  1, iter: 187,200, lr:(1.385e-04,)] l_pix: 1.1661e+01 
21-09-11 06:32:29.439 - INFO: [epoch:  1, iter: 187,300, lr:(1.384e-04,)] l_pix: 1.3363e+01 
21-09-11 06:34:14.383 - INFO: [epoch:  1, iter: 187,400, lr:(1.384e-04,)] l_pix: 1.1349e+01 
21-09-11 06:35:59.190 - INFO: [epoch:  1, iter: 187,500, lr:(1.383e-04,)] l_pix: 1.0087e+01 
21-09-11 06:37:43.962 - INFO: [epoch:  1, iter: 187,600, lr:(1.382e-04,)] l_pix: 1.0322e+01 
21-09-11 06:39:28.780 - INFO: [epoch:  1, iter: 187,700, lr:(1.382e-04,)] l_pix: 1.1527e+01 
21-09-11 06:41:13.517 - INFO: [epoch:  1, iter: 187,800, lr:(1.381e-04,)] l_pix: 1.1619e+01 
21-09-11 06:42:58.669 - INFO: [epoch:  1, iter: 187,900, lr:(1.381e-04,)] l_pix: 1.0611e+01 
21-09-11 06:44:43.889 - INFO: [epoch:  1, iter: 188,000, lr:(1.380e-04,)] l_pix: 1.2288e+01 
21-09-11 06:46:29.038 - INFO: [epoch:  1, iter: 188,100, lr:(1.380e-04,)] l_pix: 1.1784e+01 
21-09-11 06:48:13.906 - INFO: [epoch:  1, iter: 188,200, lr:(1.379e-04,)] l_pix: 1.1963e+01 
21-09-11 06:49:58.585 - INFO: [epoch:  1, iter: 188,300, lr:(1.378e-04,)] l_pix: 1.1503e+01 
21-09-11 06:51:43.193 - INFO: [epoch:  1, iter: 188,400, lr:(1.378e-04,)] l_pix: 1.1738e+01 
21-09-11 06:53:27.975 - INFO: [epoch:  1, iter: 188,500, lr:(1.377e-04,)] l_pix: 1.0977e+01 
21-09-11 06:55:12.926 - INFO: [epoch:  1, iter: 188,600, lr:(1.377e-04,)] l_pix: 1.0445e+01 
21-09-11 06:56:57.549 - INFO: [epoch:  1, iter: 188,700, lr:(1.376e-04,)] l_pix: 1.2627e+01 
21-09-11 06:58:42.152 - INFO: [epoch:  1, iter: 188,800, lr:(1.375e-04,)] l_pix: 1.0538e+01 
21-09-11 07:00:26.680 - INFO: [epoch:  1, iter: 188,900, lr:(1.375e-04,)] l_pix: 1.0645e+01 
21-09-11 07:02:11.201 - INFO: [epoch:  1, iter: 189,000, lr:(1.374e-04,)] l_pix: 1.0024e+01 
21-09-11 07:03:56.190 - INFO: [epoch:  1, iter: 189,100, lr:(1.374e-04,)] l_pix: 1.2374e+01 
21-09-11 07:05:41.167 - INFO: [epoch:  1, iter: 189,200, lr:(1.373e-04,)] l_pix: 1.1663e+01 
21-09-11 07:07:26.368 - INFO: [epoch:  1, iter: 189,300, lr:(1.373e-04,)] l_pix: 1.1374e+01 
21-09-11 07:09:11.393 - INFO: [epoch:  1, iter: 189,400, lr:(1.372e-04,)] l_pix: 1.1666e+01 
21-09-11 07:10:56.427 - INFO: [epoch:  1, iter: 189,500, lr:(1.371e-04,)] l_pix: 1.1421e+01 
21-09-11 07:12:41.341 - INFO: [epoch:  1, iter: 189,600, lr:(1.371e-04,)] l_pix: 1.2616e+01 
21-09-11 07:14:26.368 - INFO: [epoch:  1, iter: 189,700, lr:(1.370e-04,)] l_pix: 1.3504e+01 
21-09-11 07:16:11.328 - INFO: [epoch:  1, iter: 189,800, lr:(1.370e-04,)] l_pix: 1.1498e+01 
21-09-11 07:17:55.916 - INFO: [epoch:  1, iter: 189,900, lr:(1.369e-04,)] l_pix: 1.1335e+01 
21-09-11 07:19:40.585 - INFO: [epoch:  1, iter: 190,000, lr:(1.368e-04,)] l_pix: 1.2609e+01 
21-09-11 07:21:46.308 - INFO: # Validation # PSNR: 2.8861e+01
21-09-11 07:21:46.308 - INFO: Saving models and training states.
21-09-11 07:23:32.141 - INFO: [epoch:  1, iter: 190,100, lr:(1.368e-04,)] l_pix: 1.3443e+01 
21-09-11 07:25:16.902 - INFO: [epoch:  1, iter: 190,200, lr:(1.367e-04,)] l_pix: 1.0636e+01 
21-09-11 07:27:01.660 - INFO: [epoch:  1, iter: 190,300, lr:(1.367e-04,)] l_pix: 1.0667e+01 
21-09-11 07:28:46.166 - INFO: [epoch:  1, iter: 190,400, lr:(1.366e-04,)] l_pix: 1.0811e+01 
21-09-11 07:30:30.591 - INFO: [epoch:  1, iter: 190,500, lr:(1.366e-04,)] l_pix: 1.3083e+01 
21-09-11 07:32:15.576 - INFO: [epoch:  1, iter: 190,600, lr:(1.365e-04,)] l_pix: 1.3375e+01 
21-09-11 07:34:00.658 - INFO: [epoch:  1, iter: 190,700, lr:(1.364e-04,)] l_pix: 1.1512e+01 
21-09-11 07:35:45.713 - INFO: [epoch:  1, iter: 190,800, lr:(1.364e-04,)] l_pix: 1.1083e+01 
21-09-11 07:37:30.837 - INFO: [epoch:  1, iter: 190,900, lr:(1.363e-04,)] l_pix: 1.0939e+01 
21-09-11 07:39:15.890 - INFO: [epoch:  1, iter: 191,000, lr:(1.363e-04,)] l_pix: 1.0359e+01 
21-09-11 07:41:00.985 - INFO: [epoch:  1, iter: 191,100, lr:(1.362e-04,)] l_pix: 9.8140e+00 
21-09-11 07:42:46.020 - INFO: [epoch:  1, iter: 191,200, lr:(1.361e-04,)] l_pix: 1.0911e+01 
21-09-11 07:44:31.163 - INFO: [epoch:  1, iter: 191,300, lr:(1.361e-04,)] l_pix: 1.1905e+01 
21-09-11 07:46:15.925 - INFO: [epoch:  1, iter: 191,400, lr:(1.360e-04,)] l_pix: 1.1694e+01 
21-09-11 07:48:00.844 - INFO: [epoch:  1, iter: 191,500, lr:(1.360e-04,)] l_pix: 1.1581e+01 
21-09-11 07:49:45.715 - INFO: [epoch:  1, iter: 191,600, lr:(1.359e-04,)] l_pix: 1.0457e+01 
21-09-11 07:51:30.495 - INFO: [epoch:  1, iter: 191,700, lr:(1.358e-04,)] l_pix: 1.3048e+01 
21-09-11 07:53:15.229 - INFO: [epoch:  1, iter: 191,800, lr:(1.358e-04,)] l_pix: 1.3170e+01 
21-09-11 07:55:00.275 - INFO: [epoch:  1, iter: 191,900, lr:(1.357e-04,)] l_pix: 1.0451e+01 
21-09-11 07:56:44.785 - INFO: [epoch:  1, iter: 192,000, lr:(1.357e-04,)] l_pix: 1.0790e+01 
21-09-11 07:58:29.692 - INFO: [epoch:  1, iter: 192,100, lr:(1.356e-04,)] l_pix: 1.0589e+01 
21-09-11 08:00:14.679 - INFO: [epoch:  1, iter: 192,200, lr:(1.356e-04,)] l_pix: 1.3889e+01 
21-09-11 08:01:59.289 - INFO: [epoch:  1, iter: 192,300, lr:(1.355e-04,)] l_pix: 1.0992e+01 
21-09-11 08:03:43.645 - INFO: [epoch:  1, iter: 192,400, lr:(1.354e-04,)] l_pix: 9.6933e+00 
21-09-11 08:05:28.141 - INFO: [epoch:  1, iter: 192,500, lr:(1.354e-04,)] l_pix: 1.0242e+01 
21-09-11 08:07:12.492 - INFO: [epoch:  1, iter: 192,600, lr:(1.353e-04,)] l_pix: 1.0895e+01 
21-09-11 08:08:57.117 - INFO: [epoch:  1, iter: 192,700, lr:(1.353e-04,)] l_pix: 1.2280e+01 
21-09-11 08:10:41.706 - INFO: [epoch:  1, iter: 192,800, lr:(1.352e-04,)] l_pix: 1.0957e+01 
21-09-11 08:12:26.144 - INFO: [epoch:  1, iter: 192,900, lr:(1.351e-04,)] l_pix: 1.2187e+01 
21-09-11 08:14:10.572 - INFO: [epoch:  1, iter: 193,000, lr:(1.351e-04,)] l_pix: 1.1936e+01 
21-09-11 08:15:55.141 - INFO: [epoch:  1, iter: 193,100, lr:(1.350e-04,)] l_pix: 1.0114e+01 
21-09-11 08:17:39.613 - INFO: [epoch:  1, iter: 193,200, lr:(1.350e-04,)] l_pix: 1.1684e+01 
21-09-11 08:19:24.309 - INFO: [epoch:  1, iter: 193,300, lr:(1.349e-04,)] l_pix: 1.2090e+01 
21-09-11 08:21:08.552 - INFO: [epoch:  1, iter: 193,400, lr:(1.348e-04,)] l_pix: 9.2358e+00 
21-09-11 08:22:53.120 - INFO: [epoch:  1, iter: 193,500, lr:(1.348e-04,)] l_pix: 1.1656e+01 
21-09-11 08:24:38.064 - INFO: [epoch:  1, iter: 193,600, lr:(1.347e-04,)] l_pix: 1.1224e+01 
21-09-11 08:26:22.887 - INFO: [epoch:  1, iter: 193,700, lr:(1.347e-04,)] l_pix: 1.1686e+01 
21-09-11 08:28:07.606 - INFO: [epoch:  1, iter: 193,800, lr:(1.346e-04,)] l_pix: 1.1646e+01 
21-09-11 08:29:52.275 - INFO: [epoch:  1, iter: 193,900, lr:(1.346e-04,)] l_pix: 8.8193e+00 
21-09-11 08:31:37.095 - INFO: [epoch:  1, iter: 194,000, lr:(1.345e-04,)] l_pix: 1.0548e+01 
21-09-11 08:33:21.859 - INFO: [epoch:  1, iter: 194,100, lr:(1.344e-04,)] l_pix: 9.5639e+00 
21-09-11 08:35:06.602 - INFO: [epoch:  1, iter: 194,200, lr:(1.344e-04,)] l_pix: 1.1532e+01 
21-09-11 08:36:51.272 - INFO: [epoch:  1, iter: 194,300, lr:(1.343e-04,)] l_pix: 1.1956e+01 
21-09-11 08:38:35.777 - INFO: [epoch:  1, iter: 194,400, lr:(1.343e-04,)] l_pix: 1.0558e+01 
21-09-11 08:40:20.379 - INFO: [epoch:  1, iter: 194,500, lr:(1.342e-04,)] l_pix: 1.1021e+01 
21-09-11 08:42:05.157 - INFO: [epoch:  1, iter: 194,600, lr:(1.341e-04,)] l_pix: 1.2751e+01 
21-09-11 08:43:49.921 - INFO: [epoch:  1, iter: 194,700, lr:(1.341e-04,)] l_pix: 1.2449e+01 
21-09-11 08:45:34.809 - INFO: [epoch:  1, iter: 194,800, lr:(1.340e-04,)] l_pix: 1.3946e+01 
21-09-11 08:47:19.652 - INFO: [epoch:  1, iter: 194,900, lr:(1.340e-04,)] l_pix: 1.0531e+01 
21-09-11 08:49:04.251 - INFO: [epoch:  1, iter: 195,000, lr:(1.339e-04,)] l_pix: 1.1079e+01 
21-09-11 08:51:09.929 - INFO: # Validation # PSNR: 2.8811e+01
21-09-11 08:51:09.930 - INFO: Saving models and training states.
21-09-11 08:52:55.581 - INFO: [epoch:  1, iter: 195,100, lr:(1.338e-04,)] l_pix: 1.1983e+01 
21-09-11 08:54:40.482 - INFO: [epoch:  1, iter: 195,200, lr:(1.338e-04,)] l_pix: 9.9071e+00 
21-09-11 08:56:25.428 - INFO: [epoch:  1, iter: 195,300, lr:(1.337e-04,)] l_pix: 1.3217e+01 
21-09-11 08:58:10.312 - INFO: [epoch:  1, iter: 195,400, lr:(1.337e-04,)] l_pix: 1.1457e+01 
21-09-11 08:59:55.016 - INFO: [epoch:  1, iter: 195,500, lr:(1.336e-04,)] l_pix: 1.1664e+01 
21-09-11 09:01:39.842 - INFO: [epoch:  1, iter: 195,600, lr:(1.336e-04,)] l_pix: 1.2333e+01 
21-09-11 09:03:24.442 - INFO: [epoch:  1, iter: 195,700, lr:(1.335e-04,)] l_pix: 1.3188e+01 
21-09-11 09:05:09.449 - INFO: [epoch:  1, iter: 195,800, lr:(1.334e-04,)] l_pix: 1.1850e+01 
21-09-11 09:06:54.322 - INFO: [epoch:  1, iter: 195,900, lr:(1.334e-04,)] l_pix: 9.6464e+00 
21-09-11 09:08:39.353 - INFO: [epoch:  1, iter: 196,000, lr:(1.333e-04,)] l_pix: 1.0492e+01 
21-09-11 09:10:24.288 - INFO: [epoch:  1, iter: 196,100, lr:(1.333e-04,)] l_pix: 1.0963e+01 
21-09-11 09:12:09.141 - INFO: [epoch:  1, iter: 196,200, lr:(1.332e-04,)] l_pix: 1.4863e+01 
21-09-11 09:13:53.882 - INFO: [epoch:  1, iter: 196,300, lr:(1.331e-04,)] l_pix: 1.1661e+01 
21-09-11 09:15:38.684 - INFO: [epoch:  1, iter: 196,400, lr:(1.331e-04,)] l_pix: 1.1923e+01 
21-09-11 09:17:23.417 - INFO: [epoch:  1, iter: 196,500, lr:(1.330e-04,)] l_pix: 1.1360e+01 
21-09-11 09:19:08.149 - INFO: [epoch:  1, iter: 196,600, lr:(1.330e-04,)] l_pix: 1.4893e+01 
21-09-11 09:20:52.916 - INFO: [epoch:  1, iter: 196,700, lr:(1.329e-04,)] l_pix: 1.0775e+01 
21-09-11 09:22:37.548 - INFO: [epoch:  1, iter: 196,800, lr:(1.328e-04,)] l_pix: 1.2358e+01 
21-09-11 09:24:22.251 - INFO: [epoch:  1, iter: 196,900, lr:(1.328e-04,)] l_pix: 1.1718e+01 
21-09-11 09:26:06.870 - INFO: [epoch:  1, iter: 197,000, lr:(1.327e-04,)] l_pix: 1.5029e+01 
21-09-11 09:27:51.713 - INFO: [epoch:  1, iter: 197,100, lr:(1.327e-04,)] l_pix: 1.1887e+01 
21-09-11 09:29:36.718 - INFO: [epoch:  1, iter: 197,200, lr:(1.326e-04,)] l_pix: 1.1104e+01 
21-09-11 09:31:21.646 - INFO: [epoch:  1, iter: 197,300, lr:(1.325e-04,)] l_pix: 1.0985e+01 
21-09-11 09:33:06.528 - INFO: [epoch:  1, iter: 197,400, lr:(1.325e-04,)] l_pix: 1.3531e+01 
21-09-11 09:34:51.834 - INFO: [epoch:  1, iter: 197,500, lr:(1.324e-04,)] l_pix: 1.0134e+01 
21-09-11 09:36:37.475 - INFO: [epoch:  1, iter: 197,600, lr:(1.324e-04,)] l_pix: 1.0211e+01 
21-09-11 09:38:23.042 - INFO: [epoch:  1, iter: 197,700, lr:(1.323e-04,)] l_pix: 1.2136e+01 
21-09-11 09:40:08.080 - INFO: [epoch:  1, iter: 197,800, lr:(1.322e-04,)] l_pix: 1.2799e+01 
21-09-11 09:41:52.329 - INFO: [epoch:  1, iter: 197,900, lr:(1.322e-04,)] l_pix: 1.1455e+01 
21-09-11 09:43:37.138 - INFO: [epoch:  1, iter: 198,000, lr:(1.321e-04,)] l_pix: 1.0791e+01 
21-09-11 09:45:21.922 - INFO: [epoch:  1, iter: 198,100, lr:(1.321e-04,)] l_pix: 9.8248e+00 
21-09-11 09:47:06.349 - INFO: [epoch:  1, iter: 198,200, lr:(1.320e-04,)] l_pix: 1.2695e+01 
21-09-11 09:48:51.128 - INFO: [epoch:  2, iter: 198,300, lr:(1.319e-04,)] l_pix: 1.2270e+01 
21-09-11 09:50:36.086 - INFO: [epoch:  2, iter: 198,400, lr:(1.319e-04,)] l_pix: 1.1282e+01 
21-09-11 09:52:21.121 - INFO: [epoch:  2, iter: 198,500, lr:(1.318e-04,)] l_pix: 1.1097e+01 
21-09-11 09:54:06.146 - INFO: [epoch:  2, iter: 198,600, lr:(1.318e-04,)] l_pix: 1.3544e+01 
21-09-11 09:55:51.235 - INFO: [epoch:  2, iter: 198,700, lr:(1.317e-04,)] l_pix: 1.2699e+01 
21-09-11 09:57:36.174 - INFO: [epoch:  2, iter: 198,800, lr:(1.317e-04,)] l_pix: 9.6630e+00 
21-09-11 09:59:21.083 - INFO: [epoch:  2, iter: 198,900, lr:(1.316e-04,)] l_pix: 1.2579e+01 
21-09-11 10:01:05.948 - INFO: [epoch:  2, iter: 199,000, lr:(1.315e-04,)] l_pix: 1.2590e+01 
21-09-11 10:02:50.770 - INFO: [epoch:  2, iter: 199,100, lr:(1.315e-04,)] l_pix: 1.0971e+01 
21-09-11 10:04:35.614 - INFO: [epoch:  2, iter: 199,200, lr:(1.314e-04,)] l_pix: 1.2330e+01 
21-09-11 10:06:20.491 - INFO: [epoch:  2, iter: 199,300, lr:(1.314e-04,)] l_pix: 9.8534e+00 
21-09-11 10:08:05.335 - INFO: [epoch:  2, iter: 199,400, lr:(1.313e-04,)] l_pix: 1.2711e+01 
21-09-11 10:09:50.211 - INFO: [epoch:  2, iter: 199,500, lr:(1.312e-04,)] l_pix: 1.0067e+01 
21-09-11 10:11:34.858 - INFO: [epoch:  2, iter: 199,600, lr:(1.312e-04,)] l_pix: 1.0611e+01 
21-09-11 10:13:19.946 - INFO: [epoch:  2, iter: 199,700, lr:(1.311e-04,)] l_pix: 1.2468e+01 
21-09-11 10:15:05.102 - INFO: [epoch:  2, iter: 199,800, lr:(1.311e-04,)] l_pix: 9.7846e+00 
21-09-11 10:16:50.155 - INFO: [epoch:  2, iter: 199,900, lr:(1.310e-04,)] l_pix: 1.2934e+01 
21-09-11 10:18:35.212 - INFO: [epoch:  2, iter: 200,000, lr:(1.309e-04,)] l_pix: 1.0507e+01 
21-09-11 10:20:41.585 - INFO: # Validation # PSNR: 2.8907e+01
21-09-11 10:20:41.586 - INFO: Saving models and training states.
21-09-11 10:22:27.355 - INFO: [epoch:  2, iter: 200,100, lr:(1.309e-04,)] l_pix: 1.0534e+01 
21-09-11 10:24:12.159 - INFO: [epoch:  2, iter: 200,200, lr:(1.308e-04,)] l_pix: 1.3345e+01 
21-09-11 10:25:57.080 - INFO: [epoch:  2, iter: 200,300, lr:(1.308e-04,)] l_pix: 1.1321e+01 
21-09-11 10:27:41.978 - INFO: [epoch:  2, iter: 200,400, lr:(1.307e-04,)] l_pix: 1.1752e+01 
21-09-11 10:29:26.818 - INFO: [epoch:  2, iter: 200,500, lr:(1.306e-04,)] l_pix: 1.0947e+01 
21-09-11 10:31:11.517 - INFO: [epoch:  2, iter: 200,600, lr:(1.306e-04,)] l_pix: 9.7438e+00 
21-09-11 10:32:56.185 - INFO: [epoch:  2, iter: 200,700, lr:(1.305e-04,)] l_pix: 1.1785e+01 
21-09-11 10:34:40.639 - INFO: [epoch:  2, iter: 200,800, lr:(1.305e-04,)] l_pix: 1.3147e+01 
21-09-11 10:36:25.401 - INFO: [epoch:  2, iter: 200,900, lr:(1.304e-04,)] l_pix: 1.1774e+01 
21-09-11 10:38:10.500 - INFO: [epoch:  2, iter: 201,000, lr:(1.303e-04,)] l_pix: 1.1253e+01 
21-09-11 10:39:55.659 - INFO: [epoch:  2, iter: 201,100, lr:(1.303e-04,)] l_pix: 1.2026e+01 
21-09-11 10:41:40.685 - INFO: [epoch:  2, iter: 201,200, lr:(1.302e-04,)] l_pix: 1.2971e+01 
21-09-11 10:43:25.697 - INFO: [epoch:  2, iter: 201,300, lr:(1.302e-04,)] l_pix: 1.1849e+01 
21-09-11 10:45:10.546 - INFO: [epoch:  2, iter: 201,400, lr:(1.301e-04,)] l_pix: 1.2038e+01 
21-09-11 10:46:55.614 - INFO: [epoch:  2, iter: 201,500, lr:(1.300e-04,)] l_pix: 1.0421e+01 
21-09-11 10:48:40.525 - INFO: [epoch:  2, iter: 201,600, lr:(1.300e-04,)] l_pix: 1.1660e+01 
21-09-11 10:50:25.210 - INFO: [epoch:  2, iter: 201,700, lr:(1.299e-04,)] l_pix: 1.0886e+01 
21-09-11 10:52:09.804 - INFO: [epoch:  2, iter: 201,800, lr:(1.299e-04,)] l_pix: 1.3109e+01 
21-09-11 10:53:54.641 - INFO: [epoch:  2, iter: 201,900, lr:(1.298e-04,)] l_pix: 1.0599e+01 
21-09-11 10:55:39.595 - INFO: [epoch:  2, iter: 202,000, lr:(1.297e-04,)] l_pix: 1.1629e+01 
21-09-11 10:57:24.511 - INFO: [epoch:  2, iter: 202,100, lr:(1.297e-04,)] l_pix: 1.0572e+01 
21-09-11 10:59:09.388 - INFO: [epoch:  2, iter: 202,200, lr:(1.296e-04,)] l_pix: 1.1108e+01 
21-09-11 11:00:54.237 - INFO: [epoch:  2, iter: 202,300, lr:(1.296e-04,)] l_pix: 1.4329e+01 
21-09-11 11:02:38.910 - INFO: [epoch:  2, iter: 202,400, lr:(1.295e-04,)] l_pix: 1.0527e+01 
21-09-11 11:04:23.857 - INFO: [epoch:  2, iter: 202,500, lr:(1.294e-04,)] l_pix: 9.5495e+00 
21-09-11 11:06:08.985 - INFO: [epoch:  2, iter: 202,600, lr:(1.294e-04,)] l_pix: 1.2242e+01 
21-09-11 11:07:54.192 - INFO: [epoch:  2, iter: 202,700, lr:(1.293e-04,)] l_pix: 1.0472e+01 
21-09-11 11:09:39.174 - INFO: [epoch:  2, iter: 202,800, lr:(1.293e-04,)] l_pix: 1.4442e+01 
21-09-11 11:11:24.173 - INFO: [epoch:  2, iter: 202,900, lr:(1.292e-04,)] l_pix: 1.1831e+01 
21-09-11 11:13:09.062 - INFO: [epoch:  2, iter: 203,000, lr:(1.291e-04,)] l_pix: 1.2759e+01 
21-09-11 11:14:54.291 - INFO: [epoch:  2, iter: 203,100, lr:(1.291e-04,)] l_pix: 1.1006e+01 
21-09-11 11:16:39.315 - INFO: [epoch:  2, iter: 203,200, lr:(1.290e-04,)] l_pix: 1.1228e+01 
21-09-11 11:18:24.157 - INFO: [epoch:  2, iter: 203,300, lr:(1.290e-04,)] l_pix: 1.4130e+01 
21-09-11 11:20:08.683 - INFO: [epoch:  2, iter: 203,400, lr:(1.289e-04,)] l_pix: 1.1793e+01 
21-09-11 11:21:53.634 - INFO: [epoch:  2, iter: 203,500, lr:(1.288e-04,)] l_pix: 1.3264e+01 
21-09-11 11:23:38.581 - INFO: [epoch:  2, iter: 203,600, lr:(1.288e-04,)] l_pix: 1.0145e+01 
21-09-11 11:25:23.363 - INFO: [epoch:  2, iter: 203,700, lr:(1.287e-04,)] l_pix: 1.0265e+01 
21-09-11 11:27:08.003 - INFO: [epoch:  2, iter: 203,800, lr:(1.287e-04,)] l_pix: 1.1613e+01 
21-09-11 11:28:52.719 - INFO: [epoch:  2, iter: 203,900, lr:(1.286e-04,)] l_pix: 1.1756e+01 
21-09-11 11:30:37.241 - INFO: [epoch:  2, iter: 204,000, lr:(1.285e-04,)] l_pix: 9.9687e+00 
21-09-11 11:32:22.052 - INFO: [epoch:  2, iter: 204,100, lr:(1.285e-04,)] l_pix: 1.4081e+01 
21-09-11 11:34:07.089 - INFO: [epoch:  2, iter: 204,200, lr:(1.284e-04,)] l_pix: 1.1840e+01 
21-09-11 11:35:52.037 - INFO: [epoch:  2, iter: 204,300, lr:(1.284e-04,)] l_pix: 9.4740e+00 
21-09-11 11:37:37.119 - INFO: [epoch:  2, iter: 204,400, lr:(1.283e-04,)] l_pix: 1.3276e+01 
21-09-11 11:39:21.958 - INFO: [epoch:  2, iter: 204,500, lr:(1.282e-04,)] l_pix: 1.1031e+01 
21-09-11 11:41:07.027 - INFO: [epoch:  2, iter: 204,600, lr:(1.282e-04,)] l_pix: 9.5654e+00 
21-09-11 11:42:52.023 - INFO: [epoch:  2, iter: 204,700, lr:(1.281e-04,)] l_pix: 1.0277e+01 
21-09-11 11:44:37.039 - INFO: [epoch:  2, iter: 204,800, lr:(1.281e-04,)] l_pix: 1.2494e+01 
21-09-11 11:46:21.818 - INFO: [epoch:  2, iter: 204,900, lr:(1.280e-04,)] l_pix: 1.0183e+01 
21-09-11 11:48:06.564 - INFO: [epoch:  2, iter: 205,000, lr:(1.279e-04,)] l_pix: 1.1416e+01 
21-09-11 11:50:13.186 - INFO: # Validation # PSNR: 2.8825e+01
21-09-11 11:50:13.186 - INFO: Saving models and training states.
21-09-11 11:51:59.361 - INFO: [epoch:  2, iter: 205,100, lr:(1.279e-04,)] l_pix: 1.2214e+01 
21-09-11 11:53:44.536 - INFO: [epoch:  2, iter: 205,200, lr:(1.278e-04,)] l_pix: 1.0637e+01 
21-09-11 11:55:29.782 - INFO: [epoch:  2, iter: 205,300, lr:(1.278e-04,)] l_pix: 9.9953e+00 
21-09-11 11:57:14.907 - INFO: [epoch:  2, iter: 205,400, lr:(1.277e-04,)] l_pix: 1.1390e+01 
21-09-11 11:58:59.846 - INFO: [epoch:  2, iter: 205,500, lr:(1.276e-04,)] l_pix: 1.2269e+01 
21-09-11 12:00:44.751 - INFO: [epoch:  2, iter: 205,600, lr:(1.276e-04,)] l_pix: 1.2220e+01 
21-09-11 12:02:29.590 - INFO: [epoch:  2, iter: 205,700, lr:(1.275e-04,)] l_pix: 1.0277e+01 
21-09-11 12:04:14.427 - INFO: [epoch:  2, iter: 205,800, lr:(1.275e-04,)] l_pix: 1.0181e+01 
21-09-11 12:05:59.363 - INFO: [epoch:  2, iter: 205,900, lr:(1.274e-04,)] l_pix: 1.0540e+01 
21-09-11 12:07:44.291 - INFO: [epoch:  2, iter: 206,000, lr:(1.273e-04,)] l_pix: 1.2204e+01 
21-09-11 12:09:29.364 - INFO: [epoch:  2, iter: 206,100, lr:(1.273e-04,)] l_pix: 1.0299e+01 
21-09-11 12:11:14.409 - INFO: [epoch:  2, iter: 206,200, lr:(1.272e-04,)] l_pix: 1.0936e+01 
21-09-11 12:12:59.440 - INFO: [epoch:  2, iter: 206,300, lr:(1.271e-04,)] l_pix: 1.1611e+01 
21-09-11 12:14:44.780 - INFO: [epoch:  2, iter: 206,400, lr:(1.271e-04,)] l_pix: 1.3185e+01 
21-09-11 12:16:29.901 - INFO: [epoch:  2, iter: 206,500, lr:(1.270e-04,)] l_pix: 1.2033e+01 
21-09-11 12:18:15.266 - INFO: [epoch:  2, iter: 206,600, lr:(1.270e-04,)] l_pix: 1.0670e+01 
21-09-11 12:20:00.379 - INFO: [epoch:  2, iter: 206,700, lr:(1.269e-04,)] l_pix: 1.1919e+01 
21-09-11 12:21:45.670 - INFO: [epoch:  2, iter: 206,800, lr:(1.268e-04,)] l_pix: 1.2678e+01 
21-09-11 12:23:30.639 - INFO: [epoch:  2, iter: 206,900, lr:(1.268e-04,)] l_pix: 1.2327e+01 
21-09-11 12:25:15.691 - INFO: [epoch:  2, iter: 207,000, lr:(1.267e-04,)] l_pix: 1.1734e+01 
21-09-11 12:27:00.587 - INFO: [epoch:  2, iter: 207,100, lr:(1.267e-04,)] l_pix: 1.0663e+01 
21-09-11 12:28:45.668 - INFO: [epoch:  2, iter: 207,200, lr:(1.266e-04,)] l_pix: 1.2756e+01 
21-09-11 12:30:30.827 - INFO: [epoch:  2, iter: 207,300, lr:(1.265e-04,)] l_pix: 1.2580e+01 
21-09-11 12:32:15.868 - INFO: [epoch:  2, iter: 207,400, lr:(1.265e-04,)] l_pix: 1.2857e+01 
21-09-11 12:34:00.683 - INFO: [epoch:  2, iter: 207,500, lr:(1.264e-04,)] l_pix: 1.2551e+01 
21-09-11 12:35:45.566 - INFO: [epoch:  2, iter: 207,600, lr:(1.264e-04,)] l_pix: 1.0294e+01 
21-09-11 12:37:30.952 - INFO: [epoch:  2, iter: 207,700, lr:(1.263e-04,)] l_pix: 1.0434e+01 
21-09-11 12:39:16.362 - INFO: [epoch:  2, iter: 207,800, lr:(1.262e-04,)] l_pix: 1.1804e+01 
21-09-11 12:41:01.762 - INFO: [epoch:  2, iter: 207,900, lr:(1.262e-04,)] l_pix: 1.0967e+01 
21-09-11 12:42:47.031 - INFO: [epoch:  2, iter: 208,000, lr:(1.261e-04,)] l_pix: 1.0714e+01 
21-09-11 12:44:32.342 - INFO: [epoch:  2, iter: 208,100, lr:(1.261e-04,)] l_pix: 9.0815e+00 
21-09-11 12:46:17.396 - INFO: [epoch:  2, iter: 208,200, lr:(1.260e-04,)] l_pix: 1.3604e+01 
21-09-11 12:48:02.201 - INFO: [epoch:  2, iter: 208,300, lr:(1.259e-04,)] l_pix: 1.0992e+01 
21-09-11 12:49:46.858 - INFO: [epoch:  2, iter: 208,400, lr:(1.259e-04,)] l_pix: 1.1375e+01 
21-09-11 12:51:31.568 - INFO: [epoch:  2, iter: 208,500, lr:(1.258e-04,)] l_pix: 1.0443e+01 
21-09-11 12:53:16.734 - INFO: [epoch:  2, iter: 208,600, lr:(1.258e-04,)] l_pix: 9.5681e+00 
21-09-11 12:55:02.153 - INFO: [epoch:  2, iter: 208,700, lr:(1.257e-04,)] l_pix: 1.1884e+01 
21-09-11 12:56:47.340 - INFO: [epoch:  2, iter: 208,800, lr:(1.256e-04,)] l_pix: 1.2786e+01 
21-09-11 12:58:32.599 - INFO: [epoch:  2, iter: 208,900, lr:(1.256e-04,)] l_pix: 1.2436e+01 
21-09-11 13:00:17.877 - INFO: [epoch:  2, iter: 209,000, lr:(1.255e-04,)] l_pix: 1.1287e+01 
21-09-11 13:02:03.121 - INFO: [epoch:  2, iter: 209,100, lr:(1.255e-04,)] l_pix: 1.1017e+01 
21-09-11 13:03:48.333 - INFO: [epoch:  2, iter: 209,200, lr:(1.254e-04,)] l_pix: 1.0542e+01 
21-09-11 13:05:33.657 - INFO: [epoch:  2, iter: 209,300, lr:(1.253e-04,)] l_pix: 1.0814e+01 
21-09-11 13:07:18.609 - INFO: [epoch:  2, iter: 209,400, lr:(1.253e-04,)] l_pix: 1.0296e+01 
21-09-11 13:09:03.283 - INFO: [epoch:  2, iter: 209,500, lr:(1.252e-04,)] l_pix: 1.0529e+01 
21-09-11 13:10:48.244 - INFO: [epoch:  2, iter: 209,600, lr:(1.251e-04,)] l_pix: 1.2573e+01 
21-09-11 13:12:33.279 - INFO: [epoch:  2, iter: 209,700, lr:(1.251e-04,)] l_pix: 1.2524e+01 
21-09-11 13:14:18.032 - INFO: [epoch:  2, iter: 209,800, lr:(1.250e-04,)] l_pix: 1.0555e+01 
21-09-11 13:16:02.962 - INFO: [epoch:  2, iter: 209,900, lr:(1.250e-04,)] l_pix: 1.1111e+01 
21-09-11 13:17:47.834 - INFO: [epoch:  2, iter: 210,000, lr:(1.249e-04,)] l_pix: 9.7526e+00 
21-09-11 13:19:53.073 - INFO: # Validation # PSNR: 2.8899e+01
21-09-11 13:19:53.074 - INFO: Saving models and training states.
21-09-11 13:21:39.138 - INFO: [epoch:  2, iter: 210,100, lr:(1.248e-04,)] l_pix: 1.2142e+01 
21-09-11 13:23:24.186 - INFO: [epoch:  2, iter: 210,200, lr:(1.248e-04,)] l_pix: 1.4393e+01 
21-09-11 13:25:09.459 - INFO: [epoch:  2, iter: 210,300, lr:(1.247e-04,)] l_pix: 1.1490e+01 
21-09-11 13:26:54.529 - INFO: [epoch:  2, iter: 210,400, lr:(1.247e-04,)] l_pix: 1.2174e+01 
21-09-11 13:28:39.498 - INFO: [epoch:  2, iter: 210,500, lr:(1.246e-04,)] l_pix: 1.1494e+01 
21-09-11 13:30:24.642 - INFO: [epoch:  2, iter: 210,600, lr:(1.245e-04,)] l_pix: 1.1687e+01 
21-09-11 13:32:09.840 - INFO: [epoch:  2, iter: 210,700, lr:(1.245e-04,)] l_pix: 1.0416e+01 
21-09-11 13:33:55.204 - INFO: [epoch:  2, iter: 210,800, lr:(1.244e-04,)] l_pix: 1.1491e+01 
21-09-11 13:35:40.129 - INFO: [epoch:  2, iter: 210,900, lr:(1.244e-04,)] l_pix: 1.1295e+01 
21-09-11 13:37:24.863 - INFO: [epoch:  2, iter: 211,000, lr:(1.243e-04,)] l_pix: 9.9633e+00 
21-09-11 13:39:09.948 - INFO: [epoch:  2, iter: 211,100, lr:(1.242e-04,)] l_pix: 1.0173e+01 
21-09-11 13:40:55.125 - INFO: [epoch:  2, iter: 211,200, lr:(1.242e-04,)] l_pix: 1.3074e+01 
21-09-11 13:42:40.192 - INFO: [epoch:  2, iter: 211,300, lr:(1.241e-04,)] l_pix: 1.3862e+01 
21-09-11 13:44:25.088 - INFO: [epoch:  2, iter: 211,400, lr:(1.241e-04,)] l_pix: 1.1868e+01 
21-09-11 13:46:09.783 - INFO: [epoch:  2, iter: 211,500, lr:(1.240e-04,)] l_pix: 1.1488e+01 
21-09-11 13:47:54.620 - INFO: [epoch:  2, iter: 211,600, lr:(1.239e-04,)] l_pix: 1.2859e+01 
21-09-11 13:49:39.839 - INFO: [epoch:  2, iter: 211,700, lr:(1.239e-04,)] l_pix: 9.4081e+00 
21-09-11 13:51:25.112 - INFO: [epoch:  2, iter: 211,800, lr:(1.238e-04,)] l_pix: 1.0827e+01 
21-09-11 13:53:10.547 - INFO: [epoch:  2, iter: 211,900, lr:(1.237e-04,)] l_pix: 1.2472e+01 
21-09-11 13:54:55.874 - INFO: [epoch:  2, iter: 212,000, lr:(1.237e-04,)] l_pix: 1.1308e+01 
21-09-11 13:56:41.086 - INFO: [epoch:  2, iter: 212,100, lr:(1.236e-04,)] l_pix: 1.3465e+01 
21-09-11 13:58:26.226 - INFO: [epoch:  2, iter: 212,200, lr:(1.236e-04,)] l_pix: 1.1480e+01 
21-09-11 14:00:11.221 - INFO: [epoch:  2, iter: 212,300, lr:(1.235e-04,)] l_pix: 1.2188e+01 
21-09-11 14:01:56.188 - INFO: [epoch:  2, iter: 212,400, lr:(1.234e-04,)] l_pix: 1.2033e+01 
21-09-11 14:03:41.218 - INFO: [epoch:  2, iter: 212,500, lr:(1.234e-04,)] l_pix: 1.1293e+01 
21-09-11 14:05:22.923 - INFO: [epoch:  2, iter: 212,600, lr:(1.233e-04,)] l_pix: 1.1986e+01 
21-09-11 14:07:03.498 - INFO: [epoch:  2, iter: 212,700, lr:(1.233e-04,)] l_pix: 1.1192e+01 
21-09-11 14:08:44.502 - INFO: [epoch:  2, iter: 212,800, lr:(1.232e-04,)] l_pix: 1.2818e+01 
21-09-11 14:10:27.854 - INFO: [epoch:  2, iter: 212,900, lr:(1.231e-04,)] l_pix: 1.0607e+01 
21-09-11 14:12:10.326 - INFO: [epoch:  2, iter: 213,000, lr:(1.231e-04,)] l_pix: 1.2653e+01 
21-09-11 14:13:52.845 - INFO: [epoch:  2, iter: 213,100, lr:(1.230e-04,)] l_pix: 1.1517e+01 
21-09-11 14:15:35.698 - INFO: [epoch:  2, iter: 213,200, lr:(1.230e-04,)] l_pix: 1.2317e+01 
21-09-11 14:17:18.713 - INFO: [epoch:  2, iter: 213,300, lr:(1.229e-04,)] l_pix: 1.3444e+01 
21-09-11 14:19:01.607 - INFO: [epoch:  2, iter: 213,400, lr:(1.228e-04,)] l_pix: 1.3281e+01 
21-09-11 14:20:44.173 - INFO: [epoch:  2, iter: 213,500, lr:(1.228e-04,)] l_pix: 1.0216e+01 
21-09-11 14:22:26.720 - INFO: [epoch:  2, iter: 213,600, lr:(1.227e-04,)] l_pix: 1.1700e+01 
21-09-11 14:24:09.511 - INFO: [epoch:  2, iter: 213,700, lr:(1.226e-04,)] l_pix: 1.2478e+01 
21-09-11 14:25:51.721 - INFO: [epoch:  2, iter: 213,800, lr:(1.226e-04,)] l_pix: 1.1625e+01 
21-09-11 14:27:34.062 - INFO: [epoch:  2, iter: 213,900, lr:(1.225e-04,)] l_pix: 1.1875e+01 
21-09-11 14:29:17.031 - INFO: [epoch:  2, iter: 214,000, lr:(1.225e-04,)] l_pix: 1.1844e+01 
21-09-11 14:31:00.227 - INFO: [epoch:  2, iter: 214,100, lr:(1.224e-04,)] l_pix: 1.0964e+01 
21-09-11 14:32:43.237 - INFO: [epoch:  2, iter: 214,200, lr:(1.223e-04,)] l_pix: 1.0306e+01 
21-09-11 14:34:26.778 - INFO: [epoch:  2, iter: 214,300, lr:(1.223e-04,)] l_pix: 1.2489e+01 
21-09-11 14:36:09.498 - INFO: [epoch:  2, iter: 214,400, lr:(1.222e-04,)] l_pix: 1.2848e+01 
21-09-11 14:37:52.100 - INFO: [epoch:  2, iter: 214,500, lr:(1.222e-04,)] l_pix: 1.2076e+01 
21-09-11 14:39:34.791 - INFO: [epoch:  2, iter: 214,600, lr:(1.221e-04,)] l_pix: 1.2394e+01 
21-09-11 14:41:17.508 - INFO: [epoch:  2, iter: 214,700, lr:(1.220e-04,)] l_pix: 1.1636e+01 
21-09-11 14:43:00.116 - INFO: [epoch:  2, iter: 214,800, lr:(1.220e-04,)] l_pix: 1.1032e+01 
21-09-11 14:44:43.061 - INFO: [epoch:  2, iter: 214,900, lr:(1.219e-04,)] l_pix: 1.2338e+01 
21-09-11 14:46:26.240 - INFO: [epoch:  2, iter: 215,000, lr:(1.219e-04,)] l_pix: 1.0200e+01 
21-09-11 14:48:30.652 - INFO: # Validation # PSNR: 2.8877e+01
21-09-11 14:48:30.652 - INFO: Saving models and training states.
21-09-11 14:50:15.056 - INFO: [epoch:  2, iter: 215,100, lr:(1.218e-04,)] l_pix: 1.2485e+01 
21-09-11 14:51:58.224 - INFO: [epoch:  2, iter: 215,200, lr:(1.217e-04,)] l_pix: 1.1141e+01 
21-09-11 14:53:40.843 - INFO: [epoch:  2, iter: 215,300, lr:(1.217e-04,)] l_pix: 1.0163e+01 
21-09-11 14:55:23.488 - INFO: [epoch:  2, iter: 215,400, lr:(1.216e-04,)] l_pix: 9.4487e+00 
21-09-11 14:57:05.889 - INFO: [epoch:  2, iter: 215,500, lr:(1.215e-04,)] l_pix: 1.1351e+01 
21-09-11 14:58:48.560 - INFO: [epoch:  2, iter: 215,600, lr:(1.215e-04,)] l_pix: 1.2071e+01 
21-09-11 15:00:31.109 - INFO: [epoch:  2, iter: 215,700, lr:(1.214e-04,)] l_pix: 1.1739e+01 
21-09-11 15:02:13.760 - INFO: [epoch:  2, iter: 215,800, lr:(1.214e-04,)] l_pix: 9.1871e+00 
21-09-11 15:03:56.700 - INFO: [epoch:  2, iter: 215,900, lr:(1.213e-04,)] l_pix: 1.4107e+01 
21-09-11 15:05:40.499 - INFO: [epoch:  2, iter: 216,000, lr:(1.212e-04,)] l_pix: 1.4634e+01 
21-09-11 15:07:23.940 - INFO: [epoch:  2, iter: 216,100, lr:(1.212e-04,)] l_pix: 1.1656e+01 
21-09-11 15:09:06.561 - INFO: [epoch:  2, iter: 216,200, lr:(1.211e-04,)] l_pix: 1.1714e+01 
21-09-11 15:10:47.561 - INFO: [epoch:  2, iter: 216,300, lr:(1.211e-04,)] l_pix: 1.0608e+01 
21-09-11 15:12:28.328 - INFO: [epoch:  2, iter: 216,400, lr:(1.210e-04,)] l_pix: 1.1634e+01 
21-09-11 15:14:08.950 - INFO: [epoch:  2, iter: 216,500, lr:(1.209e-04,)] l_pix: 1.2049e+01 
21-09-11 15:15:49.234 - INFO: [epoch:  2, iter: 216,600, lr:(1.209e-04,)] l_pix: 1.0567e+01 
21-09-11 15:17:30.086 - INFO: [epoch:  2, iter: 216,700, lr:(1.208e-04,)] l_pix: 1.1018e+01 
21-09-11 15:19:10.711 - INFO: [epoch:  2, iter: 216,800, lr:(1.207e-04,)] l_pix: 1.2053e+01 
21-09-11 15:20:51.473 - INFO: [epoch:  2, iter: 216,900, lr:(1.207e-04,)] l_pix: 1.4570e+01 
21-09-11 15:22:32.481 - INFO: [epoch:  2, iter: 217,000, lr:(1.206e-04,)] l_pix: 1.0156e+01 
21-09-11 15:24:13.787 - INFO: [epoch:  2, iter: 217,100, lr:(1.206e-04,)] l_pix: 1.1400e+01 
21-09-11 15:25:54.710 - INFO: [epoch:  2, iter: 217,200, lr:(1.205e-04,)] l_pix: 1.1486e+01 
21-09-11 15:27:35.929 - INFO: [epoch:  2, iter: 217,300, lr:(1.204e-04,)] l_pix: 1.3332e+01 
21-09-11 15:29:16.679 - INFO: [epoch:  2, iter: 217,400, lr:(1.204e-04,)] l_pix: 1.1439e+01 
21-09-11 15:30:57.451 - INFO: [epoch:  2, iter: 217,500, lr:(1.203e-04,)] l_pix: 1.1416e+01 
21-09-11 15:32:38.130 - INFO: [epoch:  2, iter: 217,600, lr:(1.203e-04,)] l_pix: 1.0747e+01 
21-09-11 15:34:18.495 - INFO: [epoch:  2, iter: 217,700, lr:(1.202e-04,)] l_pix: 1.0523e+01 
21-09-11 15:35:59.491 - INFO: [epoch:  2, iter: 217,800, lr:(1.201e-04,)] l_pix: 1.3772e+01 
21-09-11 15:37:40.193 - INFO: [epoch:  2, iter: 217,900, lr:(1.201e-04,)] l_pix: 1.2356e+01 
21-09-11 15:39:21.053 - INFO: [epoch:  2, iter: 218,000, lr:(1.200e-04,)] l_pix: 1.1198e+01 
21-09-11 15:41:02.535 - INFO: [epoch:  2, iter: 218,100, lr:(1.199e-04,)] l_pix: 1.1634e+01 
21-09-11 15:42:43.690 - INFO: [epoch:  2, iter: 218,200, lr:(1.199e-04,)] l_pix: 1.0970e+01 
21-09-11 15:44:24.493 - INFO: [epoch:  2, iter: 218,300, lr:(1.198e-04,)] l_pix: 1.0348e+01 
21-09-11 15:46:05.858 - INFO: [epoch:  2, iter: 218,400, lr:(1.198e-04,)] l_pix: 1.0366e+01 
21-09-11 15:47:47.706 - INFO: [epoch:  2, iter: 218,500, lr:(1.197e-04,)] l_pix: 1.3308e+01 
21-09-11 15:49:29.099 - INFO: [epoch:  2, iter: 218,600, lr:(1.196e-04,)] l_pix: 1.2195e+01 
21-09-11 15:51:10.154 - INFO: [epoch:  2, iter: 218,700, lr:(1.196e-04,)] l_pix: 1.1066e+01 
21-09-11 15:52:50.441 - INFO: [epoch:  2, iter: 218,800, lr:(1.195e-04,)] l_pix: 9.8010e+00 
21-09-11 15:54:31.034 - INFO: [epoch:  2, iter: 218,900, lr:(1.195e-04,)] l_pix: 1.1194e+01 
21-09-11 15:56:11.599 - INFO: [epoch:  2, iter: 219,000, lr:(1.194e-04,)] l_pix: 9.9563e+00 
21-09-11 15:57:52.506 - INFO: [epoch:  2, iter: 219,100, lr:(1.193e-04,)] l_pix: 1.3536e+01 
21-09-11 15:59:34.892 - INFO: [epoch:  2, iter: 219,200, lr:(1.193e-04,)] l_pix: 1.2255e+01 
21-09-11 16:01:15.908 - INFO: [epoch:  2, iter: 219,300, lr:(1.192e-04,)] l_pix: 1.0077e+01 
21-09-11 16:02:56.814 - INFO: [epoch:  2, iter: 219,400, lr:(1.191e-04,)] l_pix: 1.2626e+01 
21-09-11 16:04:37.380 - INFO: [epoch:  2, iter: 219,500, lr:(1.191e-04,)] l_pix: 1.2310e+01 
21-09-11 16:06:17.982 - INFO: [epoch:  2, iter: 219,600, lr:(1.190e-04,)] l_pix: 1.1373e+01 
21-09-11 16:07:58.579 - INFO: [epoch:  2, iter: 219,700, lr:(1.190e-04,)] l_pix: 1.1358e+01 
21-09-11 16:09:39.319 - INFO: [epoch:  2, iter: 219,800, lr:(1.189e-04,)] l_pix: 1.0348e+01 
21-09-11 16:11:19.797 - INFO: [epoch:  2, iter: 219,900, lr:(1.188e-04,)] l_pix: 1.0879e+01 
21-09-11 16:13:00.425 - INFO: [epoch:  2, iter: 220,000, lr:(1.188e-04,)] l_pix: 1.1926e+01 
21-09-11 16:15:02.714 - INFO: # Validation # PSNR: 2.8858e+01
21-09-11 16:15:02.714 - INFO: Saving models and training states.
21-09-11 16:16:44.659 - INFO: [epoch:  2, iter: 220,100, lr:(1.187e-04,)] l_pix: 1.1201e+01 
21-09-11 16:18:25.813 - INFO: [epoch:  2, iter: 220,200, lr:(1.187e-04,)] l_pix: 1.0145e+01 
21-09-11 16:20:06.852 - INFO: [epoch:  2, iter: 220,300, lr:(1.186e-04,)] l_pix: 1.2043e+01 
21-09-11 16:21:51.142 - INFO: [epoch:  2, iter: 220,400, lr:(1.185e-04,)] l_pix: 1.2153e+01 
21-09-11 16:23:34.756 - INFO: [epoch:  2, iter: 220,500, lr:(1.185e-04,)] l_pix: 9.6175e+00 
21-09-11 16:25:19.274 - INFO: [epoch:  2, iter: 220,600, lr:(1.184e-04,)] l_pix: 1.0133e+01 
21-09-11 16:27:01.179 - INFO: [epoch:  2, iter: 220,700, lr:(1.183e-04,)] l_pix: 1.1882e+01 
21-09-11 16:28:44.039 - INFO: [epoch:  2, iter: 220,800, lr:(1.183e-04,)] l_pix: 1.3330e+01 
21-09-11 16:30:28.496 - INFO: [epoch:  2, iter: 220,900, lr:(1.182e-04,)] l_pix: 1.3400e+01 
21-09-11 16:32:13.063 - INFO: [epoch:  2, iter: 221,000, lr:(1.182e-04,)] l_pix: 1.0909e+01 
21-09-11 16:33:57.285 - INFO: [epoch:  2, iter: 221,100, lr:(1.181e-04,)] l_pix: 1.2493e+01 
21-09-11 16:35:41.663 - INFO: [epoch:  2, iter: 221,200, lr:(1.180e-04,)] l_pix: 1.1419e+01 
21-09-11 16:37:26.217 - INFO: [epoch:  2, iter: 221,300, lr:(1.180e-04,)] l_pix: 1.4329e+01 
21-09-11 16:39:09.813 - INFO: [epoch:  2, iter: 221,400, lr:(1.179e-04,)] l_pix: 1.1902e+01 
21-09-11 16:40:50.559 - INFO: [epoch:  2, iter: 221,500, lr:(1.179e-04,)] l_pix: 1.2726e+01 
21-09-11 16:42:30.833 - INFO: [epoch:  2, iter: 221,600, lr:(1.178e-04,)] l_pix: 1.0543e+01 
21-09-11 16:44:12.940 - INFO: [epoch:  2, iter: 221,700, lr:(1.177e-04,)] l_pix: 1.1579e+01 
21-09-11 16:45:57.513 - INFO: [epoch:  2, iter: 221,800, lr:(1.177e-04,)] l_pix: 1.1401e+01 
21-09-11 16:47:41.955 - INFO: [epoch:  2, iter: 221,900, lr:(1.176e-04,)] l_pix: 1.3246e+01 
21-09-11 16:49:26.388 - INFO: [epoch:  2, iter: 222,000, lr:(1.175e-04,)] l_pix: 1.0927e+01 
21-09-11 16:51:10.168 - INFO: [epoch:  2, iter: 222,100, lr:(1.175e-04,)] l_pix: 1.0772e+01 
21-09-11 16:52:52.473 - INFO: [epoch:  2, iter: 222,200, lr:(1.174e-04,)] l_pix: 1.3483e+01 
21-09-11 16:54:33.523 - INFO: [epoch:  2, iter: 222,300, lr:(1.174e-04,)] l_pix: 9.1947e+00 
21-09-11 16:56:14.975 - INFO: [epoch:  2, iter: 222,400, lr:(1.173e-04,)] l_pix: 1.2409e+01 
21-09-11 16:57:55.683 - INFO: [epoch:  2, iter: 222,500, lr:(1.172e-04,)] l_pix: 1.1480e+01 
21-09-11 16:59:36.140 - INFO: [epoch:  2, iter: 222,600, lr:(1.172e-04,)] l_pix: 1.1213e+01 
21-09-11 17:01:16.734 - INFO: [epoch:  2, iter: 222,700, lr:(1.171e-04,)] l_pix: 1.1723e+01 
21-09-11 17:02:57.728 - INFO: [epoch:  2, iter: 222,800, lr:(1.170e-04,)] l_pix: 1.1465e+01 
21-09-11 17:04:38.607 - INFO: [epoch:  2, iter: 222,900, lr:(1.170e-04,)] l_pix: 1.2650e+01 
21-09-11 17:06:19.428 - INFO: [epoch:  2, iter: 223,000, lr:(1.169e-04,)] l_pix: 1.0830e+01 
21-09-11 17:08:00.881 - INFO: [epoch:  2, iter: 223,100, lr:(1.169e-04,)] l_pix: 1.2137e+01 
21-09-11 17:09:41.868 - INFO: [epoch:  2, iter: 223,200, lr:(1.168e-04,)] l_pix: 1.1744e+01 
21-09-11 17:11:22.788 - INFO: [epoch:  2, iter: 223,300, lr:(1.167e-04,)] l_pix: 1.2049e+01 
21-09-11 17:13:04.433 - INFO: [epoch:  2, iter: 223,400, lr:(1.167e-04,)] l_pix: 1.2990e+01 
21-09-11 17:14:48.528 - INFO: [epoch:  2, iter: 223,500, lr:(1.166e-04,)] l_pix: 1.0171e+01 
21-09-11 17:16:32.961 - INFO: [epoch:  2, iter: 223,600, lr:(1.166e-04,)] l_pix: 1.0842e+01 
21-09-11 17:18:17.387 - INFO: [epoch:  2, iter: 223,700, lr:(1.165e-04,)] l_pix: 9.7857e+00 
21-09-11 17:20:02.013 - INFO: [epoch:  2, iter: 223,800, lr:(1.164e-04,)] l_pix: 1.3502e+01 
21-09-11 17:21:46.665 - INFO: [epoch:  2, iter: 223,900, lr:(1.164e-04,)] l_pix: 1.2385e+01 
21-09-11 17:23:31.127 - INFO: [epoch:  2, iter: 224,000, lr:(1.163e-04,)] l_pix: 1.2283e+01 
21-09-11 17:25:15.368 - INFO: [epoch:  2, iter: 224,100, lr:(1.162e-04,)] l_pix: 1.1765e+01 
21-09-11 17:26:59.781 - INFO: [epoch:  2, iter: 224,200, lr:(1.162e-04,)] l_pix: 1.1529e+01 
21-09-11 17:28:42.644 - INFO: [epoch:  2, iter: 224,300, lr:(1.161e-04,)] l_pix: 1.0731e+01 
21-09-11 17:30:24.197 - INFO: [epoch:  2, iter: 224,400, lr:(1.161e-04,)] l_pix: 1.2503e+01 
21-09-11 17:32:08.423 - INFO: [epoch:  2, iter: 224,500, lr:(1.160e-04,)] l_pix: 1.1176e+01 
21-09-11 17:33:52.474 - INFO: [epoch:  2, iter: 224,600, lr:(1.159e-04,)] l_pix: 1.0701e+01 
21-09-11 17:35:36.750 - INFO: [epoch:  2, iter: 224,700, lr:(1.159e-04,)] l_pix: 1.2015e+01 
21-09-11 17:37:20.981 - INFO: [epoch:  2, iter: 224,800, lr:(1.158e-04,)] l_pix: 1.1279e+01 
21-09-11 17:39:05.067 - INFO: [epoch:  2, iter: 224,900, lr:(1.157e-04,)] l_pix: 1.0234e+01 
21-09-11 17:40:49.032 - INFO: [epoch:  2, iter: 225,000, lr:(1.157e-04,)] l_pix: 1.2197e+01 
21-09-11 17:42:54.673 - INFO: # Validation # PSNR: 2.8954e+01
21-09-11 17:42:54.673 - INFO: Saving models and training states.
21-09-11 17:44:39.722 - INFO: [epoch:  2, iter: 225,100, lr:(1.156e-04,)] l_pix: 1.1246e+01 
21-09-11 17:46:22.580 - INFO: [epoch:  2, iter: 225,200, lr:(1.156e-04,)] l_pix: 1.1968e+01 
21-09-11 17:48:03.543 - INFO: [epoch:  2, iter: 225,300, lr:(1.155e-04,)] l_pix: 1.0657e+01 
21-09-11 17:49:44.579 - INFO: [epoch:  2, iter: 225,400, lr:(1.154e-04,)] l_pix: 1.0427e+01 
21-09-11 17:51:27.454 - INFO: [epoch:  2, iter: 225,500, lr:(1.154e-04,)] l_pix: 9.2746e+00 
21-09-11 17:53:11.720 - INFO: [epoch:  2, iter: 225,600, lr:(1.153e-04,)] l_pix: 1.5803e+01 
21-09-11 17:54:53.293 - INFO: [epoch:  2, iter: 225,700, lr:(1.153e-04,)] l_pix: 1.2244e+01 
21-09-11 17:56:33.819 - INFO: [epoch:  2, iter: 225,800, lr:(1.152e-04,)] l_pix: 1.4782e+01 
21-09-11 17:58:14.332 - INFO: [epoch:  2, iter: 225,900, lr:(1.151e-04,)] l_pix: 1.1763e+01 
21-09-11 17:59:54.799 - INFO: [epoch:  2, iter: 226,000, lr:(1.151e-04,)] l_pix: 1.1641e+01 
21-09-11 18:01:37.921 - INFO: [epoch:  2, iter: 226,100, lr:(1.150e-04,)] l_pix: 1.0725e+01 
21-09-11 18:03:22.120 - INFO: [epoch:  2, iter: 226,200, lr:(1.149e-04,)] l_pix: 1.0683e+01 
21-09-11 18:05:06.284 - INFO: [epoch:  2, iter: 226,300, lr:(1.149e-04,)] l_pix: 1.2844e+01 
21-09-11 18:06:50.401 - INFO: [epoch:  2, iter: 226,400, lr:(1.148e-04,)] l_pix: 1.0950e+01 
21-09-11 18:08:34.694 - INFO: [epoch:  2, iter: 226,500, lr:(1.148e-04,)] l_pix: 1.2248e+01 
21-09-11 18:10:19.250 - INFO: [epoch:  2, iter: 226,600, lr:(1.147e-04,)] l_pix: 1.1481e+01 
21-09-11 18:12:03.762 - INFO: [epoch:  2, iter: 226,700, lr:(1.146e-04,)] l_pix: 1.2792e+01 
21-09-11 18:13:48.159 - INFO: [epoch:  2, iter: 226,800, lr:(1.146e-04,)] l_pix: 1.1902e+01 
21-09-11 18:15:32.623 - INFO: [epoch:  2, iter: 226,900, lr:(1.145e-04,)] l_pix: 1.0326e+01 
21-09-11 18:17:17.097 - INFO: [epoch:  2, iter: 227,000, lr:(1.144e-04,)] l_pix: 1.2666e+01 
21-09-11 18:19:01.732 - INFO: [epoch:  2, iter: 227,100, lr:(1.144e-04,)] l_pix: 1.0258e+01 
21-09-11 18:20:46.209 - INFO: [epoch:  2, iter: 227,200, lr:(1.143e-04,)] l_pix: 9.9663e+00 
21-09-11 18:22:30.958 - INFO: [epoch:  2, iter: 227,300, lr:(1.143e-04,)] l_pix: 1.2024e+01 
21-09-11 18:24:15.880 - INFO: [epoch:  2, iter: 227,400, lr:(1.142e-04,)] l_pix: 1.2918e+01 
21-09-11 18:26:00.780 - INFO: [epoch:  2, iter: 227,500, lr:(1.141e-04,)] l_pix: 1.2428e+01 
21-09-11 18:27:45.480 - INFO: [epoch:  2, iter: 227,600, lr:(1.141e-04,)] l_pix: 1.1893e+01 
21-09-11 18:29:30.280 - INFO: [epoch:  2, iter: 227,700, lr:(1.140e-04,)] l_pix: 1.2267e+01 
21-09-11 18:31:15.161 - INFO: [epoch:  2, iter: 227,800, lr:(1.139e-04,)] l_pix: 1.0381e+01 
21-09-11 18:32:59.894 - INFO: [epoch:  2, iter: 227,900, lr:(1.139e-04,)] l_pix: 1.1110e+01 
21-09-11 18:34:44.521 - INFO: [epoch:  2, iter: 228,000, lr:(1.138e-04,)] l_pix: 1.1621e+01 
21-09-11 18:36:29.097 - INFO: [epoch:  2, iter: 228,100, lr:(1.138e-04,)] l_pix: 1.1878e+01 
21-09-11 18:38:13.666 - INFO: [epoch:  2, iter: 228,200, lr:(1.137e-04,)] l_pix: 1.1966e+01 
21-09-11 18:39:58.234 - INFO: [epoch:  2, iter: 228,300, lr:(1.136e-04,)] l_pix: 1.2277e+01 
21-09-11 18:41:42.558 - INFO: [epoch:  2, iter: 228,400, lr:(1.136e-04,)] l_pix: 1.0121e+01 
21-09-11 18:43:26.861 - INFO: [epoch:  2, iter: 228,500, lr:(1.135e-04,)] l_pix: 1.2463e+01 
21-09-11 18:45:10.757 - INFO: [epoch:  2, iter: 228,600, lr:(1.134e-04,)] l_pix: 1.2279e+01 
21-09-11 18:46:54.684 - INFO: [epoch:  2, iter: 228,700, lr:(1.134e-04,)] l_pix: 1.0268e+01 
21-09-11 18:48:38.617 - INFO: [epoch:  2, iter: 228,800, lr:(1.133e-04,)] l_pix: 1.2530e+01 
21-09-11 18:50:22.718 - INFO: [epoch:  2, iter: 228,900, lr:(1.133e-04,)] l_pix: 1.1243e+01 
21-09-11 18:52:06.436 - INFO: [epoch:  2, iter: 229,000, lr:(1.132e-04,)] l_pix: 1.1729e+01 
21-09-11 18:53:50.452 - INFO: [epoch:  2, iter: 229,100, lr:(1.131e-04,)] l_pix: 1.3071e+01 
21-09-11 18:55:34.584 - INFO: [epoch:  2, iter: 229,200, lr:(1.131e-04,)] l_pix: 1.1585e+01 
21-09-11 18:57:18.857 - INFO: [epoch:  2, iter: 229,300, lr:(1.130e-04,)] l_pix: 1.1231e+01 
21-09-11 18:59:03.137 - INFO: [epoch:  2, iter: 229,400, lr:(1.130e-04,)] l_pix: 1.1056e+01 
21-09-11 19:00:47.153 - INFO: [epoch:  2, iter: 229,500, lr:(1.129e-04,)] l_pix: 1.2016e+01 
21-09-11 19:02:30.995 - INFO: [epoch:  2, iter: 229,600, lr:(1.128e-04,)] l_pix: 1.1487e+01 
21-09-11 19:04:14.946 - INFO: [epoch:  2, iter: 229,700, lr:(1.128e-04,)] l_pix: 1.1888e+01 
21-09-11 19:05:58.987 - INFO: [epoch:  2, iter: 229,800, lr:(1.127e-04,)] l_pix: 1.2237e+01 
21-09-11 19:07:43.272 - INFO: [epoch:  2, iter: 229,900, lr:(1.126e-04,)] l_pix: 1.1496e+01 
21-09-11 19:09:27.549 - INFO: [epoch:  2, iter: 230,000, lr:(1.126e-04,)] l_pix: 1.2489e+01 
21-09-11 19:11:33.100 - INFO: # Validation # PSNR: 2.8849e+01
21-09-11 19:11:33.101 - INFO: Saving models and training states.
21-09-11 19:13:18.470 - INFO: [epoch:  2, iter: 230,100, lr:(1.125e-04,)] l_pix: 1.1799e+01 
21-09-11 19:15:02.566 - INFO: [epoch:  2, iter: 230,200, lr:(1.125e-04,)] l_pix: 1.0615e+01 
21-09-11 19:16:46.665 - INFO: [epoch:  2, iter: 230,300, lr:(1.124e-04,)] l_pix: 1.1845e+01 
21-09-11 19:18:30.864 - INFO: [epoch:  2, iter: 230,400, lr:(1.123e-04,)] l_pix: 1.0410e+01 
21-09-11 19:20:14.932 - INFO: [epoch:  2, iter: 230,500, lr:(1.123e-04,)] l_pix: 1.1005e+01 
21-09-11 19:21:59.091 - INFO: [epoch:  2, iter: 230,600, lr:(1.122e-04,)] l_pix: 1.1802e+01 
21-09-11 19:23:43.158 - INFO: [epoch:  2, iter: 230,700, lr:(1.121e-04,)] l_pix: 1.2593e+01 
21-09-11 19:25:27.239 - INFO: [epoch:  2, iter: 230,800, lr:(1.121e-04,)] l_pix: 9.8002e+00 
21-09-11 19:27:11.510 - INFO: [epoch:  2, iter: 230,900, lr:(1.120e-04,)] l_pix: 1.3423e+01 
21-09-11 19:28:55.402 - INFO: [epoch:  2, iter: 231,000, lr:(1.120e-04,)] l_pix: 1.0071e+01 
21-09-11 19:30:39.067 - INFO: [epoch:  2, iter: 231,100, lr:(1.119e-04,)] l_pix: 1.0592e+01 
21-09-11 19:32:23.125 - INFO: [epoch:  2, iter: 231,200, lr:(1.118e-04,)] l_pix: 1.2624e+01 
21-09-11 19:34:07.335 - INFO: [epoch:  2, iter: 231,300, lr:(1.118e-04,)] l_pix: 1.2369e+01 
21-09-11 19:35:51.539 - INFO: [epoch:  2, iter: 231,400, lr:(1.117e-04,)] l_pix: 1.1916e+01 
21-09-11 19:37:35.829 - INFO: [epoch:  3, iter: 231,500, lr:(1.116e-04,)] l_pix: 1.1758e+01 
21-09-11 19:39:20.012 - INFO: [epoch:  3, iter: 231,600, lr:(1.116e-04,)] l_pix: 1.1889e+01 
21-09-11 19:41:04.181 - INFO: [epoch:  3, iter: 231,700, lr:(1.115e-04,)] l_pix: 1.1415e+01 
21-09-11 19:42:48.142 - INFO: [epoch:  3, iter: 231,800, lr:(1.115e-04,)] l_pix: 9.9835e+00 
21-09-11 19:44:32.113 - INFO: [epoch:  3, iter: 231,900, lr:(1.114e-04,)] l_pix: 1.2284e+01 
21-09-11 19:46:16.134 - INFO: [epoch:  3, iter: 232,000, lr:(1.113e-04,)] l_pix: 1.0424e+01 
21-09-11 19:47:59.745 - INFO: [epoch:  3, iter: 232,100, lr:(1.113e-04,)] l_pix: 1.2855e+01 
21-09-11 19:49:43.730 - INFO: [epoch:  3, iter: 232,200, lr:(1.112e-04,)] l_pix: 1.2762e+01 
21-09-11 19:51:27.720 - INFO: [epoch:  3, iter: 232,300, lr:(1.111e-04,)] l_pix: 1.2018e+01 
21-09-11 19:53:11.895 - INFO: [epoch:  3, iter: 232,400, lr:(1.111e-04,)] l_pix: 1.1290e+01 
21-09-11 19:54:56.103 - INFO: [epoch:  3, iter: 232,500, lr:(1.110e-04,)] l_pix: 1.1125e+01 
21-09-11 19:56:39.855 - INFO: [epoch:  3, iter: 232,600, lr:(1.110e-04,)] l_pix: 1.0753e+01 
21-09-11 19:58:23.844 - INFO: [epoch:  3, iter: 232,700, lr:(1.109e-04,)] l_pix: 1.3021e+01 
21-09-11 20:00:08.340 - INFO: [epoch:  3, iter: 232,800, lr:(1.108e-04,)] l_pix: 1.1912e+01 
21-09-11 20:01:52.731 - INFO: [epoch:  3, iter: 232,900, lr:(1.108e-04,)] l_pix: 1.0871e+01 
21-09-11 20:03:36.909 - INFO: [epoch:  3, iter: 233,000, lr:(1.107e-04,)] l_pix: 1.2070e+01 
21-09-11 20:05:21.143 - INFO: [epoch:  3, iter: 233,100, lr:(1.106e-04,)] l_pix: 1.1212e+01 
21-09-11 20:07:05.071 - INFO: [epoch:  3, iter: 233,200, lr:(1.106e-04,)] l_pix: 1.2440e+01 
21-09-11 20:08:48.953 - INFO: [epoch:  3, iter: 233,300, lr:(1.105e-04,)] l_pix: 1.3839e+01 
21-09-11 20:10:32.917 - INFO: [epoch:  3, iter: 233,400, lr:(1.105e-04,)] l_pix: 1.0382e+01 
21-09-11 20:12:16.934 - INFO: [epoch:  3, iter: 233,500, lr:(1.104e-04,)] l_pix: 1.5464e+01 
21-09-11 20:14:00.755 - INFO: [epoch:  3, iter: 233,600, lr:(1.103e-04,)] l_pix: 1.2187e+01 
21-09-11 20:15:44.901 - INFO: [epoch:  3, iter: 233,700, lr:(1.103e-04,)] l_pix: 1.0531e+01 
21-09-11 20:17:28.786 - INFO: [epoch:  3, iter: 233,800, lr:(1.102e-04,)] l_pix: 1.2401e+01 
21-09-11 20:19:12.733 - INFO: [epoch:  3, iter: 233,900, lr:(1.101e-04,)] l_pix: 1.2139e+01 
21-09-11 20:20:56.874 - INFO: [epoch:  3, iter: 234,000, lr:(1.101e-04,)] l_pix: 1.0244e+01 
21-09-11 20:22:41.247 - INFO: [epoch:  3, iter: 234,100, lr:(1.100e-04,)] l_pix: 1.1372e+01 
21-09-11 20:24:25.517 - INFO: [epoch:  3, iter: 234,200, lr:(1.100e-04,)] l_pix: 1.2596e+01 
21-09-11 20:26:09.741 - INFO: [epoch:  3, iter: 234,300, lr:(1.099e-04,)] l_pix: 1.1370e+01 
21-09-11 20:27:53.852 - INFO: [epoch:  3, iter: 234,400, lr:(1.098e-04,)] l_pix: 1.2556e+01 
21-09-11 20:29:37.979 - INFO: [epoch:  3, iter: 234,500, lr:(1.098e-04,)] l_pix: 1.0890e+01 
21-09-11 20:31:22.026 - INFO: [epoch:  3, iter: 234,600, lr:(1.097e-04,)] l_pix: 1.1785e+01 
21-09-11 20:33:06.192 - INFO: [epoch:  3, iter: 234,700, lr:(1.096e-04,)] l_pix: 1.3054e+01 
21-09-11 20:34:50.100 - INFO: [epoch:  3, iter: 234,800, lr:(1.096e-04,)] l_pix: 1.1297e+01 
21-09-11 20:36:34.182 - INFO: [epoch:  3, iter: 234,900, lr:(1.095e-04,)] l_pix: 1.0181e+01 
21-09-11 20:38:18.163 - INFO: [epoch:  3, iter: 235,000, lr:(1.095e-04,)] l_pix: 1.2285e+01 
21-09-11 20:40:23.752 - INFO: # Validation # PSNR: 2.8863e+01
21-09-11 20:40:23.752 - INFO: Saving models and training states.
21-09-11 20:42:11.500 - INFO: [epoch:  3, iter: 235,100, lr:(1.094e-04,)] l_pix: 1.1602e+01 
21-09-11 20:43:59.120 - INFO: [epoch:  3, iter: 235,200, lr:(1.093e-04,)] l_pix: 1.0090e+01 
21-09-11 20:45:45.282 - INFO: [epoch:  3, iter: 235,300, lr:(1.093e-04,)] l_pix: 1.2756e+01 
21-09-11 20:47:35.328 - INFO: [epoch:  3, iter: 235,400, lr:(1.092e-04,)] l_pix: 1.3072e+01 
21-09-11 20:49:31.327 - INFO: [epoch:  3, iter: 235,500, lr:(1.091e-04,)] l_pix: 1.0140e+01 
21-09-11 20:51:26.931 - INFO: [epoch:  3, iter: 235,600, lr:(1.091e-04,)] l_pix: 1.2873e+01 
21-09-11 20:53:23.560 - INFO: [epoch:  3, iter: 235,700, lr:(1.090e-04,)] l_pix: 1.1108e+01 
21-09-11 20:55:20.381 - INFO: [epoch:  3, iter: 235,800, lr:(1.090e-04,)] l_pix: 1.0804e+01 
21-09-11 20:57:15.476 - INFO: [epoch:  3, iter: 235,900, lr:(1.089e-04,)] l_pix: 1.1790e+01 
21-09-11 20:59:10.161 - INFO: [epoch:  3, iter: 236,000, lr:(1.088e-04,)] l_pix: 1.1435e+01 
21-09-11 21:01:07.318 - INFO: [epoch:  3, iter: 236,100, lr:(1.088e-04,)] l_pix: 1.1629e+01 
21-09-11 21:03:04.160 - INFO: [epoch:  3, iter: 236,200, lr:(1.087e-04,)] l_pix: 1.0894e+01 
21-09-11 21:05:01.139 - INFO: [epoch:  3, iter: 236,300, lr:(1.086e-04,)] l_pix: 1.0298e+01 
21-09-11 21:06:51.153 - INFO: [epoch:  3, iter: 236,400, lr:(1.086e-04,)] l_pix: 1.2228e+01 
21-09-11 21:08:36.511 - INFO: [epoch:  3, iter: 236,500, lr:(1.085e-04,)] l_pix: 1.1860e+01 
21-09-11 21:10:21.294 - INFO: [epoch:  3, iter: 236,600, lr:(1.085e-04,)] l_pix: 1.0977e+01 
21-09-11 21:12:06.576 - INFO: [epoch:  3, iter: 236,700, lr:(1.084e-04,)] l_pix: 1.1614e+01 
21-09-11 21:14:01.804 - INFO: [epoch:  3, iter: 236,800, lr:(1.083e-04,)] l_pix: 1.0355e+01 
21-09-11 21:15:58.175 - INFO: [epoch:  3, iter: 236,900, lr:(1.083e-04,)] l_pix: 1.0193e+01 
21-09-11 21:17:53.657 - INFO: [epoch:  3, iter: 237,000, lr:(1.082e-04,)] l_pix: 1.0333e+01 
21-09-11 21:19:49.095 - INFO: [epoch:  3, iter: 237,100, lr:(1.081e-04,)] l_pix: 1.3135e+01 
21-09-11 21:21:43.628 - INFO: [epoch:  3, iter: 237,200, lr:(1.081e-04,)] l_pix: 1.1356e+01 
21-09-11 21:23:38.225 - INFO: [epoch:  3, iter: 237,300, lr:(1.080e-04,)] l_pix: 1.1582e+01 
21-09-11 21:25:33.879 - INFO: [epoch:  3, iter: 237,400, lr:(1.080e-04,)] l_pix: 1.1770e+01 
21-09-11 21:27:29.133 - INFO: [epoch:  3, iter: 237,500, lr:(1.079e-04,)] l_pix: 1.0306e+01 
21-09-11 21:29:22.482 - INFO: [epoch:  3, iter: 237,600, lr:(1.078e-04,)] l_pix: 1.0460e+01 
21-09-11 21:31:16.575 - INFO: [epoch:  3, iter: 237,700, lr:(1.078e-04,)] l_pix: 1.3169e+01 
21-09-11 21:33:12.832 - INFO: [epoch:  3, iter: 237,800, lr:(1.077e-04,)] l_pix: 1.0976e+01 
21-09-11 21:35:07.344 - INFO: [epoch:  3, iter: 237,900, lr:(1.076e-04,)] l_pix: 1.1613e+01 
21-09-11 21:36:56.699 - INFO: [epoch:  3, iter: 238,000, lr:(1.076e-04,)] l_pix: 1.1350e+01 
21-09-11 21:38:43.714 - INFO: [epoch:  3, iter: 238,100, lr:(1.075e-04,)] l_pix: 1.2668e+01 
21-09-11 21:40:41.929 - INFO: [epoch:  3, iter: 238,200, lr:(1.075e-04,)] l_pix: 1.1195e+01 
21-09-11 21:42:40.745 - INFO: [epoch:  3, iter: 238,300, lr:(1.074e-04,)] l_pix: 1.0443e+01 
21-09-11 21:44:37.603 - INFO: [epoch:  3, iter: 238,400, lr:(1.073e-04,)] l_pix: 1.2925e+01 
21-09-11 21:46:33.585 - INFO: [epoch:  3, iter: 238,500, lr:(1.073e-04,)] l_pix: 1.1335e+01 
21-09-11 21:48:31.462 - INFO: [epoch:  3, iter: 238,600, lr:(1.072e-04,)] l_pix: 1.0589e+01 
21-09-11 21:50:31.767 - INFO: [epoch:  3, iter: 238,700, lr:(1.071e-04,)] l_pix: 1.1148e+01 
21-09-11 21:52:29.765 - INFO: [epoch:  3, iter: 238,800, lr:(1.071e-04,)] l_pix: 1.2189e+01 
21-09-11 21:54:30.464 - INFO: [epoch:  3, iter: 238,900, lr:(1.070e-04,)] l_pix: 1.1824e+01 
21-09-11 21:56:17.911 - INFO: [epoch:  3, iter: 239,000, lr:(1.070e-04,)] l_pix: 1.1678e+01 
21-09-11 21:58:11.096 - INFO: [epoch:  3, iter: 239,100, lr:(1.069e-04,)] l_pix: 1.0453e+01 
21-09-11 22:00:06.457 - INFO: [epoch:  3, iter: 239,200, lr:(1.068e-04,)] l_pix: 1.0527e+01 
21-09-11 22:02:03.016 - INFO: [epoch:  3, iter: 239,300, lr:(1.068e-04,)] l_pix: 1.2534e+01 
21-09-11 22:03:56.788 - INFO: [epoch:  3, iter: 239,400, lr:(1.067e-04,)] l_pix: 1.2071e+01 
21-09-11 22:05:52.144 - INFO: [epoch:  3, iter: 239,500, lr:(1.066e-04,)] l_pix: 1.2456e+01 
21-09-11 22:07:47.786 - INFO: [epoch:  3, iter: 239,600, lr:(1.066e-04,)] l_pix: 1.3907e+01 
21-09-11 22:09:43.486 - INFO: [epoch:  3, iter: 239,700, lr:(1.065e-04,)] l_pix: 1.3931e+01 
21-09-11 22:11:40.553 - INFO: [epoch:  3, iter: 239,800, lr:(1.065e-04,)] l_pix: 1.1002e+01 
21-09-11 22:13:38.899 - INFO: [epoch:  3, iter: 239,900, lr:(1.064e-04,)] l_pix: 1.0326e+01 
21-09-11 22:15:30.401 - INFO: [epoch:  3, iter: 240,000, lr:(1.063e-04,)] l_pix: 1.1913e+01 
21-09-11 22:17:39.515 - INFO: # Validation # PSNR: 2.8848e+01
21-09-11 22:17:39.526 - INFO: Saving models and training states.
21-09-11 22:19:40.455 - INFO: [epoch:  3, iter: 240,100, lr:(1.063e-04,)] l_pix: 1.0474e+01 
21-09-11 22:21:37.564 - INFO: [epoch:  3, iter: 240,200, lr:(1.062e-04,)] l_pix: 1.1635e+01 
21-09-11 22:23:34.376 - INFO: [epoch:  3, iter: 240,300, lr:(1.061e-04,)] l_pix: 1.2655e+01 
21-09-11 22:25:32.019 - INFO: [epoch:  3, iter: 240,400, lr:(1.061e-04,)] l_pix: 1.2214e+01 
21-09-11 22:27:28.070 - INFO: [epoch:  3, iter: 240,500, lr:(1.060e-04,)] l_pix: 1.0839e+01 
21-09-11 22:29:23.621 - INFO: [epoch:  3, iter: 240,600, lr:(1.059e-04,)] l_pix: 1.2237e+01 
21-09-11 22:31:21.606 - INFO: [epoch:  3, iter: 240,700, lr:(1.059e-04,)] l_pix: 1.1321e+01 
21-09-11 22:33:20.230 - INFO: [epoch:  3, iter: 240,800, lr:(1.058e-04,)] l_pix: 1.1061e+01 
21-09-11 22:35:16.830 - INFO: [epoch:  3, iter: 240,900, lr:(1.058e-04,)] l_pix: 1.1786e+01 
21-09-11 22:37:13.859 - INFO: [epoch:  3, iter: 241,000, lr:(1.057e-04,)] l_pix: 1.1445e+01 
21-09-11 22:39:09.477 - INFO: [epoch:  3, iter: 241,100, lr:(1.056e-04,)] l_pix: 1.2056e+01 
21-09-11 22:41:04.184 - INFO: [epoch:  3, iter: 241,200, lr:(1.056e-04,)] l_pix: 1.0277e+01 
21-09-11 22:42:59.478 - INFO: [epoch:  3, iter: 241,300, lr:(1.055e-04,)] l_pix: 1.2708e+01 
21-09-11 22:44:52.567 - INFO: [epoch:  3, iter: 241,400, lr:(1.054e-04,)] l_pix: 1.0366e+01 
21-09-11 22:46:39.918 - INFO: [epoch:  3, iter: 241,500, lr:(1.054e-04,)] l_pix: 1.0787e+01 
21-09-11 22:48:29.870 - INFO: [epoch:  3, iter: 241,600, lr:(1.053e-04,)] l_pix: 1.1162e+01 
21-09-11 22:50:29.575 - INFO: [epoch:  3, iter: 241,700, lr:(1.053e-04,)] l_pix: 1.1692e+01 
21-09-11 22:52:24.794 - INFO: [epoch:  3, iter: 241,800, lr:(1.052e-04,)] l_pix: 1.2001e+01 
21-09-11 22:54:21.657 - INFO: [epoch:  3, iter: 241,900, lr:(1.051e-04,)] l_pix: 1.2140e+01 
21-09-11 22:56:15.073 - INFO: [epoch:  3, iter: 242,000, lr:(1.051e-04,)] l_pix: 1.0886e+01 
21-09-11 22:58:11.077 - INFO: [epoch:  3, iter: 242,100, lr:(1.050e-04,)] l_pix: 1.0634e+01 
21-09-11 23:00:07.839 - INFO: [epoch:  3, iter: 242,200, lr:(1.049e-04,)] l_pix: 1.3633e+01 
21-09-11 23:02:03.979 - INFO: [epoch:  3, iter: 242,300, lr:(1.049e-04,)] l_pix: 1.1585e+01 
21-09-11 23:03:59.699 - INFO: [epoch:  3, iter: 242,400, lr:(1.048e-04,)] l_pix: 9.1184e+00 
21-09-11 23:05:54.917 - INFO: [epoch:  3, iter: 242,500, lr:(1.048e-04,)] l_pix: 1.1917e+01 
21-09-11 23:07:48.800 - INFO: [epoch:  3, iter: 242,600, lr:(1.047e-04,)] l_pix: 1.0192e+01 
21-09-11 23:09:43.515 - INFO: [epoch:  3, iter: 242,700, lr:(1.046e-04,)] l_pix: 1.2827e+01 
21-09-11 23:11:37.306 - INFO: [epoch:  3, iter: 242,800, lr:(1.046e-04,)] l_pix: 9.9995e+00 
21-09-11 23:13:22.399 - INFO: [epoch:  3, iter: 242,900, lr:(1.045e-04,)] l_pix: 1.0699e+01 
21-09-11 23:15:03.187 - INFO: [epoch:  3, iter: 243,000, lr:(1.044e-04,)] l_pix: 1.0436e+01 
21-09-11 23:16:43.800 - INFO: [epoch:  3, iter: 243,100, lr:(1.044e-04,)] l_pix: 1.5543e+01 
21-09-11 23:18:24.225 - INFO: [epoch:  3, iter: 243,200, lr:(1.043e-04,)] l_pix: 1.1828e+01 
21-09-11 23:20:05.004 - INFO: [epoch:  3, iter: 243,300, lr:(1.043e-04,)] l_pix: 9.9334e+00 
21-09-11 23:21:45.690 - INFO: [epoch:  3, iter: 243,400, lr:(1.042e-04,)] l_pix: 1.1017e+01 
21-09-11 23:23:26.180 - INFO: [epoch:  3, iter: 243,500, lr:(1.041e-04,)] l_pix: 1.0024e+01 
21-09-11 23:25:06.582 - INFO: [epoch:  3, iter: 243,600, lr:(1.041e-04,)] l_pix: 1.1960e+01 
21-09-11 23:26:46.583 - INFO: [epoch:  3, iter: 243,700, lr:(1.040e-04,)] l_pix: 1.0624e+01 
21-09-11 23:28:26.893 - INFO: [epoch:  3, iter: 243,800, lr:(1.039e-04,)] l_pix: 1.1300e+01 
21-09-11 23:30:06.896 - INFO: [epoch:  3, iter: 243,900, lr:(1.039e-04,)] l_pix: 1.0583e+01 
21-09-11 23:31:46.898 - INFO: [epoch:  3, iter: 244,000, lr:(1.038e-04,)] l_pix: 1.0929e+01 
21-09-11 23:33:27.589 - INFO: [epoch:  3, iter: 244,100, lr:(1.038e-04,)] l_pix: 9.6670e+00 
21-09-11 23:35:10.318 - INFO: [epoch:  3, iter: 244,200, lr:(1.037e-04,)] l_pix: 1.2761e+01 
21-09-11 23:36:53.024 - INFO: [epoch:  3, iter: 244,300, lr:(1.036e-04,)] l_pix: 1.0872e+01 
21-09-11 23:38:35.829 - INFO: [epoch:  3, iter: 244,400, lr:(1.036e-04,)] l_pix: 1.0956e+01 
21-09-11 23:40:16.584 - INFO: [epoch:  3, iter: 244,500, lr:(1.035e-04,)] l_pix: 1.1166e+01 
21-09-11 23:41:56.900 - INFO: [epoch:  3, iter: 244,600, lr:(1.034e-04,)] l_pix: 1.2625e+01 
21-09-11 23:43:37.759 - INFO: [epoch:  3, iter: 244,700, lr:(1.034e-04,)] l_pix: 1.1194e+01 
21-09-11 23:45:19.502 - INFO: [epoch:  3, iter: 244,800, lr:(1.033e-04,)] l_pix: 1.1849e+01 
21-09-11 23:47:00.642 - INFO: [epoch:  3, iter: 244,900, lr:(1.033e-04,)] l_pix: 1.1317e+01 
21-09-11 23:48:41.216 - INFO: [epoch:  3, iter: 245,000, lr:(1.032e-04,)] l_pix: 1.0507e+01 
21-09-11 23:50:42.630 - INFO: # Validation # PSNR: 2.8907e+01
21-09-11 23:50:42.630 - INFO: Saving models and training states.
21-09-11 23:52:24.512 - INFO: [epoch:  3, iter: 245,100, lr:(1.031e-04,)] l_pix: 9.9290e+00 
21-09-11 23:54:07.672 - INFO: [epoch:  3, iter: 245,200, lr:(1.031e-04,)] l_pix: 1.2588e+01 
21-09-11 23:55:50.275 - INFO: [epoch:  3, iter: 245,300, lr:(1.030e-04,)] l_pix: 1.1366e+01 
21-09-11 23:57:31.521 - INFO: [epoch:  3, iter: 245,400, lr:(1.029e-04,)] l_pix: 1.1942e+01 
21-09-11 23:59:12.398 - INFO: [epoch:  3, iter: 245,500, lr:(1.029e-04,)] l_pix: 1.1491e+01 
21-09-12 00:00:52.819 - INFO: [epoch:  3, iter: 245,600, lr:(1.028e-04,)] l_pix: 1.0579e+01 
21-09-12 00:02:33.111 - INFO: [epoch:  3, iter: 245,700, lr:(1.027e-04,)] l_pix: 1.2535e+01 
21-09-12 00:04:13.561 - INFO: [epoch:  3, iter: 245,800, lr:(1.027e-04,)] l_pix: 1.3409e+01 
21-09-12 00:05:56.658 - INFO: [epoch:  3, iter: 245,900, lr:(1.026e-04,)] l_pix: 1.0877e+01 
21-09-12 00:07:40.162 - INFO: [epoch:  3, iter: 246,000, lr:(1.026e-04,)] l_pix: 9.6730e+00 
21-09-12 00:09:23.471 - INFO: [epoch:  3, iter: 246,100, lr:(1.025e-04,)] l_pix: 1.3247e+01 
21-09-12 00:11:06.283 - INFO: [epoch:  3, iter: 246,200, lr:(1.024e-04,)] l_pix: 1.0242e+01 
21-09-12 00:12:49.061 - INFO: [epoch:  3, iter: 246,300, lr:(1.024e-04,)] l_pix: 1.0823e+01 
21-09-12 00:14:31.978 - INFO: [epoch:  3, iter: 246,400, lr:(1.023e-04,)] l_pix: 1.0248e+01 
21-09-12 00:16:14.394 - INFO: [epoch:  3, iter: 246,500, lr:(1.022e-04,)] l_pix: 1.0726e+01 
21-09-12 00:17:57.432 - INFO: [epoch:  3, iter: 246,600, lr:(1.022e-04,)] l_pix: 9.8920e+00 
21-09-12 00:19:40.503 - INFO: [epoch:  3, iter: 246,700, lr:(1.021e-04,)] l_pix: 9.8590e+00 
21-09-12 00:21:23.669 - INFO: [epoch:  3, iter: 246,800, lr:(1.021e-04,)] l_pix: 1.2074e+01 
21-09-12 00:23:06.958 - INFO: [epoch:  3, iter: 246,900, lr:(1.020e-04,)] l_pix: 1.2682e+01 
21-09-12 00:24:49.851 - INFO: [epoch:  3, iter: 247,000, lr:(1.019e-04,)] l_pix: 1.1015e+01 
21-09-12 00:26:32.884 - INFO: [epoch:  3, iter: 247,100, lr:(1.019e-04,)] l_pix: 1.2420e+01 
21-09-12 00:28:15.673 - INFO: [epoch:  3, iter: 247,200, lr:(1.018e-04,)] l_pix: 1.0257e+01 
21-09-12 00:29:58.451 - INFO: [epoch:  3, iter: 247,300, lr:(1.017e-04,)] l_pix: 1.1112e+01 
21-09-12 00:31:40.982 - INFO: [epoch:  3, iter: 247,400, lr:(1.017e-04,)] l_pix: 1.0480e+01 
21-09-12 00:33:23.713 - INFO: [epoch:  3, iter: 247,500, lr:(1.016e-04,)] l_pix: 1.2503e+01 
21-09-12 00:35:06.677 - INFO: [epoch:  3, iter: 247,600, lr:(1.016e-04,)] l_pix: 1.1317e+01 
21-09-12 00:36:49.569 - INFO: [epoch:  3, iter: 247,700, lr:(1.015e-04,)] l_pix: 1.1781e+01 
21-09-12 00:38:32.302 - INFO: [epoch:  3, iter: 247,800, lr:(1.014e-04,)] l_pix: 1.2475e+01 
21-09-12 00:40:15.090 - INFO: [epoch:  3, iter: 247,900, lr:(1.014e-04,)] l_pix: 1.2559e+01 
21-09-12 00:41:58.145 - INFO: [epoch:  3, iter: 248,000, lr:(1.013e-04,)] l_pix: 1.0142e+01 
21-09-12 00:43:41.168 - INFO: [epoch:  3, iter: 248,100, lr:(1.012e-04,)] l_pix: 1.0817e+01 
21-09-12 00:45:23.971 - INFO: [epoch:  3, iter: 248,200, lr:(1.012e-04,)] l_pix: 1.1131e+01 
21-09-12 00:47:06.905 - INFO: [epoch:  3, iter: 248,300, lr:(1.011e-04,)] l_pix: 9.8189e+00 
21-09-12 00:48:50.138 - INFO: [epoch:  3, iter: 248,400, lr:(1.011e-04,)] l_pix: 1.2084e+01 
21-09-12 00:50:32.953 - INFO: [epoch:  3, iter: 248,500, lr:(1.010e-04,)] l_pix: 1.0978e+01 
21-09-12 00:52:15.723 - INFO: [epoch:  3, iter: 248,600, lr:(1.009e-04,)] l_pix: 1.1972e+01 
21-09-12 00:53:58.307 - INFO: [epoch:  3, iter: 248,700, lr:(1.009e-04,)] l_pix: 1.2223e+01 
21-09-12 00:55:40.994 - INFO: [epoch:  3, iter: 248,800, lr:(1.008e-04,)] l_pix: 1.1088e+01 
21-09-12 00:57:23.743 - INFO: [epoch:  3, iter: 248,900, lr:(1.007e-04,)] l_pix: 1.1336e+01 
21-09-12 00:59:06.781 - INFO: [epoch:  3, iter: 249,000, lr:(1.007e-04,)] l_pix: 1.1081e+01 
21-09-12 01:00:49.849 - INFO: [epoch:  3, iter: 249,100, lr:(1.006e-04,)] l_pix: 1.4112e+01 
21-09-12 01:02:32.620 - INFO: [epoch:  3, iter: 249,200, lr:(1.006e-04,)] l_pix: 1.1627e+01 
21-09-12 01:04:15.580 - INFO: [epoch:  3, iter: 249,300, lr:(1.005e-04,)] l_pix: 1.1158e+01 
21-09-12 01:05:56.205 - INFO: [epoch:  3, iter: 249,400, lr:(1.004e-04,)] l_pix: 1.1047e+01 
21-09-12 01:07:36.648 - INFO: [epoch:  3, iter: 249,500, lr:(1.004e-04,)] l_pix: 1.0041e+01 
21-09-12 01:09:17.125 - INFO: [epoch:  3, iter: 249,600, lr:(1.003e-04,)] l_pix: 1.0174e+01 
21-09-12 01:10:57.738 - INFO: [epoch:  3, iter: 249,700, lr:(1.002e-04,)] l_pix: 1.3015e+01 
21-09-12 01:12:38.921 - INFO: [epoch:  3, iter: 249,800, lr:(1.002e-04,)] l_pix: 9.9361e+00 
21-09-12 01:14:19.886 - INFO: [epoch:  3, iter: 249,900, lr:(1.001e-04,)] l_pix: 1.0245e+01 
21-09-12 01:16:00.930 - INFO: [epoch:  3, iter: 250,000, lr:(1.000e-04,)] l_pix: 9.8734e+00 
21-09-12 01:18:02.388 - INFO: # Validation # PSNR: 2.8867e+01
21-09-12 01:18:02.388 - INFO: Saving models and training states.
21-09-12 01:19:43.809 - INFO: [epoch:  3, iter: 250,100, lr:(9.999e-05,)] l_pix: 1.1603e+01 
21-09-12 01:21:24.167 - INFO: [epoch:  3, iter: 250,200, lr:(9.992e-05,)] l_pix: 1.0078e+01 
21-09-12 01:23:04.498 - INFO: [epoch:  3, iter: 250,300, lr:(9.986e-05,)] l_pix: 1.1627e+01 
21-09-12 01:24:44.876 - INFO: [epoch:  3, iter: 250,400, lr:(9.980e-05,)] l_pix: 1.1086e+01 
21-09-12 01:26:25.330 - INFO: [epoch:  3, iter: 250,500, lr:(9.974e-05,)] l_pix: 1.2192e+01 
21-09-12 01:28:06.120 - INFO: [epoch:  3, iter: 250,600, lr:(9.967e-05,)] l_pix: 1.1250e+01 
21-09-12 01:29:47.252 - INFO: [epoch:  3, iter: 250,700, lr:(9.961e-05,)] l_pix: 1.1124e+01 
21-09-12 01:31:28.291 - INFO: [epoch:  3, iter: 250,800, lr:(9.955e-05,)] l_pix: 1.1944e+01 
21-09-12 01:33:09.123 - INFO: [epoch:  3, iter: 250,900, lr:(9.948e-05,)] l_pix: 1.2877e+01 
21-09-12 01:34:50.120 - INFO: [epoch:  3, iter: 251,000, lr:(9.942e-05,)] l_pix: 9.4548e+00 
21-09-12 01:36:30.593 - INFO: [epoch:  3, iter: 251,100, lr:(9.936e-05,)] l_pix: 1.2539e+01 
21-09-12 01:38:10.964 - INFO: [epoch:  3, iter: 251,200, lr:(9.930e-05,)] l_pix: 9.9643e+00 
21-09-12 01:39:51.439 - INFO: [epoch:  3, iter: 251,300, lr:(9.923e-05,)] l_pix: 1.3016e+01 
21-09-12 01:41:31.817 - INFO: [epoch:  3, iter: 251,400, lr:(9.917e-05,)] l_pix: 1.0623e+01 
21-09-12 01:43:12.300 - INFO: [epoch:  3, iter: 251,500, lr:(9.911e-05,)] l_pix: 1.0716e+01 
21-09-12 01:44:53.358 - INFO: [epoch:  3, iter: 251,600, lr:(9.904e-05,)] l_pix: 1.0652e+01 
21-09-12 01:46:35.275 - INFO: [epoch:  3, iter: 251,700, lr:(9.898e-05,)] l_pix: 9.8747e+00 
21-09-12 01:48:18.477 - INFO: [epoch:  3, iter: 251,800, lr:(9.892e-05,)] l_pix: 1.2492e+01 
21-09-12 01:50:00.940 - INFO: [epoch:  3, iter: 251,900, lr:(9.886e-05,)] l_pix: 1.2588e+01 
21-09-12 01:51:43.911 - INFO: [epoch:  3, iter: 252,000, lr:(9.879e-05,)] l_pix: 1.1303e+01 
21-09-12 01:53:26.844 - INFO: [epoch:  3, iter: 252,100, lr:(9.873e-05,)] l_pix: 9.7083e+00 
21-09-12 01:55:09.716 - INFO: [epoch:  3, iter: 252,200, lr:(9.867e-05,)] l_pix: 1.1685e+01 
21-09-12 01:56:52.588 - INFO: [epoch:  3, iter: 252,300, lr:(9.861e-05,)] l_pix: 1.2281e+01 
21-09-12 01:58:35.072 - INFO: [epoch:  3, iter: 252,400, lr:(9.854e-05,)] l_pix: 1.1612e+01 
21-09-12 02:00:18.087 - INFO: [epoch:  3, iter: 252,500, lr:(9.848e-05,)] l_pix: 1.0135e+01 
21-09-12 02:02:00.886 - INFO: [epoch:  3, iter: 252,600, lr:(9.842e-05,)] l_pix: 1.3769e+01 
21-09-12 02:03:43.595 - INFO: [epoch:  3, iter: 252,700, lr:(9.835e-05,)] l_pix: 1.0695e+01 
21-09-12 02:05:26.175 - INFO: [epoch:  3, iter: 252,800, lr:(9.829e-05,)] l_pix: 1.2860e+01 
21-09-12 02:07:09.238 - INFO: [epoch:  3, iter: 252,900, lr:(9.823e-05,)] l_pix: 1.2258e+01 
21-09-12 02:08:52.074 - INFO: [epoch:  3, iter: 253,000, lr:(9.817e-05,)] l_pix: 1.2472e+01 
21-09-12 02:10:35.023 - INFO: [epoch:  3, iter: 253,100, lr:(9.810e-05,)] l_pix: 1.0940e+01 
21-09-12 02:12:17.642 - INFO: [epoch:  3, iter: 253,200, lr:(9.804e-05,)] l_pix: 1.1431e+01 
21-09-12 02:14:00.268 - INFO: [epoch:  3, iter: 253,300, lr:(9.798e-05,)] l_pix: 1.1134e+01 
21-09-12 02:15:42.800 - INFO: [epoch:  3, iter: 253,400, lr:(9.791e-05,)] l_pix: 1.3884e+01 
21-09-12 02:17:25.413 - INFO: [epoch:  3, iter: 253,500, lr:(9.785e-05,)] l_pix: 1.1788e+01 
21-09-12 02:19:08.502 - INFO: [epoch:  3, iter: 253,600, lr:(9.779e-05,)] l_pix: 1.2008e+01 
21-09-12 02:20:51.374 - INFO: [epoch:  3, iter: 253,700, lr:(9.773e-05,)] l_pix: 1.2664e+01 
21-09-12 02:22:34.601 - INFO: [epoch:  3, iter: 253,800, lr:(9.766e-05,)] l_pix: 1.0816e+01 
21-09-12 02:24:17.608 - INFO: [epoch:  3, iter: 253,900, lr:(9.760e-05,)] l_pix: 1.1817e+01 
21-09-12 02:26:00.395 - INFO: [epoch:  3, iter: 254,000, lr:(9.754e-05,)] l_pix: 1.0834e+01 
21-09-12 02:27:43.215 - INFO: [epoch:  3, iter: 254,100, lr:(9.747e-05,)] l_pix: 1.4364e+01 
21-09-12 02:29:25.940 - INFO: [epoch:  3, iter: 254,200, lr:(9.741e-05,)] l_pix: 1.0455e+01 
21-09-12 02:31:08.536 - INFO: [epoch:  3, iter: 254,300, lr:(9.735e-05,)] l_pix: 1.1557e+01 
21-09-12 02:32:51.682 - INFO: [epoch:  3, iter: 254,400, lr:(9.729e-05,)] l_pix: 1.1976e+01 
21-09-12 02:34:35.048 - INFO: [epoch:  3, iter: 254,500, lr:(9.722e-05,)] l_pix: 1.2563e+01 
21-09-12 02:36:18.485 - INFO: [epoch:  3, iter: 254,600, lr:(9.716e-05,)] l_pix: 9.0549e+00 
21-09-12 02:38:01.416 - INFO: [epoch:  3, iter: 254,700, lr:(9.710e-05,)] l_pix: 1.4326e+01 
21-09-12 02:39:44.037 - INFO: [epoch:  3, iter: 254,800, lr:(9.704e-05,)] l_pix: 1.0490e+01 
21-09-12 02:41:26.412 - INFO: [epoch:  3, iter: 254,900, lr:(9.697e-05,)] l_pix: 1.2198e+01 
21-09-12 02:43:09.030 - INFO: [epoch:  3, iter: 255,000, lr:(9.691e-05,)] l_pix: 1.2381e+01 
21-09-12 02:45:12.998 - INFO: # Validation # PSNR: 2.8856e+01
21-09-12 02:45:12.998 - INFO: Saving models and training states.
21-09-12 02:46:54.745 - INFO: [epoch:  3, iter: 255,100, lr:(9.685e-05,)] l_pix: 1.1945e+01 
21-09-12 02:48:35.606 - INFO: [epoch:  3, iter: 255,200, lr:(9.678e-05,)] l_pix: 1.0958e+01 
21-09-12 02:50:17.035 - INFO: [epoch:  3, iter: 255,300, lr:(9.672e-05,)] l_pix: 9.0966e+00 
21-09-12 02:51:58.147 - INFO: [epoch:  3, iter: 255,400, lr:(9.666e-05,)] l_pix: 1.2727e+01 
21-09-12 02:53:39.204 - INFO: [epoch:  3, iter: 255,500, lr:(9.660e-05,)] l_pix: 1.0195e+01 
21-09-12 02:55:19.969 - INFO: [epoch:  3, iter: 255,600, lr:(9.653e-05,)] l_pix: 1.1593e+01 
21-09-12 02:57:00.627 - INFO: [epoch:  3, iter: 255,700, lr:(9.647e-05,)] l_pix: 1.1433e+01 
21-09-12 02:58:41.142 - INFO: [epoch:  3, iter: 255,800, lr:(9.641e-05,)] l_pix: 1.0330e+01 
21-09-12 03:00:21.481 - INFO: [epoch:  3, iter: 255,900, lr:(9.634e-05,)] l_pix: 1.0760e+01 
21-09-12 03:02:01.982 - INFO: [epoch:  3, iter: 256,000, lr:(9.628e-05,)] l_pix: 1.3364e+01 
21-09-12 03:03:42.428 - INFO: [epoch:  3, iter: 256,100, lr:(9.622e-05,)] l_pix: 1.0929e+01 
21-09-12 03:05:23.479 - INFO: [epoch:  3, iter: 256,200, lr:(9.616e-05,)] l_pix: 1.1251e+01 
21-09-12 03:07:05.270 - INFO: [epoch:  3, iter: 256,300, lr:(9.609e-05,)] l_pix: 9.6382e+00 
21-09-12 03:08:46.279 - INFO: [epoch:  3, iter: 256,400, lr:(9.603e-05,)] l_pix: 1.0487e+01 
21-09-12 03:10:26.854 - INFO: [epoch:  3, iter: 256,500, lr:(9.597e-05,)] l_pix: 1.3028e+01 
21-09-12 03:12:07.359 - INFO: [epoch:  3, iter: 256,600, lr:(9.591e-05,)] l_pix: 1.2199e+01 
21-09-12 03:13:47.913 - INFO: [epoch:  3, iter: 256,700, lr:(9.584e-05,)] l_pix: 9.1160e+00 
21-09-12 03:15:28.428 - INFO: [epoch:  3, iter: 256,800, lr:(9.578e-05,)] l_pix: 1.2847e+01 
21-09-12 03:17:08.862 - INFO: [epoch:  3, iter: 256,900, lr:(9.572e-05,)] l_pix: 9.4993e+00 
21-09-12 03:18:49.299 - INFO: [epoch:  3, iter: 257,000, lr:(9.565e-05,)] l_pix: 1.1438e+01 
21-09-12 03:20:29.917 - INFO: [epoch:  3, iter: 257,100, lr:(9.559e-05,)] l_pix: 1.3512e+01 
21-09-12 03:22:10.925 - INFO: [epoch:  3, iter: 257,200, lr:(9.553e-05,)] l_pix: 1.2193e+01 
21-09-12 03:23:51.854 - INFO: [epoch:  3, iter: 257,300, lr:(9.547e-05,)] l_pix: 1.0530e+01 
21-09-12 03:25:32.912 - INFO: [epoch:  3, iter: 257,400, lr:(9.540e-05,)] l_pix: 1.2309e+01 
21-09-12 03:27:13.906 - INFO: [epoch:  3, iter: 257,500, lr:(9.534e-05,)] l_pix: 1.2578e+01 
21-09-12 03:28:54.563 - INFO: [epoch:  3, iter: 257,600, lr:(9.528e-05,)] l_pix: 1.2290e+01 
21-09-12 03:30:35.401 - INFO: [epoch:  3, iter: 257,700, lr:(9.522e-05,)] l_pix: 1.0451e+01 
21-09-12 03:32:16.098 - INFO: [epoch:  3, iter: 257,800, lr:(9.515e-05,)] l_pix: 1.2016e+01 
21-09-12 03:33:56.670 - INFO: [epoch:  3, iter: 257,900, lr:(9.509e-05,)] l_pix: 9.6967e+00 
21-09-12 03:35:37.313 - INFO: [epoch:  3, iter: 258,000, lr:(9.503e-05,)] l_pix: 1.2464e+01 
21-09-12 03:37:18.109 - INFO: [epoch:  3, iter: 258,100, lr:(9.496e-05,)] l_pix: 1.0322e+01 
21-09-12 03:38:58.953 - INFO: [epoch:  3, iter: 258,200, lr:(9.490e-05,)] l_pix: 1.0983e+01 
21-09-12 03:40:40.020 - INFO: [epoch:  3, iter: 258,300, lr:(9.484e-05,)] l_pix: 1.1929e+01 
21-09-12 03:42:21.061 - INFO: [epoch:  3, iter: 258,400, lr:(9.478e-05,)] l_pix: 1.3159e+01 
21-09-12 03:44:01.948 - INFO: [epoch:  3, iter: 258,500, lr:(9.471e-05,)] l_pix: 1.0942e+01 
21-09-12 03:45:42.262 - INFO: [epoch:  3, iter: 258,600, lr:(9.465e-05,)] l_pix: 1.2809e+01 
21-09-12 03:47:24.709 - INFO: [epoch:  3, iter: 258,700, lr:(9.459e-05,)] l_pix: 1.2469e+01 
21-09-12 03:49:07.239 - INFO: [epoch:  3, iter: 258,800, lr:(9.453e-05,)] l_pix: 1.2809e+01 
21-09-12 03:50:49.829 - INFO: [epoch:  3, iter: 258,900, lr:(9.446e-05,)] l_pix: 1.1568e+01 
21-09-12 03:52:32.250 - INFO: [epoch:  3, iter: 259,000, lr:(9.440e-05,)] l_pix: 1.0577e+01 
21-09-12 03:54:15.215 - INFO: [epoch:  3, iter: 259,100, lr:(9.434e-05,)] l_pix: 1.2839e+01 
21-09-12 03:55:58.295 - INFO: [epoch:  3, iter: 259,200, lr:(9.427e-05,)] l_pix: 1.2007e+01 
21-09-12 03:57:41.236 - INFO: [epoch:  3, iter: 259,300, lr:(9.421e-05,)] l_pix: 1.0386e+01 
21-09-12 03:59:23.855 - INFO: [epoch:  3, iter: 259,400, lr:(9.415e-05,)] l_pix: 1.1231e+01 
21-09-12 04:01:06.435 - INFO: [epoch:  3, iter: 259,500, lr:(9.409e-05,)] l_pix: 1.2707e+01 
21-09-12 04:02:48.995 - INFO: [epoch:  3, iter: 259,600, lr:(9.402e-05,)] l_pix: 1.0085e+01 
21-09-12 04:04:31.671 - INFO: [epoch:  3, iter: 259,700, lr:(9.396e-05,)] l_pix: 1.0748e+01 
21-09-12 04:06:14.174 - INFO: [epoch:  3, iter: 259,800, lr:(9.390e-05,)] l_pix: 1.1507e+01 
21-09-12 04:07:56.775 - INFO: [epoch:  3, iter: 259,900, lr:(9.384e-05,)] l_pix: 1.0135e+01 
21-09-12 04:09:39.882 - INFO: [epoch:  3, iter: 260,000, lr:(9.377e-05,)] l_pix: 1.2791e+01 
21-09-12 04:11:43.993 - INFO: # Validation # PSNR: 2.8919e+01
21-09-12 04:11:43.993 - INFO: Saving models and training states.
21-09-12 04:13:27.138 - INFO: [epoch:  3, iter: 260,100, lr:(9.371e-05,)] l_pix: 1.1070e+01 
21-09-12 04:15:09.572 - INFO: [epoch:  3, iter: 260,200, lr:(9.365e-05,)] l_pix: 1.2378e+01 
21-09-12 04:16:52.282 - INFO: [epoch:  3, iter: 260,300, lr:(9.359e-05,)] l_pix: 1.0989e+01 
21-09-12 04:18:35.068 - INFO: [epoch:  3, iter: 260,400, lr:(9.352e-05,)] l_pix: 1.1719e+01 
21-09-12 04:20:17.733 - INFO: [epoch:  3, iter: 260,500, lr:(9.346e-05,)] l_pix: 1.0154e+01 
21-09-12 04:22:00.172 - INFO: [epoch:  3, iter: 260,600, lr:(9.340e-05,)] l_pix: 1.3082e+01 
21-09-12 04:23:42.930 - INFO: [epoch:  3, iter: 260,700, lr:(9.333e-05,)] l_pix: 1.1020e+01 
21-09-12 04:25:25.475 - INFO: [epoch:  3, iter: 260,800, lr:(9.327e-05,)] l_pix: 1.1714e+01 
21-09-12 04:27:08.171 - INFO: [epoch:  3, iter: 260,900, lr:(9.321e-05,)] l_pix: 1.2332e+01 
21-09-12 04:28:50.442 - INFO: [epoch:  3, iter: 261,000, lr:(9.315e-05,)] l_pix: 1.1193e+01 
21-09-12 04:30:33.062 - INFO: [epoch:  3, iter: 261,100, lr:(9.308e-05,)] l_pix: 1.0986e+01 
21-09-12 04:32:15.583 - INFO: [epoch:  3, iter: 261,200, lr:(9.302e-05,)] l_pix: 1.2028e+01 
21-09-12 04:33:58.038 - INFO: [epoch:  3, iter: 261,300, lr:(9.296e-05,)] l_pix: 1.2852e+01 
21-09-12 04:35:40.636 - INFO: [epoch:  3, iter: 261,400, lr:(9.290e-05,)] l_pix: 1.2097e+01 
21-09-12 04:37:23.253 - INFO: [epoch:  3, iter: 261,500, lr:(9.283e-05,)] l_pix: 1.2422e+01 
21-09-12 04:39:05.959 - INFO: [epoch:  3, iter: 261,600, lr:(9.277e-05,)] l_pix: 1.0010e+01 
21-09-12 04:40:48.311 - INFO: [epoch:  3, iter: 261,700, lr:(9.271e-05,)] l_pix: 1.2704e+01 
21-09-12 04:42:31.049 - INFO: [epoch:  3, iter: 261,800, lr:(9.265e-05,)] l_pix: 1.1071e+01 
21-09-12 04:44:13.484 - INFO: [epoch:  3, iter: 261,900, lr:(9.258e-05,)] l_pix: 1.1730e+01 
21-09-12 04:45:55.642 - INFO: [epoch:  3, iter: 262,000, lr:(9.252e-05,)] l_pix: 1.2061e+01 
21-09-12 04:47:36.627 - INFO: [epoch:  3, iter: 262,100, lr:(9.246e-05,)] l_pix: 1.1603e+01 
21-09-12 04:49:17.682 - INFO: [epoch:  3, iter: 262,200, lr:(9.240e-05,)] l_pix: 1.0949e+01 
21-09-12 04:50:58.259 - INFO: [epoch:  3, iter: 262,300, lr:(9.233e-05,)] l_pix: 1.1845e+01 
21-09-12 04:52:39.026 - INFO: [epoch:  3, iter: 262,400, lr:(9.227e-05,)] l_pix: 1.0458e+01 
21-09-12 04:54:19.938 - INFO: [epoch:  3, iter: 262,500, lr:(9.221e-05,)] l_pix: 1.2535e+01 
21-09-12 04:56:00.647 - INFO: [epoch:  3, iter: 262,600, lr:(9.214e-05,)] l_pix: 1.1604e+01 
21-09-12 04:57:41.419 - INFO: [epoch:  3, iter: 262,700, lr:(9.208e-05,)] l_pix: 1.0915e+01 
21-09-12 04:59:22.334 - INFO: [epoch:  3, iter: 262,800, lr:(9.202e-05,)] l_pix: 1.2554e+01 
21-09-12 05:01:03.508 - INFO: [epoch:  3, iter: 262,900, lr:(9.196e-05,)] l_pix: 1.1976e+01 
21-09-12 05:02:44.584 - INFO: [epoch:  3, iter: 263,000, lr:(9.189e-05,)] l_pix: 1.2019e+01 
21-09-12 05:04:25.704 - INFO: [epoch:  3, iter: 263,100, lr:(9.183e-05,)] l_pix: 1.0925e+01 
21-09-12 05:06:06.351 - INFO: [epoch:  3, iter: 263,200, lr:(9.177e-05,)] l_pix: 1.0966e+01 
21-09-12 05:07:46.895 - INFO: [epoch:  3, iter: 263,300, lr:(9.171e-05,)] l_pix: 1.1249e+01 
21-09-12 05:09:27.512 - INFO: [epoch:  3, iter: 263,400, lr:(9.164e-05,)] l_pix: 1.1031e+01 
21-09-12 05:11:08.124 - INFO: [epoch:  3, iter: 263,500, lr:(9.158e-05,)] l_pix: 1.0623e+01 
21-09-12 05:12:49.058 - INFO: [epoch:  3, iter: 263,600, lr:(9.152e-05,)] l_pix: 9.6428e+00 
21-09-12 05:14:30.299 - INFO: [epoch:  3, iter: 263,700, lr:(9.146e-05,)] l_pix: 1.2951e+01 
21-09-12 05:16:11.505 - INFO: [epoch:  3, iter: 263,800, lr:(9.139e-05,)] l_pix: 1.1454e+01 
21-09-12 05:17:52.490 - INFO: [epoch:  3, iter: 263,900, lr:(9.133e-05,)] l_pix: 1.2451e+01 
21-09-12 05:19:33.455 - INFO: [epoch:  3, iter: 264,000, lr:(9.127e-05,)] l_pix: 1.2192e+01 
21-09-12 05:21:14.192 - INFO: [epoch:  3, iter: 264,100, lr:(9.121e-05,)] l_pix: 1.2088e+01 
21-09-12 05:22:54.663 - INFO: [epoch:  3, iter: 264,200, lr:(9.114e-05,)] l_pix: 1.0282e+01 
21-09-12 05:24:35.235 - INFO: [epoch:  3, iter: 264,300, lr:(9.108e-05,)] l_pix: 1.0423e+01 
21-09-12 05:26:15.875 - INFO: [epoch:  3, iter: 264,400, lr:(9.102e-05,)] l_pix: 1.2832e+01 
21-09-12 05:27:56.840 - INFO: [epoch:  3, iter: 264,500, lr:(9.096e-05,)] l_pix: 1.0176e+01 
21-09-12 05:29:37.840 - INFO: [epoch:  3, iter: 264,600, lr:(9.089e-05,)] l_pix: 1.0241e+01 
21-09-12 05:31:19.155 - INFO: [epoch:  4, iter: 264,700, lr:(9.083e-05,)] l_pix: 1.2093e+01 
21-09-12 05:33:00.364 - INFO: [epoch:  4, iter: 264,800, lr:(9.077e-05,)] l_pix: 1.1823e+01 
21-09-12 05:34:41.232 - INFO: [epoch:  4, iter: 264,900, lr:(9.071e-05,)] l_pix: 1.2044e+01 
21-09-12 05:36:21.968 - INFO: [epoch:  4, iter: 265,000, lr:(9.064e-05,)] l_pix: 1.2378e+01 
21-09-12 05:38:23.129 - INFO: # Validation # PSNR: 2.8860e+01
21-09-12 05:38:23.129 - INFO: Saving models and training states.
21-09-12 05:40:04.630 - INFO: [epoch:  4, iter: 265,100, lr:(9.058e-05,)] l_pix: 1.0974e+01 
21-09-12 05:41:45.455 - INFO: [epoch:  4, iter: 265,200, lr:(9.052e-05,)] l_pix: 1.2309e+01 
21-09-12 05:43:26.377 - INFO: [epoch:  4, iter: 265,300, lr:(9.046e-05,)] l_pix: 1.1221e+01 
21-09-12 05:45:07.172 - INFO: [epoch:  4, iter: 265,400, lr:(9.039e-05,)] l_pix: 1.2471e+01 
21-09-12 05:46:48.961 - INFO: [epoch:  4, iter: 265,500, lr:(9.033e-05,)] l_pix: 1.0677e+01 
21-09-12 05:48:31.933 - INFO: [epoch:  4, iter: 265,600, lr:(9.027e-05,)] l_pix: 1.0341e+01 
21-09-12 05:50:15.148 - INFO: [epoch:  4, iter: 265,700, lr:(9.021e-05,)] l_pix: 1.0185e+01 
21-09-12 05:51:57.777 - INFO: [epoch:  4, iter: 265,800, lr:(9.014e-05,)] l_pix: 1.2630e+01 
21-09-12 05:53:40.955 - INFO: [epoch:  4, iter: 265,900, lr:(9.008e-05,)] l_pix: 1.1204e+01 
21-09-12 05:55:23.601 - INFO: [epoch:  4, iter: 266,000, lr:(9.002e-05,)] l_pix: 1.3822e+01 
21-09-12 05:57:06.570 - INFO: [epoch:  4, iter: 266,100, lr:(8.996e-05,)] l_pix: 1.2762e+01 
21-09-12 05:58:49.896 - INFO: [epoch:  4, iter: 266,200, lr:(8.989e-05,)] l_pix: 1.0136e+01 
21-09-12 06:00:32.620 - INFO: [epoch:  4, iter: 266,300, lr:(8.983e-05,)] l_pix: 1.2273e+01 
21-09-12 06:02:15.487 - INFO: [epoch:  4, iter: 266,400, lr:(8.977e-05,)] l_pix: 1.0406e+01 
21-09-12 06:03:58.425 - INFO: [epoch:  4, iter: 266,500, lr:(8.971e-05,)] l_pix: 1.0617e+01 
21-09-12 06:05:41.298 - INFO: [epoch:  4, iter: 266,600, lr:(8.964e-05,)] l_pix: 1.1047e+01 
21-09-12 06:07:24.518 - INFO: [epoch:  4, iter: 266,700, lr:(8.958e-05,)] l_pix: 1.3031e+01 
21-09-12 06:09:07.520 - INFO: [epoch:  4, iter: 266,800, lr:(8.952e-05,)] l_pix: 1.0031e+01 
21-09-12 06:10:50.629 - INFO: [epoch:  4, iter: 266,900, lr:(8.946e-05,)] l_pix: 1.0846e+01 
21-09-12 06:12:33.562 - INFO: [epoch:  4, iter: 267,000, lr:(8.939e-05,)] l_pix: 1.1883e+01 
21-09-12 06:14:16.311 - INFO: [epoch:  4, iter: 267,100, lr:(8.933e-05,)] l_pix: 1.0402e+01 
21-09-12 06:15:59.318 - INFO: [epoch:  4, iter: 267,200, lr:(8.927e-05,)] l_pix: 1.0788e+01 
21-09-12 06:17:42.117 - INFO: [epoch:  4, iter: 267,300, lr:(8.921e-05,)] l_pix: 1.0629e+01 
21-09-12 06:19:24.980 - INFO: [epoch:  4, iter: 267,400, lr:(8.914e-05,)] l_pix: 1.1288e+01 
21-09-12 06:21:08.156 - INFO: [epoch:  4, iter: 267,500, lr:(8.908e-05,)] l_pix: 1.0249e+01 
21-09-12 06:22:51.094 - INFO: [epoch:  4, iter: 267,600, lr:(8.902e-05,)] l_pix: 1.1652e+01 
21-09-12 06:24:33.948 - INFO: [epoch:  4, iter: 267,700, lr:(8.896e-05,)] l_pix: 1.0084e+01 
21-09-12 06:26:16.559 - INFO: [epoch:  4, iter: 267,800, lr:(8.889e-05,)] l_pix: 1.1772e+01 
21-09-12 06:27:59.033 - INFO: [epoch:  4, iter: 267,900, lr:(8.883e-05,)] l_pix: 1.0198e+01 
21-09-12 06:29:41.662 - INFO: [epoch:  4, iter: 268,000, lr:(8.877e-05,)] l_pix: 1.0424e+01 
21-09-12 06:31:24.628 - INFO: [epoch:  4, iter: 268,100, lr:(8.871e-05,)] l_pix: 1.4523e+01 
21-09-12 06:33:07.378 - INFO: [epoch:  4, iter: 268,200, lr:(8.864e-05,)] l_pix: 1.3587e+01 
21-09-12 06:34:50.341 - INFO: [epoch:  4, iter: 268,300, lr:(8.858e-05,)] l_pix: 1.1830e+01 
21-09-12 06:36:33.272 - INFO: [epoch:  4, iter: 268,400, lr:(8.852e-05,)] l_pix: 9.3710e+00 
21-09-12 06:38:16.390 - INFO: [epoch:  4, iter: 268,500, lr:(8.846e-05,)] l_pix: 1.1413e+01 
21-09-12 06:39:59.227 - INFO: [epoch:  4, iter: 268,600, lr:(8.840e-05,)] l_pix: 1.1560e+01 
21-09-12 06:41:41.853 - INFO: [epoch:  4, iter: 268,700, lr:(8.833e-05,)] l_pix: 1.0921e+01 
21-09-12 06:43:24.479 - INFO: [epoch:  4, iter: 268,800, lr:(8.827e-05,)] l_pix: 1.1085e+01 
21-09-12 06:45:07.253 - INFO: [epoch:  4, iter: 268,900, lr:(8.821e-05,)] l_pix: 1.1684e+01 
21-09-12 06:46:49.218 - INFO: [epoch:  4, iter: 269,000, lr:(8.815e-05,)] l_pix: 1.0718e+01 
21-09-12 06:48:30.012 - INFO: [epoch:  4, iter: 269,100, lr:(8.808e-05,)] l_pix: 1.0581e+01 
21-09-12 06:50:11.065 - INFO: [epoch:  4, iter: 269,200, lr:(8.802e-05,)] l_pix: 1.0719e+01 
21-09-12 06:51:52.245 - INFO: [epoch:  4, iter: 269,300, lr:(8.796e-05,)] l_pix: 1.1639e+01 
21-09-12 06:53:33.682 - INFO: [epoch:  4, iter: 269,400, lr:(8.790e-05,)] l_pix: 1.1558e+01 
21-09-12 06:55:14.849 - INFO: [epoch:  4, iter: 269,500, lr:(8.783e-05,)] l_pix: 1.2059e+01 
21-09-12 06:56:55.931 - INFO: [epoch:  4, iter: 269,600, lr:(8.777e-05,)] l_pix: 1.3040e+01 
21-09-12 06:58:36.559 - INFO: [epoch:  4, iter: 269,700, lr:(8.771e-05,)] l_pix: 1.2844e+01 
21-09-12 07:00:17.371 - INFO: [epoch:  4, iter: 269,800, lr:(8.765e-05,)] l_pix: 9.9417e+00 
21-09-12 07:01:58.146 - INFO: [epoch:  4, iter: 269,900, lr:(8.758e-05,)] l_pix: 1.3156e+01 
21-09-12 07:03:38.731 - INFO: [epoch:  4, iter: 270,000, lr:(8.752e-05,)] l_pix: 1.3903e+01 
21-09-12 07:05:40.079 - INFO: # Validation # PSNR: 2.8842e+01
21-09-12 07:05:40.080 - INFO: Saving models and training states.
21-09-12 07:07:21.994 - INFO: [epoch:  4, iter: 270,100, lr:(8.746e-05,)] l_pix: 9.9230e+00 
21-09-12 07:09:03.053 - INFO: [epoch:  4, iter: 270,200, lr:(8.740e-05,)] l_pix: 1.1661e+01 
21-09-12 07:10:43.922 - INFO: [epoch:  4, iter: 270,300, lr:(8.734e-05,)] l_pix: 1.0415e+01 
21-09-12 07:12:24.713 - INFO: [epoch:  4, iter: 270,400, lr:(8.727e-05,)] l_pix: 1.0635e+01 
21-09-12 07:14:05.318 - INFO: [epoch:  4, iter: 270,500, lr:(8.721e-05,)] l_pix: 1.3993e+01 
21-09-12 07:15:46.214 - INFO: [epoch:  4, iter: 270,600, lr:(8.715e-05,)] l_pix: 1.0620e+01 
21-09-12 07:17:26.794 - INFO: [epoch:  4, iter: 270,700, lr:(8.709e-05,)] l_pix: 1.2099e+01 
21-09-12 07:19:07.953 - INFO: [epoch:  4, iter: 270,800, lr:(8.702e-05,)] l_pix: 1.0967e+01 
21-09-12 07:20:48.495 - INFO: [epoch:  4, iter: 270,900, lr:(8.696e-05,)] l_pix: 9.4785e+00 
21-09-12 07:22:29.426 - INFO: [epoch:  4, iter: 271,000, lr:(8.690e-05,)] l_pix: 1.2430e+01 
21-09-12 07:24:10.641 - INFO: [epoch:  4, iter: 271,100, lr:(8.684e-05,)] l_pix: 1.0260e+01 
21-09-12 07:25:51.669 - INFO: [epoch:  4, iter: 271,200, lr:(8.678e-05,)] l_pix: 1.1207e+01 
21-09-12 07:27:32.802 - INFO: [epoch:  4, iter: 271,300, lr:(8.671e-05,)] l_pix: 1.1395e+01 
21-09-12 07:29:13.901 - INFO: [epoch:  4, iter: 271,400, lr:(8.665e-05,)] l_pix: 9.9262e+00 
21-09-12 07:30:54.658 - INFO: [epoch:  4, iter: 271,500, lr:(8.659e-05,)] l_pix: 1.2072e+01 
21-09-12 07:32:35.283 - INFO: [epoch:  4, iter: 271,600, lr:(8.653e-05,)] l_pix: 9.1588e+00 
21-09-12 07:34:15.962 - INFO: [epoch:  4, iter: 271,700, lr:(8.646e-05,)] l_pix: 1.0605e+01 
21-09-12 07:35:56.653 - INFO: [epoch:  4, iter: 271,800, lr:(8.640e-05,)] l_pix: 1.1456e+01 
21-09-12 07:37:37.325 - INFO: [epoch:  4, iter: 271,900, lr:(8.634e-05,)] l_pix: 9.5256e+00 
21-09-12 07:39:18.575 - INFO: [epoch:  4, iter: 272,000, lr:(8.628e-05,)] l_pix: 1.0644e+01 
21-09-12 07:40:59.658 - INFO: [epoch:  4, iter: 272,100, lr:(8.622e-05,)] l_pix: 1.1164e+01 
21-09-12 07:42:40.765 - INFO: [epoch:  4, iter: 272,200, lr:(8.615e-05,)] l_pix: 1.0150e+01 
21-09-12 07:44:21.933 - INFO: [epoch:  4, iter: 272,300, lr:(8.609e-05,)] l_pix: 1.1195e+01 
21-09-12 07:46:03.040 - INFO: [epoch:  4, iter: 272,400, lr:(8.603e-05,)] l_pix: 1.1656e+01 
21-09-12 07:47:45.883 - INFO: [epoch:  4, iter: 272,500, lr:(8.597e-05,)] l_pix: 1.0041e+01 
21-09-12 07:49:28.913 - INFO: [epoch:  4, iter: 272,600, lr:(8.590e-05,)] l_pix: 1.0657e+01 
21-09-12 07:51:11.912 - INFO: [epoch:  4, iter: 272,700, lr:(8.584e-05,)] l_pix: 1.3245e+01 
21-09-12 07:52:55.057 - INFO: [epoch:  4, iter: 272,800, lr:(8.578e-05,)] l_pix: 1.2596e+01 
21-09-12 07:54:38.266 - INFO: [epoch:  4, iter: 272,900, lr:(8.572e-05,)] l_pix: 1.0278e+01 
21-09-12 07:56:21.720 - INFO: [epoch:  4, iter: 273,000, lr:(8.566e-05,)] l_pix: 1.1199e+01 
21-09-12 07:58:05.429 - INFO: [epoch:  4, iter: 273,100, lr:(8.559e-05,)] l_pix: 1.1003e+01 
21-09-12 07:59:48.813 - INFO: [epoch:  4, iter: 273,200, lr:(8.553e-05,)] l_pix: 1.0523e+01 
21-09-12 08:01:32.076 - INFO: [epoch:  4, iter: 273,300, lr:(8.547e-05,)] l_pix: 1.2213e+01 
21-09-12 08:03:14.843 - INFO: [epoch:  4, iter: 273,400, lr:(8.541e-05,)] l_pix: 1.0518e+01 
21-09-12 08:04:57.546 - INFO: [epoch:  4, iter: 273,500, lr:(8.534e-05,)] l_pix: 1.1156e+01 
21-09-12 08:06:40.520 - INFO: [epoch:  4, iter: 273,600, lr:(8.528e-05,)] l_pix: 1.0863e+01 
21-09-12 08:08:23.451 - INFO: [epoch:  4, iter: 273,700, lr:(8.522e-05,)] l_pix: 1.0243e+01 
21-09-12 08:10:06.668 - INFO: [epoch:  4, iter: 273,800, lr:(8.516e-05,)] l_pix: 1.0074e+01 
21-09-12 08:11:50.364 - INFO: [epoch:  4, iter: 273,900, lr:(8.510e-05,)] l_pix: 9.5354e+00 
21-09-12 08:13:33.680 - INFO: [epoch:  4, iter: 274,000, lr:(8.503e-05,)] l_pix: 1.0432e+01 
21-09-12 08:15:16.527 - INFO: [epoch:  4, iter: 274,100, lr:(8.497e-05,)] l_pix: 1.0667e+01 
21-09-12 08:16:59.476 - INFO: [epoch:  4, iter: 274,200, lr:(8.491e-05,)] l_pix: 9.2834e+00 
21-09-12 08:18:42.383 - INFO: [epoch:  4, iter: 274,300, lr:(8.485e-05,)] l_pix: 1.0761e+01 
21-09-12 08:20:25.267 - INFO: [epoch:  4, iter: 274,400, lr:(8.479e-05,)] l_pix: 1.0533e+01 
21-09-12 08:22:09.145 - INFO: [epoch:  4, iter: 274,500, lr:(8.472e-05,)] l_pix: 1.4375e+01 
21-09-12 08:23:53.431 - INFO: [epoch:  4, iter: 274,600, lr:(8.466e-05,)] l_pix: 4.9796e+01 
21-09-12 08:25:37.667 - INFO: [epoch:  4, iter: 274,700, lr:(8.460e-05,)] l_pix: 8.9265e+02 
21-09-12 08:27:21.378 - INFO: [epoch:  4, iter: 274,800, lr:(8.454e-05,)] l_pix: 1.4326e+02 
21-09-12 08:29:02.594 - INFO: [epoch:  4, iter: 274,900, lr:(8.448e-05,)] l_pix: 1.3850e+01 
21-09-12 08:30:44.032 - INFO: [epoch:  4, iter: 275,000, lr:(8.441e-05,)] l_pix: 1.2720e+01 
21-09-12 08:32:45.913 - INFO: # Validation # PSNR: 1.8533e+01
21-09-12 08:32:45.914 - INFO: Saving models and training states.
21-09-12 08:34:30.414 - INFO: [epoch:  4, iter: 275,100, lr:(8.435e-05,)] l_pix: 1.6675e+04 
21-09-12 08:36:13.620 - INFO: [epoch:  4, iter: 275,200, lr:(8.429e-05,)] l_pix: 1.5589e+01 
21-09-12 08:37:57.126 - INFO: [epoch:  4, iter: 275,300, lr:(8.423e-05,)] l_pix: 2.0358e+01 
21-09-12 08:39:40.531 - INFO: [epoch:  4, iter: 275,400, lr:(8.417e-05,)] l_pix: 1.0876e+03 
21-09-12 08:41:24.188 - INFO: [epoch:  4, iter: 275,500, lr:(8.410e-05,)] l_pix: 1.6960e+01 
21-09-12 08:43:07.524 - INFO: [epoch:  4, iter: 275,600, lr:(8.404e-05,)] l_pix: 1.1942e+02 
21-09-12 08:44:50.868 - INFO: [epoch:  4, iter: 275,700, lr:(8.398e-05,)] l_pix: 5.0660e+04 
