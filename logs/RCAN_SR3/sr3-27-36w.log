21-09-12 08:46:46.258 - INFO:   name: RCAN_branch3
  use_tb_logger: True
  model: sr
  distortion: sr
  scale: 4
  gpu_ids: [0]
  network_G:[
    which_model_G: RCAN
    n_resblocks: 20
    n_feats: 64
    n_resgroups: 10
    res_scale: 1
    n_colors: 3
    rgb_range: 255
    scale: 4
    reduction: 16
  ]
  datasets:[
    train:[
      name: DIV2K
      mode: LQGT_rcan
      dataroot_GT: E:\dataset\div2k\class\DIV2k_scale_sub_psnr_GT_class3
      dataroot_LQ: E:\dataset\div2k\class\DIV2k_scale_sub_psnr_LR_class3
      use_shuffle: True
      n_workers: 6
      batch_size: 16
      GT_size: 128
      use_flip: True
      use_rot: True
      color: RGB
      phase: train
      scale: 4
      data_type: img
    ]
    val:[
      name: Set5
      mode: LQGT_rcan
      dataroot_GT: E:\dataset\div2k\Set5_valid_sub\Set5_valid_sub\GT
      dataroot_LQ: E:\dataset\div2k\Set5_valid_sub\Set5_valid_sub\LR
      phase: val
      scale: 4
      data_type: img
    ]
  ]
  path:[
    pretrain_model_G: E:\paddle_paper\ClassSR_paddle-develop\experiments\RCAN_branch3\models\270000_G.pth
    strict_load: True
    resume_state: E:\paddle_paper\ClassSR_paddle-develop\experiments\RCAN_branch3\training_state\270000.state
    root: E:\paddle_paper\ClassSR_paddle-develop
    experiments_root: E:\paddle_paper\ClassSR_paddle-develop\experiments\RCAN_branch3
    models: E:\paddle_paper\ClassSR_paddle-develop\experiments\RCAN_branch3\models
    training_state: E:\paddle_paper\ClassSR_paddle-develop\experiments\RCAN_branch3\training_state
    log: E:\paddle_paper\ClassSR_paddle-develop\experiments\RCAN_branch3
    val_images: E:\paddle_paper\ClassSR_paddle-develop\experiments\RCAN_branch3\val_images
  ]
  train:[
    lr_G: 0.0002
    lr_scheme: CosineAnnealingLR_Restart
    beta1: 0.9
    beta2: 0.99
    niter: 500000
    warmup_iter: -1
    T_period: [500000]
    restarts: [500000]
    restart_weights: [1]
    eta_min: 1e-07
    lr_gamma: 0.5
    clear_state: 1000000
    pixel_criterion: l1
    pixel_weight: 1.0
    manual_seed: 9990
    val_freq: 5000
  ]
  logger:[
    print_freq: 100
    save_checkpoint_freq: 5000
  ]
  is_train: True
  dist: False

21-09-12 08:46:46.502 - INFO: Random seed: 9990
21-09-12 08:46:50.433 - INFO: Dataset [LQGTDataset_rcan - DIV2K] is created.
21-09-12 08:46:50.439 - INFO: Number of train images: 531,335, iters: 33,209
21-09-12 08:46:50.439 - INFO: Total epochs needed: 16 for iters 500,000
21-09-12 08:46:50.442 - INFO: Dataset [LQGTDataset_rcan - Set5] is created.
21-09-12 08:46:50.442 - INFO: Number of val images in [Set5]: 252
21-09-12 08:46:54.609 - INFO: Network G structure: RCAN, with parameters: 15,592,379
21-09-12 08:46:54.609 - INFO: RCAN(
  (sub_mean): MeanShift(3, 3, kernel_size=[1, 1], data_format=NCHW)
  (add_mean): MeanShift(3, 3, kernel_size=[1, 1], data_format=NCHW)
  (head): Sequential(
    (0): Conv2D(3, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
  )
  (body): Sequential(
    (0): ResidualGroup(
      (body): Sequential(
        (0): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (1): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (2): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (3): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (4): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (5): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (6): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (7): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (8): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (9): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (10): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (11): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (12): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (13): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (14): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (15): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (16): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (17): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (18): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (19): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (20): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
      )
    )
    (1): ResidualGroup(
      (body): Sequential(
        (0): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (1): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (2): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (3): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (4): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (5): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (6): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (7): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (8): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (9): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (10): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (11): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (12): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (13): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (14): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (15): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (16): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (17): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (18): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (19): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (20): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
      )
    )
    (2): ResidualGroup(
      (body): Sequential(
        (0): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (1): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (2): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (3): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (4): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (5): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (6): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (7): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (8): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (9): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (10): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (11): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (12): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (13): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (14): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (15): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (16): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (17): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (18): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (19): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (20): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
      )
    )
    (3): ResidualGroup(
      (body): Sequential(
        (0): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (1): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (2): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (3): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (4): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (5): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (6): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (7): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (8): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (9): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (10): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (11): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (12): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (13): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (14): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (15): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (16): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (17): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (18): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (19): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (20): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
      )
    )
    (4): ResidualGroup(
      (body): Sequential(
        (0): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (1): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (2): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (3): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (4): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (5): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (6): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (7): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (8): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (9): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (10): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (11): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (12): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (13): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (14): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (15): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (16): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (17): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (18): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (19): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (20): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
      )
    )
    (5): ResidualGroup(
      (body): Sequential(
        (0): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (1): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (2): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (3): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (4): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (5): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (6): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (7): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (8): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (9): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (10): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (11): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (12): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (13): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (14): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (15): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (16): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (17): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (18): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (19): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (20): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
      )
    )
    (6): ResidualGroup(
      (body): Sequential(
        (0): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (1): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (2): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (3): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (4): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (5): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (6): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (7): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (8): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (9): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (10): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (11): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (12): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (13): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (14): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (15): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (16): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (17): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (18): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (19): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (20): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
      )
    )
    (7): ResidualGroup(
      (body): Sequential(
        (0): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (1): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (2): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (3): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (4): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (5): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (6): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (7): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (8): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (9): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (10): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (11): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (12): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (13): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (14): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (15): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (16): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (17): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (18): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (19): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (20): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
      )
    )
    (8): ResidualGroup(
      (body): Sequential(
        (0): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (1): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (2): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (3): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (4): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (5): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (6): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (7): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (8): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (9): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (10): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (11): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (12): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (13): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (14): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (15): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (16): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (17): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (18): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (19): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (20): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
      )
    )
    (9): ResidualGroup(
      (body): Sequential(
        (0): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (1): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (2): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (3): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (4): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (5): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (6): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (7): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (8): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (9): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (10): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (11): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (12): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (13): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (14): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (15): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (16): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (17): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (18): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (19): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (20): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
      )
    )
    (10): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2D(64, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
      (1): PixelShuffle(upscale_factor=2)
      (2): Conv2D(64, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
      (3): PixelShuffle(upscale_factor=2)
    )
    (1): Conv2D(64, 3, kernel_size=[3, 3], padding=1, data_format=NCHW)
  )
)
21-09-12 08:46:54.632 - INFO: Loading model for G [E:\paddle_paper\ClassSR_paddle-develop\experiments\RCAN_branch3\models\270000_G.pth] ...
21-09-12 08:46:55.226 - INFO: Model [SRModel] is created.
21-09-12 08:46:55.227 - INFO: Resuming training from epoch: 4, iter: 270000.
21-09-12 08:46:55.227 - INFO: Start training from epoch: 4, iter: 270000
21-09-12 08:48:43.716 - INFO: [epoch:  4, iter: 270,100, lr:(8.746e-05,)] l_pix: 1.1054e+01 
21-09-12 08:50:27.691 - INFO: [epoch:  4, iter: 270,200, lr:(8.740e-05,)] l_pix: 1.0789e+01 
21-09-12 08:52:08.579 - INFO: [epoch:  4, iter: 270,300, lr:(8.734e-05,)] l_pix: 1.3013e+01 
21-09-12 08:53:49.194 - INFO: [epoch:  4, iter: 270,400, lr:(8.727e-05,)] l_pix: 1.1885e+01 
21-09-12 08:55:29.376 - INFO: [epoch:  4, iter: 270,500, lr:(8.721e-05,)] l_pix: 1.1155e+01 
21-09-12 08:57:09.561 - INFO: [epoch:  4, iter: 270,600, lr:(8.715e-05,)] l_pix: 1.1365e+01 
21-09-12 08:58:49.812 - INFO: [epoch:  4, iter: 270,700, lr:(8.709e-05,)] l_pix: 1.1378e+01 
21-09-12 09:00:30.083 - INFO: [epoch:  4, iter: 270,800, lr:(8.702e-05,)] l_pix: 1.0745e+01 
21-09-12 09:02:10.393 - INFO: [epoch:  4, iter: 270,900, lr:(8.696e-05,)] l_pix: 1.3154e+01 
21-09-12 09:03:51.062 - INFO: [epoch:  4, iter: 271,000, lr:(8.690e-05,)] l_pix: 1.2697e+01 
21-09-12 09:05:32.173 - INFO: [epoch:  4, iter: 271,100, lr:(8.684e-05,)] l_pix: 1.0544e+01 
21-09-12 09:07:13.049 - INFO: [epoch:  4, iter: 271,200, lr:(8.678e-05,)] l_pix: 1.1918e+01 
21-09-12 09:08:53.620 - INFO: [epoch:  4, iter: 271,300, lr:(8.671e-05,)] l_pix: 1.1499e+01 
21-09-12 09:10:34.184 - INFO: [epoch:  4, iter: 271,400, lr:(8.665e-05,)] l_pix: 1.1107e+01 
21-09-12 09:12:14.314 - INFO: [epoch:  4, iter: 271,500, lr:(8.659e-05,)] l_pix: 1.2476e+01 
21-09-12 09:13:54.431 - INFO: [epoch:  4, iter: 271,600, lr:(8.653e-05,)] l_pix: 1.1749e+01 
21-09-12 09:15:34.564 - INFO: [epoch:  4, iter: 271,700, lr:(8.646e-05,)] l_pix: 1.2764e+01 
21-09-12 09:17:15.603 - INFO: [epoch:  4, iter: 271,800, lr:(8.640e-05,)] l_pix: 1.2510e+01 
21-09-12 09:18:57.248 - INFO: [epoch:  4, iter: 271,900, lr:(8.634e-05,)] l_pix: 1.1171e+01 
21-09-12 09:20:39.425 - INFO: [epoch:  4, iter: 272,000, lr:(8.628e-05,)] l_pix: 1.2495e+01 
21-09-12 09:22:21.828 - INFO: [epoch:  4, iter: 272,100, lr:(8.622e-05,)] l_pix: 1.1710e+01 
21-09-12 09:24:03.909 - INFO: [epoch:  4, iter: 272,200, lr:(8.615e-05,)] l_pix: 1.0476e+01 
21-09-12 09:25:44.818 - INFO: [epoch:  4, iter: 272,300, lr:(8.609e-05,)] l_pix: 1.0296e+01 
21-09-12 09:27:25.432 - INFO: [epoch:  4, iter: 272,400, lr:(8.603e-05,)] l_pix: 1.3107e+01 
21-09-12 09:29:06.069 - INFO: [epoch:  4, iter: 272,500, lr:(8.597e-05,)] l_pix: 8.5991e+00 
21-09-12 09:30:48.808 - INFO: [epoch:  4, iter: 272,600, lr:(8.590e-05,)] l_pix: 1.2912e+01 
21-09-12 09:32:28.833 - INFO: [epoch:  4, iter: 272,700, lr:(8.584e-05,)] l_pix: 1.1394e+01 
21-09-12 09:34:08.789 - INFO: [epoch:  4, iter: 272,800, lr:(8.578e-05,)] l_pix: 1.1473e+01 
21-09-12 09:35:49.825 - INFO: [epoch:  4, iter: 272,900, lr:(8.572e-05,)] l_pix: 1.0985e+01 
21-09-12 09:37:31.900 - INFO: [epoch:  4, iter: 273,000, lr:(8.566e-05,)] l_pix: 1.2114e+01 
21-09-12 09:39:13.545 - INFO: [epoch:  4, iter: 273,100, lr:(8.559e-05,)] l_pix: 1.3372e+01 
21-09-12 09:40:54.174 - INFO: [epoch:  4, iter: 273,200, lr:(8.553e-05,)] l_pix: 1.1816e+01 
21-09-12 09:42:36.048 - INFO: [epoch:  4, iter: 273,300, lr:(8.547e-05,)] l_pix: 1.1304e+01 
21-09-12 09:44:18.447 - INFO: [epoch:  4, iter: 273,400, lr:(8.541e-05,)] l_pix: 1.1624e+01 
21-09-12 09:46:00.712 - INFO: [epoch:  4, iter: 273,500, lr:(8.534e-05,)] l_pix: 1.1336e+01 
21-09-12 09:47:43.119 - INFO: [epoch:  4, iter: 273,600, lr:(8.528e-05,)] l_pix: 1.0260e+01 
21-09-12 09:49:25.672 - INFO: [epoch:  4, iter: 273,700, lr:(8.522e-05,)] l_pix: 1.1385e+01 
21-09-12 09:51:08.575 - INFO: [epoch:  4, iter: 273,800, lr:(8.516e-05,)] l_pix: 1.1125e+01 
21-09-12 09:52:51.356 - INFO: [epoch:  4, iter: 273,900, lr:(8.510e-05,)] l_pix: 1.1009e+01 
21-09-12 09:54:33.656 - INFO: [epoch:  4, iter: 274,000, lr:(8.503e-05,)] l_pix: 1.0067e+01 
21-09-12 09:56:16.346 - INFO: [epoch:  4, iter: 274,100, lr:(8.497e-05,)] l_pix: 1.1207e+01 
21-09-12 09:57:59.016 - INFO: [epoch:  4, iter: 274,200, lr:(8.491e-05,)] l_pix: 1.1834e+01 
21-09-12 09:59:41.667 - INFO: [epoch:  4, iter: 274,300, lr:(8.485e-05,)] l_pix: 9.7932e+00 
21-09-12 10:01:24.657 - INFO: [epoch:  4, iter: 274,400, lr:(8.479e-05,)] l_pix: 1.0502e+01 
21-09-12 10:03:07.660 - INFO: [epoch:  4, iter: 274,500, lr:(8.472e-05,)] l_pix: 1.0094e+01 
21-09-12 10:04:50.294 - INFO: [epoch:  4, iter: 274,600, lr:(8.466e-05,)] l_pix: 1.2054e+01 
21-09-12 10:06:33.146 - INFO: [epoch:  4, iter: 274,700, lr:(8.460e-05,)] l_pix: 9.4233e+00 
21-09-12 10:08:15.694 - INFO: [epoch:  4, iter: 274,800, lr:(8.454e-05,)] l_pix: 1.1028e+01 
21-09-12 10:09:58.112 - INFO: [epoch:  4, iter: 274,900, lr:(8.448e-05,)] l_pix: 1.1449e+01 
21-09-12 10:11:40.460 - INFO: [epoch:  4, iter: 275,000, lr:(8.441e-05,)] l_pix: 1.0941e+01 
21-09-12 10:13:43.779 - INFO: # Validation # PSNR: 2.8886e+01
21-09-12 10:13:43.779 - INFO: Saving models and training states.
21-09-12 10:15:25.629 - INFO: [epoch:  4, iter: 275,100, lr:(8.435e-05,)] l_pix: 1.0749e+01 
21-09-12 10:17:06.670 - INFO: [epoch:  4, iter: 275,200, lr:(8.429e-05,)] l_pix: 1.2127e+01 
21-09-12 10:18:47.465 - INFO: [epoch:  4, iter: 275,300, lr:(8.423e-05,)] l_pix: 9.4759e+00 
21-09-12 10:20:29.222 - INFO: [epoch:  4, iter: 275,400, lr:(8.417e-05,)] l_pix: 9.5465e+00 
21-09-12 10:22:10.697 - INFO: [epoch:  4, iter: 275,500, lr:(8.410e-05,)] l_pix: 1.1518e+01 
21-09-12 10:23:51.007 - INFO: [epoch:  4, iter: 275,600, lr:(8.404e-05,)] l_pix: 1.0562e+01 
21-09-12 10:25:31.413 - INFO: [epoch:  4, iter: 275,700, lr:(8.398e-05,)] l_pix: 1.1117e+01 
21-09-12 10:27:12.858 - INFO: [epoch:  4, iter: 275,800, lr:(8.392e-05,)] l_pix: 1.2020e+01 
21-09-12 10:28:53.474 - INFO: [epoch:  4, iter: 275,900, lr:(8.386e-05,)] l_pix: 1.2498e+01 
21-09-12 10:30:34.395 - INFO: [epoch:  4, iter: 276,000, lr:(8.379e-05,)] l_pix: 1.1402e+01 
21-09-12 10:32:15.373 - INFO: [epoch:  4, iter: 276,100, lr:(8.373e-05,)] l_pix: 1.2616e+01 
21-09-12 10:33:56.270 - INFO: [epoch:  4, iter: 276,200, lr:(8.367e-05,)] l_pix: 1.2691e+01 
21-09-12 10:35:37.525 - INFO: [epoch:  4, iter: 276,300, lr:(8.361e-05,)] l_pix: 1.5517e+01 
21-09-12 10:37:18.548 - INFO: [epoch:  4, iter: 276,400, lr:(8.355e-05,)] l_pix: 1.2090e+01 
21-09-12 10:38:59.250 - INFO: [epoch:  4, iter: 276,500, lr:(8.348e-05,)] l_pix: 9.5045e+00 
21-09-12 10:40:39.688 - INFO: [epoch:  4, iter: 276,600, lr:(8.342e-05,)] l_pix: 1.1290e+01 
21-09-12 10:42:20.112 - INFO: [epoch:  4, iter: 276,700, lr:(8.336e-05,)] l_pix: 1.1547e+01 
21-09-12 10:44:00.840 - INFO: [epoch:  4, iter: 276,800, lr:(8.330e-05,)] l_pix: 1.0979e+01 
21-09-12 10:45:41.792 - INFO: [epoch:  4, iter: 276,900, lr:(8.324e-05,)] l_pix: 1.3234e+01 
21-09-12 10:47:23.095 - INFO: [epoch:  4, iter: 277,000, lr:(8.317e-05,)] l_pix: 1.0047e+01 
21-09-12 10:49:04.384 - INFO: [epoch:  4, iter: 277,100, lr:(8.311e-05,)] l_pix: 1.0770e+01 
21-09-12 10:50:45.694 - INFO: [epoch:  4, iter: 277,200, lr:(8.305e-05,)] l_pix: 1.2499e+01 
21-09-12 10:52:27.494 - INFO: [epoch:  4, iter: 277,300, lr:(8.299e-05,)] l_pix: 1.1642e+01 
21-09-12 10:54:09.050 - INFO: [epoch:  4, iter: 277,400, lr:(8.293e-05,)] l_pix: 9.8197e+00 
21-09-12 10:55:49.564 - INFO: [epoch:  4, iter: 277,500, lr:(8.287e-05,)] l_pix: 1.3522e+01 
21-09-12 10:57:29.920 - INFO: [epoch:  4, iter: 277,600, lr:(8.280e-05,)] l_pix: 1.0478e+01 
21-09-12 10:59:10.490 - INFO: [epoch:  4, iter: 277,700, lr:(8.274e-05,)] l_pix: 9.7130e+00 
21-09-12 11:00:51.970 - INFO: [epoch:  4, iter: 277,800, lr:(8.268e-05,)] l_pix: 1.2659e+01 
21-09-12 11:02:34.842 - INFO: [epoch:  4, iter: 277,900, lr:(8.262e-05,)] l_pix: 1.2735e+01 
21-09-12 11:04:17.720 - INFO: [epoch:  4, iter: 278,000, lr:(8.256e-05,)] l_pix: 1.1624e+01 
21-09-12 11:05:59.189 - INFO: [epoch:  4, iter: 278,100, lr:(8.249e-05,)] l_pix: 1.2466e+01 
21-09-12 11:07:43.614 - INFO: [epoch:  4, iter: 278,200, lr:(8.243e-05,)] l_pix: 1.1973e+01 
21-09-12 11:09:27.771 - INFO: [epoch:  4, iter: 278,300, lr:(8.237e-05,)] l_pix: 1.1910e+01 
21-09-12 11:11:11.456 - INFO: [epoch:  4, iter: 278,400, lr:(8.231e-05,)] l_pix: 1.2407e+01 
21-09-12 11:12:54.922 - INFO: [epoch:  4, iter: 278,500, lr:(8.225e-05,)] l_pix: 9.8679e+00 
21-09-12 11:14:38.886 - INFO: [epoch:  4, iter: 278,600, lr:(8.218e-05,)] l_pix: 1.1731e+01 
21-09-12 11:16:22.983 - INFO: [epoch:  4, iter: 278,700, lr:(8.212e-05,)] l_pix: 1.3087e+01 
21-09-12 11:18:07.010 - INFO: [epoch:  4, iter: 278,800, lr:(8.206e-05,)] l_pix: 9.8910e+00 
21-09-12 11:19:51.105 - INFO: [epoch:  4, iter: 278,900, lr:(8.200e-05,)] l_pix: 1.2541e+01 
21-09-12 11:21:35.037 - INFO: [epoch:  4, iter: 279,000, lr:(8.194e-05,)] l_pix: 1.0358e+01 
21-09-12 11:23:19.573 - INFO: [epoch:  4, iter: 279,100, lr:(8.188e-05,)] l_pix: 1.0473e+01 
21-09-12 11:25:03.907 - INFO: [epoch:  4, iter: 279,200, lr:(8.181e-05,)] l_pix: 1.1997e+01 
21-09-12 11:26:48.178 - INFO: [epoch:  4, iter: 279,300, lr:(8.175e-05,)] l_pix: 1.0433e+01 
21-09-12 11:28:32.710 - INFO: [epoch:  4, iter: 279,400, lr:(8.169e-05,)] l_pix: 1.1946e+01 
21-09-12 11:30:16.934 - INFO: [epoch:  4, iter: 279,500, lr:(8.163e-05,)] l_pix: 1.0005e+01 
21-09-12 11:31:58.986 - INFO: [epoch:  4, iter: 279,600, lr:(8.157e-05,)] l_pix: 1.0188e+01 
21-09-12 11:33:39.553 - INFO: [epoch:  4, iter: 279,700, lr:(8.151e-05,)] l_pix: 9.8766e+00 
21-09-12 11:35:20.126 - INFO: [epoch:  4, iter: 279,800, lr:(8.144e-05,)] l_pix: 1.0284e+01 
21-09-12 11:37:02.215 - INFO: [epoch:  4, iter: 279,900, lr:(8.138e-05,)] l_pix: 1.2426e+01 
21-09-12 11:38:44.923 - INFO: [epoch:  4, iter: 280,000, lr:(8.132e-05,)] l_pix: 1.1601e+01 
21-09-12 11:40:45.577 - INFO: # Validation # PSNR: 2.8800e+01
21-09-12 11:40:45.577 - INFO: Saving models and training states.
21-09-12 11:42:27.182 - INFO: [epoch:  4, iter: 280,100, lr:(8.126e-05,)] l_pix: 1.2035e+01 
21-09-12 11:44:09.691 - INFO: [epoch:  4, iter: 280,200, lr:(8.120e-05,)] l_pix: 1.1269e+01 
21-09-12 11:45:52.707 - INFO: [epoch:  4, iter: 280,300, lr:(8.114e-05,)] l_pix: 1.2155e+01 
21-09-12 11:47:35.451 - INFO: [epoch:  4, iter: 280,400, lr:(8.107e-05,)] l_pix: 1.1503e+01 
21-09-12 11:49:19.210 - INFO: [epoch:  4, iter: 280,500, lr:(8.101e-05,)] l_pix: 9.7387e+00 
21-09-12 11:51:02.406 - INFO: [epoch:  4, iter: 280,600, lr:(8.095e-05,)] l_pix: 1.2012e+01 
21-09-12 11:52:45.500 - INFO: [epoch:  4, iter: 280,700, lr:(8.089e-05,)] l_pix: 1.1301e+01 
21-09-12 11:54:28.920 - INFO: [epoch:  4, iter: 280,800, lr:(8.083e-05,)] l_pix: 1.0578e+01 
21-09-12 11:56:11.938 - INFO: [epoch:  4, iter: 280,900, lr:(8.077e-05,)] l_pix: 1.1082e+01 
21-09-12 11:57:54.734 - INFO: [epoch:  4, iter: 281,000, lr:(8.070e-05,)] l_pix: 1.1299e+01 
21-09-12 11:59:37.681 - INFO: [epoch:  4, iter: 281,100, lr:(8.064e-05,)] l_pix: 9.9544e+00 
21-09-12 12:01:20.432 - INFO: [epoch:  4, iter: 281,200, lr:(8.058e-05,)] l_pix: 1.3405e+01 
21-09-12 12:03:03.515 - INFO: [epoch:  4, iter: 281,300, lr:(8.052e-05,)] l_pix: 1.2860e+01 
21-09-12 12:04:46.993 - INFO: [epoch:  4, iter: 281,400, lr:(8.046e-05,)] l_pix: 1.0881e+01 
21-09-12 12:06:30.281 - INFO: [epoch:  4, iter: 281,500, lr:(8.040e-05,)] l_pix: 1.1004e+01 
21-09-12 12:08:13.815 - INFO: [epoch:  4, iter: 281,600, lr:(8.033e-05,)] l_pix: 1.1394e+01 
21-09-12 12:09:56.345 - INFO: [epoch:  4, iter: 281,700, lr:(8.027e-05,)] l_pix: 1.1863e+01 
21-09-12 12:11:39.116 - INFO: [epoch:  4, iter: 281,800, lr:(8.021e-05,)] l_pix: 1.1224e+01 
21-09-12 12:13:22.023 - INFO: [epoch:  4, iter: 281,900, lr:(8.015e-05,)] l_pix: 1.1160e+01 
21-09-12 12:15:04.469 - INFO: [epoch:  4, iter: 282,000, lr:(8.009e-05,)] l_pix: 1.2036e+01 
21-09-12 12:16:47.316 - INFO: [epoch:  4, iter: 282,100, lr:(8.003e-05,)] l_pix: 1.3568e+01 
21-09-12 12:18:30.310 - INFO: [epoch:  4, iter: 282,200, lr:(7.997e-05,)] l_pix: 1.1003e+01 
21-09-12 12:20:13.773 - INFO: [epoch:  4, iter: 282,300, lr:(7.990e-05,)] l_pix: 1.1047e+01 
21-09-12 12:21:56.630 - INFO: [epoch:  4, iter: 282,400, lr:(7.984e-05,)] l_pix: 1.2462e+01 
21-09-12 12:23:43.410 - INFO: [epoch:  4, iter: 282,500, lr:(7.978e-05,)] l_pix: 1.3061e+01 
21-09-12 12:25:29.934 - INFO: [epoch:  4, iter: 282,600, lr:(7.972e-05,)] l_pix: 9.9154e+00 
21-09-12 12:27:16.967 - INFO: [epoch:  4, iter: 282,700, lr:(7.966e-05,)] l_pix: 1.0606e+01 
21-09-12 12:29:02.042 - INFO: [epoch:  4, iter: 282,800, lr:(7.960e-05,)] l_pix: 1.1950e+01 
21-09-12 12:30:46.399 - INFO: [epoch:  4, iter: 282,900, lr:(7.953e-05,)] l_pix: 1.1245e+01 
21-09-12 12:32:30.474 - INFO: [epoch:  4, iter: 283,000, lr:(7.947e-05,)] l_pix: 1.0560e+01 
21-09-12 12:34:14.957 - INFO: [epoch:  4, iter: 283,100, lr:(7.941e-05,)] l_pix: 1.2901e+01 
21-09-12 12:36:00.749 - INFO: [epoch:  4, iter: 283,200, lr:(7.935e-05,)] l_pix: 1.0890e+01 
21-09-12 12:37:45.970 - INFO: [epoch:  4, iter: 283,300, lr:(7.929e-05,)] l_pix: 1.1584e+01 
21-09-12 12:39:31.403 - INFO: [epoch:  4, iter: 283,400, lr:(7.923e-05,)] l_pix: 1.2190e+01 
21-09-12 12:41:16.142 - INFO: [epoch:  4, iter: 283,500, lr:(7.917e-05,)] l_pix: 9.9694e+00 
21-09-12 12:43:00.877 - INFO: [epoch:  4, iter: 283,600, lr:(7.910e-05,)] l_pix: 1.1370e+01 
21-09-12 12:44:45.473 - INFO: [epoch:  4, iter: 283,700, lr:(7.904e-05,)] l_pix: 1.0973e+01 
21-09-12 12:46:27.671 - INFO: [epoch:  4, iter: 283,800, lr:(7.898e-05,)] l_pix: 1.1651e+01 
21-09-12 12:48:08.261 - INFO: [epoch:  4, iter: 283,900, lr:(7.892e-05,)] l_pix: 1.0039e+01 
21-09-12 12:49:49.005 - INFO: [epoch:  4, iter: 284,000, lr:(7.886e-05,)] l_pix: 1.0636e+01 
21-09-12 12:51:30.032 - INFO: [epoch:  4, iter: 284,100, lr:(7.880e-05,)] l_pix: 1.0731e+01 
21-09-12 12:53:14.965 - INFO: [epoch:  4, iter: 284,200, lr:(7.874e-05,)] l_pix: 1.1450e+01 
21-09-12 12:54:59.749 - INFO: [epoch:  4, iter: 284,300, lr:(7.868e-05,)] l_pix: 1.2495e+01 
21-09-12 12:56:41.629 - INFO: [epoch:  4, iter: 284,400, lr:(7.861e-05,)] l_pix: 1.2670e+01 
21-09-12 12:58:22.662 - INFO: [epoch:  4, iter: 284,500, lr:(7.855e-05,)] l_pix: 1.1746e+01 
21-09-12 13:00:03.606 - INFO: [epoch:  4, iter: 284,600, lr:(7.849e-05,)] l_pix: 1.1717e+01 
21-09-12 13:01:44.447 - INFO: [epoch:  4, iter: 284,700, lr:(7.843e-05,)] l_pix: 1.1504e+01 
21-09-12 13:03:28.818 - INFO: [epoch:  4, iter: 284,800, lr:(7.837e-05,)] l_pix: 9.6077e+00 
21-09-12 13:05:10.310 - INFO: [epoch:  4, iter: 284,900, lr:(7.831e-05,)] l_pix: 1.2759e+01 
21-09-12 13:06:53.744 - INFO: [epoch:  4, iter: 285,000, lr:(7.825e-05,)] l_pix: 1.3444e+01 
21-09-12 13:08:59.545 - INFO: # Validation # PSNR: 2.8888e+01
21-09-12 13:08:59.545 - INFO: Saving models and training states.
21-09-12 13:10:44.946 - INFO: [epoch:  4, iter: 285,100, lr:(7.818e-05,)] l_pix: 1.1313e+01 
21-09-12 13:12:29.264 - INFO: [epoch:  4, iter: 285,200, lr:(7.812e-05,)] l_pix: 1.0925e+01 
21-09-12 13:14:14.055 - INFO: [epoch:  4, iter: 285,300, lr:(7.806e-05,)] l_pix: 9.8650e+00 
21-09-12 13:15:59.181 - INFO: [epoch:  4, iter: 285,400, lr:(7.800e-05,)] l_pix: 9.3043e+00 
21-09-12 13:17:44.280 - INFO: [epoch:  4, iter: 285,500, lr:(7.794e-05,)] l_pix: 1.2019e+01 
21-09-12 13:19:29.264 - INFO: [epoch:  4, iter: 285,600, lr:(7.788e-05,)] l_pix: 1.3017e+01 
21-09-12 13:21:13.993 - INFO: [epoch:  4, iter: 285,700, lr:(7.782e-05,)] l_pix: 1.1100e+01 
21-09-12 13:22:58.494 - INFO: [epoch:  4, iter: 285,800, lr:(7.776e-05,)] l_pix: 1.1820e+01 
21-09-12 13:24:43.331 - INFO: [epoch:  4, iter: 285,900, lr:(7.769e-05,)] l_pix: 1.1739e+01 
21-09-12 13:26:28.333 - INFO: [epoch:  4, iter: 286,000, lr:(7.763e-05,)] l_pix: 1.2395e+01 
21-09-12 13:28:13.486 - INFO: [epoch:  4, iter: 286,100, lr:(7.757e-05,)] l_pix: 1.2881e+01 
21-09-12 13:29:58.857 - INFO: [epoch:  4, iter: 286,200, lr:(7.751e-05,)] l_pix: 1.0545e+01 
21-09-12 13:31:43.410 - INFO: [epoch:  4, iter: 286,300, lr:(7.745e-05,)] l_pix: 1.1561e+01 
21-09-12 13:33:27.930 - INFO: [epoch:  4, iter: 286,400, lr:(7.739e-05,)] l_pix: 1.2880e+01 
21-09-12 13:35:13.039 - INFO: [epoch:  4, iter: 286,500, lr:(7.733e-05,)] l_pix: 1.0004e+01 
21-09-12 13:36:58.280 - INFO: [epoch:  4, iter: 286,600, lr:(7.727e-05,)] l_pix: 1.1438e+01 
21-09-12 13:38:43.558 - INFO: [epoch:  4, iter: 286,700, lr:(7.721e-05,)] l_pix: 1.0717e+01 
21-09-12 13:40:28.556 - INFO: [epoch:  4, iter: 286,800, lr:(7.714e-05,)] l_pix: 1.2069e+01 
21-09-12 13:42:13.155 - INFO: [epoch:  4, iter: 286,900, lr:(7.708e-05,)] l_pix: 1.1641e+01 
21-09-12 13:43:57.972 - INFO: [epoch:  4, iter: 287,000, lr:(7.702e-05,)] l_pix: 1.1060e+01 
21-09-12 13:45:43.251 - INFO: [epoch:  4, iter: 287,100, lr:(7.696e-05,)] l_pix: 1.1218e+01 
21-09-12 13:47:28.600 - INFO: [epoch:  4, iter: 287,200, lr:(7.690e-05,)] l_pix: 9.0161e+00 
21-09-12 13:49:13.840 - INFO: [epoch:  4, iter: 287,300, lr:(7.684e-05,)] l_pix: 1.1374e+01 
21-09-12 13:50:58.650 - INFO: [epoch:  4, iter: 287,400, lr:(7.678e-05,)] l_pix: 1.0139e+01 
21-09-12 13:52:43.117 - INFO: [epoch:  4, iter: 287,500, lr:(7.672e-05,)] l_pix: 9.8493e+00 
21-09-12 13:54:28.077 - INFO: [epoch:  4, iter: 287,600, lr:(7.666e-05,)] l_pix: 1.1835e+01 
21-09-12 13:56:13.373 - INFO: [epoch:  4, iter: 287,700, lr:(7.659e-05,)] l_pix: 1.1578e+01 
21-09-12 13:57:58.382 - INFO: [epoch:  4, iter: 287,800, lr:(7.653e-05,)] l_pix: 1.3097e+01 
21-09-12 13:59:43.649 - INFO: [epoch:  4, iter: 287,900, lr:(7.647e-05,)] l_pix: 1.0500e+01 
21-09-12 14:01:28.297 - INFO: [epoch:  4, iter: 288,000, lr:(7.641e-05,)] l_pix: 1.1194e+01 
21-09-12 14:03:12.907 - INFO: [epoch:  4, iter: 288,100, lr:(7.635e-05,)] l_pix: 1.0914e+01 
21-09-12 14:04:58.009 - INFO: [epoch:  4, iter: 288,200, lr:(7.629e-05,)] l_pix: 1.1385e+01 
21-09-12 14:06:43.978 - INFO: [epoch:  4, iter: 288,300, lr:(7.623e-05,)] l_pix: 1.1311e+01 
21-09-12 14:08:28.201 - INFO: [epoch:  4, iter: 288,400, lr:(7.617e-05,)] l_pix: 1.0401e+01 
21-09-12 14:10:11.554 - INFO: [epoch:  4, iter: 288,500, lr:(7.611e-05,)] l_pix: 1.0786e+01 
21-09-12 14:11:55.894 - INFO: [epoch:  4, iter: 288,600, lr:(7.605e-05,)] l_pix: 1.1214e+01 
21-09-12 14:13:40.618 - INFO: [epoch:  4, iter: 288,700, lr:(7.598e-05,)] l_pix: 1.0263e+01 
21-09-12 14:15:26.052 - INFO: [epoch:  4, iter: 288,800, lr:(7.592e-05,)] l_pix: 9.7626e+00 
21-09-12 14:17:10.928 - INFO: [epoch:  4, iter: 288,900, lr:(7.586e-05,)] l_pix: 1.2266e+01 
21-09-12 14:18:56.013 - INFO: [epoch:  4, iter: 289,000, lr:(7.580e-05,)] l_pix: 1.1610e+01 
21-09-12 14:20:40.774 - INFO: [epoch:  4, iter: 289,100, lr:(7.574e-05,)] l_pix: 1.1087e+01 
21-09-12 14:22:25.404 - INFO: [epoch:  4, iter: 289,200, lr:(7.568e-05,)] l_pix: 1.1527e+01 
21-09-12 14:24:09.841 - INFO: [epoch:  4, iter: 289,300, lr:(7.562e-05,)] l_pix: 1.0861e+01 
21-09-12 14:25:54.632 - INFO: [epoch:  4, iter: 289,400, lr:(7.556e-05,)] l_pix: 1.1349e+01 
21-09-12 14:27:39.912 - INFO: [epoch:  4, iter: 289,500, lr:(7.550e-05,)] l_pix: 1.1803e+01 
21-09-12 14:29:25.288 - INFO: [epoch:  4, iter: 289,600, lr:(7.544e-05,)] l_pix: 1.1120e+01 
21-09-12 14:31:10.276 - INFO: [epoch:  4, iter: 289,700, lr:(7.538e-05,)] l_pix: 1.3811e+01 
21-09-12 14:32:55.575 - INFO: [epoch:  4, iter: 289,800, lr:(7.531e-05,)] l_pix: 1.1298e+01 
21-09-12 14:34:41.684 - INFO: [epoch:  4, iter: 289,900, lr:(7.525e-05,)] l_pix: 1.2690e+01 
21-09-12 14:36:29.157 - INFO: [epoch:  4, iter: 290,000, lr:(7.519e-05,)] l_pix: 1.4178e+01 
21-09-12 14:38:36.530 - INFO: # Validation # PSNR: 2.8840e+01
21-09-12 14:38:36.530 - INFO: Saving models and training states.
21-09-12 14:40:32.210 - INFO: [epoch:  4, iter: 290,100, lr:(7.513e-05,)] l_pix: 1.1946e+01 
21-09-12 14:42:26.535 - INFO: [epoch:  4, iter: 290,200, lr:(7.507e-05,)] l_pix: 1.1382e+01 
21-09-12 14:44:20.089 - INFO: [epoch:  4, iter: 290,300, lr:(7.501e-05,)] l_pix: 1.0753e+01 
21-09-12 14:46:13.545 - INFO: [epoch:  4, iter: 290,400, lr:(7.495e-05,)] l_pix: 1.1907e+01 
21-09-12 14:48:08.326 - INFO: [epoch:  4, iter: 290,500, lr:(7.489e-05,)] l_pix: 1.0753e+01 
21-09-12 14:50:01.345 - INFO: [epoch:  4, iter: 290,600, lr:(7.483e-05,)] l_pix: 1.1761e+01 
21-09-12 14:51:57.134 - INFO: [epoch:  4, iter: 290,700, lr:(7.477e-05,)] l_pix: 1.2499e+01 
21-09-12 14:53:41.976 - INFO: [epoch:  4, iter: 290,800, lr:(7.471e-05,)] l_pix: 1.1040e+01 
21-09-12 14:55:39.873 - INFO: [epoch:  4, iter: 290,900, lr:(7.465e-05,)] l_pix: 1.0476e+01 
21-09-12 14:57:33.403 - INFO: [epoch:  4, iter: 291,000, lr:(7.459e-05,)] l_pix: 1.2663e+01 
21-09-12 14:59:32.947 - INFO: [epoch:  4, iter: 291,100, lr:(7.452e-05,)] l_pix: 9.4397e+00 
21-09-12 15:01:32.395 - INFO: [epoch:  4, iter: 291,200, lr:(7.446e-05,)] l_pix: 1.2042e+01 
21-09-12 15:03:30.860 - INFO: [epoch:  4, iter: 291,300, lr:(7.440e-05,)] l_pix: 1.3141e+01 
21-09-12 15:05:30.329 - INFO: [epoch:  4, iter: 291,400, lr:(7.434e-05,)] l_pix: 8.9960e+00 
21-09-12 15:07:30.838 - INFO: [epoch:  4, iter: 291,500, lr:(7.428e-05,)] l_pix: 1.0415e+01 
21-09-12 15:09:27.282 - INFO: [epoch:  4, iter: 291,600, lr:(7.422e-05,)] l_pix: 1.2492e+01 
21-09-12 15:11:13.199 - INFO: [epoch:  4, iter: 291,700, lr:(7.416e-05,)] l_pix: 1.1034e+01 
21-09-12 15:12:59.336 - INFO: [epoch:  4, iter: 291,800, lr:(7.410e-05,)] l_pix: 1.1526e+01 
21-09-12 15:14:53.115 - INFO: [epoch:  4, iter: 291,900, lr:(7.404e-05,)] l_pix: 1.1091e+01 
21-09-12 15:16:47.162 - INFO: [epoch:  4, iter: 292,000, lr:(7.398e-05,)] l_pix: 1.0333e+01 
21-09-12 15:18:41.034 - INFO: [epoch:  4, iter: 292,100, lr:(7.392e-05,)] l_pix: 1.0194e+01 
21-09-12 15:20:36.610 - INFO: [epoch:  4, iter: 292,200, lr:(7.386e-05,)] l_pix: 1.1416e+01 
21-09-12 15:22:31.908 - INFO: [epoch:  4, iter: 292,300, lr:(7.380e-05,)] l_pix: 1.3259e+01 
21-09-12 15:24:25.994 - INFO: [epoch:  4, iter: 292,400, lr:(7.374e-05,)] l_pix: 1.1241e+01 
21-09-12 15:26:20.729 - INFO: [epoch:  4, iter: 292,500, lr:(7.368e-05,)] l_pix: 9.8591e+00 
21-09-12 15:28:14.811 - INFO: [epoch:  4, iter: 292,600, lr:(7.361e-05,)] l_pix: 1.0132e+01 
21-09-12 15:30:09.944 - INFO: [epoch:  4, iter: 292,700, lr:(7.355e-05,)] l_pix: 1.1399e+01 
21-09-12 15:32:04.671 - INFO: [epoch:  4, iter: 292,800, lr:(7.349e-05,)] l_pix: 1.1381e+01 
21-09-12 15:33:59.990 - INFO: [epoch:  4, iter: 292,900, lr:(7.343e-05,)] l_pix: 1.0493e+01 
21-09-12 15:35:51.236 - INFO: [epoch:  4, iter: 293,000, lr:(7.337e-05,)] l_pix: 1.1874e+01 
21-09-12 15:37:37.871 - INFO: [epoch:  4, iter: 293,100, lr:(7.331e-05,)] l_pix: 1.1549e+01 
21-09-12 15:39:27.236 - INFO: [epoch:  4, iter: 293,200, lr:(7.325e-05,)] l_pix: 1.1665e+01 
21-09-12 15:41:20.860 - INFO: [epoch:  4, iter: 293,300, lr:(7.319e-05,)] l_pix: 1.1398e+01 
21-09-12 15:43:10.676 - INFO: [epoch:  4, iter: 293,400, lr:(7.313e-05,)] l_pix: 1.1573e+01 
21-09-12 15:45:00.530 - INFO: [epoch:  4, iter: 293,500, lr:(7.307e-05,)] l_pix: 1.0805e+01 
21-09-12 15:46:50.255 - INFO: [epoch:  4, iter: 293,600, lr:(7.301e-05,)] l_pix: 1.0314e+01 
21-09-12 15:48:39.945 - INFO: [epoch:  4, iter: 293,700, lr:(7.295e-05,)] l_pix: 1.2420e+01 
21-09-12 15:50:29.983 - INFO: [epoch:  4, iter: 293,800, lr:(7.289e-05,)] l_pix: 1.0388e+01 
21-09-12 15:52:19.896 - INFO: [epoch:  4, iter: 293,900, lr:(7.283e-05,)] l_pix: 1.0494e+01 
21-09-12 15:54:09.571 - INFO: [epoch:  4, iter: 294,000, lr:(7.277e-05,)] l_pix: 9.8925e+00 
21-09-12 15:55:59.659 - INFO: [epoch:  4, iter: 294,100, lr:(7.271e-05,)] l_pix: 1.2021e+01 
21-09-12 15:57:49.545 - INFO: [epoch:  4, iter: 294,200, lr:(7.265e-05,)] l_pix: 1.1412e+01 
21-09-12 15:59:39.601 - INFO: [epoch:  4, iter: 294,300, lr:(7.259e-05,)] l_pix: 1.1228e+01 
21-09-12 16:01:29.940 - INFO: [epoch:  4, iter: 294,400, lr:(7.253e-05,)] l_pix: 1.1526e+01 
21-09-12 16:03:19.915 - INFO: [epoch:  4, iter: 294,500, lr:(7.247e-05,)] l_pix: 1.1265e+01 
21-09-12 16:05:09.654 - INFO: [epoch:  4, iter: 294,600, lr:(7.241e-05,)] l_pix: 1.2449e+01 
21-09-12 16:06:55.984 - INFO: [epoch:  4, iter: 294,700, lr:(7.235e-05,)] l_pix: 1.3211e+01 
21-09-12 16:08:43.093 - INFO: [epoch:  4, iter: 294,800, lr:(7.228e-05,)] l_pix: 1.1244e+01 
21-09-12 16:10:35.200 - INFO: [epoch:  4, iter: 294,900, lr:(7.222e-05,)] l_pix: 1.1224e+01 
21-09-12 16:12:25.677 - INFO: [epoch:  4, iter: 295,000, lr:(7.216e-05,)] l_pix: 1.2313e+01 
21-09-12 16:14:36.704 - INFO: # Validation # PSNR: 2.8934e+01
21-09-12 16:14:36.704 - INFO: Saving models and training states.
21-09-12 16:16:28.424 - INFO: [epoch:  4, iter: 295,100, lr:(7.210e-05,)] l_pix: 1.3291e+01 
21-09-12 16:18:19.106 - INFO: [epoch:  4, iter: 295,200, lr:(7.204e-05,)] l_pix: 1.0351e+01 
21-09-12 16:20:09.799 - INFO: [epoch:  4, iter: 295,300, lr:(7.198e-05,)] l_pix: 1.0432e+01 
21-09-12 16:22:00.301 - INFO: [epoch:  4, iter: 295,400, lr:(7.192e-05,)] l_pix: 1.0673e+01 
21-09-12 16:23:50.526 - INFO: [epoch:  4, iter: 295,500, lr:(7.186e-05,)] l_pix: 1.2892e+01 
21-09-12 16:25:41.288 - INFO: [epoch:  4, iter: 295,600, lr:(7.180e-05,)] l_pix: 1.3242e+01 
21-09-12 16:27:32.068 - INFO: [epoch:  4, iter: 295,700, lr:(7.174e-05,)] l_pix: 1.1361e+01 
21-09-12 16:29:23.223 - INFO: [epoch:  4, iter: 295,800, lr:(7.168e-05,)] l_pix: 1.0776e+01 
21-09-12 16:31:14.174 - INFO: [epoch:  4, iter: 295,900, lr:(7.162e-05,)] l_pix: 1.0754e+01 
21-09-12 16:33:04.519 - INFO: [epoch:  4, iter: 296,000, lr:(7.156e-05,)] l_pix: 1.0228e+01 
21-09-12 16:34:55.565 - INFO: [epoch:  4, iter: 296,100, lr:(7.150e-05,)] l_pix: 9.6426e+00 
21-09-12 16:36:46.836 - INFO: [epoch:  4, iter: 296,200, lr:(7.144e-05,)] l_pix: 1.0670e+01 
21-09-12 16:38:37.772 - INFO: [epoch:  4, iter: 296,300, lr:(7.138e-05,)] l_pix: 1.1740e+01 
21-09-12 16:40:28.399 - INFO: [epoch:  4, iter: 296,400, lr:(7.132e-05,)] l_pix: 1.1551e+01 
21-09-12 16:42:18.987 - INFO: [epoch:  4, iter: 296,500, lr:(7.126e-05,)] l_pix: 1.1438e+01 
21-09-12 16:44:09.789 - INFO: [epoch:  4, iter: 296,600, lr:(7.120e-05,)] l_pix: 1.0289e+01 
21-09-12 16:46:01.004 - INFO: [epoch:  4, iter: 296,700, lr:(7.114e-05,)] l_pix: 1.2851e+01 
21-09-12 16:47:51.860 - INFO: [epoch:  4, iter: 296,800, lr:(7.108e-05,)] l_pix: 1.2863e+01 
21-09-12 16:49:43.599 - INFO: [epoch:  4, iter: 296,900, lr:(7.102e-05,)] l_pix: 1.0273e+01 
21-09-12 16:51:32.275 - INFO: [epoch:  4, iter: 297,000, lr:(7.096e-05,)] l_pix: 1.0539e+01 
21-09-12 16:53:17.847 - INFO: [epoch:  4, iter: 297,100, lr:(7.090e-05,)] l_pix: 1.0434e+01 
21-09-12 16:55:06.056 - INFO: [epoch:  4, iter: 297,200, lr:(7.084e-05,)] l_pix: 1.3757e+01 
21-09-12 16:56:57.374 - INFO: [epoch:  4, iter: 297,300, lr:(7.078e-05,)] l_pix: 1.0861e+01 
21-09-12 16:58:47.788 - INFO: [epoch:  4, iter: 297,400, lr:(7.072e-05,)] l_pix: 9.4349e+00 
21-09-12 17:00:37.494 - INFO: [epoch:  4, iter: 297,500, lr:(7.066e-05,)] l_pix: 1.0142e+01 
21-09-12 17:02:26.791 - INFO: [epoch:  4, iter: 297,600, lr:(7.060e-05,)] l_pix: 1.0771e+01 
21-09-12 17:04:16.371 - INFO: [epoch:  4, iter: 297,700, lr:(7.054e-05,)] l_pix: 1.2108e+01 
21-09-12 17:06:06.364 - INFO: [epoch:  4, iter: 297,800, lr:(7.048e-05,)] l_pix: 1.0813e+01 
21-09-12 17:07:56.304 - INFO: [epoch:  4, iter: 297,900, lr:(7.042e-05,)] l_pix: 1.1932e+01 
21-09-12 17:09:45.939 - INFO: [epoch:  4, iter: 298,000, lr:(7.036e-05,)] l_pix: 1.1792e+01 
21-09-12 17:11:35.553 - INFO: [epoch:  4, iter: 298,100, lr:(7.030e-05,)] l_pix: 9.9395e+00 
21-09-12 17:13:24.778 - INFO: [epoch:  4, iter: 298,200, lr:(7.024e-05,)] l_pix: 1.1548e+01 
21-09-12 17:15:14.454 - INFO: [epoch:  4, iter: 298,300, lr:(7.018e-05,)] l_pix: 1.1961e+01 
21-09-12 17:17:04.090 - INFO: [epoch:  4, iter: 298,400, lr:(7.012e-05,)] l_pix: 9.0421e+00 
21-09-12 17:18:54.012 - INFO: [epoch:  4, iter: 298,500, lr:(7.006e-05,)] l_pix: 1.1525e+01 
21-09-12 17:20:43.831 - INFO: [epoch:  4, iter: 298,600, lr:(7.000e-05,)] l_pix: 1.1068e+01 
21-09-12 17:22:32.785 - INFO: [epoch:  4, iter: 298,700, lr:(6.994e-05,)] l_pix: 1.1496e+01 
21-09-12 17:24:22.349 - INFO: [epoch:  4, iter: 298,800, lr:(6.988e-05,)] l_pix: 1.1485e+01 
21-09-12 17:26:11.412 - INFO: [epoch:  4, iter: 298,900, lr:(6.982e-05,)] l_pix: 8.6308e+00 
21-09-12 17:27:58.060 - INFO: [epoch:  4, iter: 299,000, lr:(6.976e-05,)] l_pix: 1.0403e+01 
21-09-12 17:29:45.476 - INFO: [epoch:  4, iter: 299,100, lr:(6.970e-05,)] l_pix: 9.3987e+00 
21-09-12 17:31:37.086 - INFO: [epoch:  4, iter: 299,200, lr:(6.964e-05,)] l_pix: 1.1396e+01 
21-09-12 17:33:27.467 - INFO: [epoch:  4, iter: 299,300, lr:(6.958e-05,)] l_pix: 1.1822e+01 
21-09-12 17:35:17.842 - INFO: [epoch:  4, iter: 299,400, lr:(6.952e-05,)] l_pix: 1.0459e+01 
21-09-12 17:37:08.063 - INFO: [epoch:  4, iter: 299,500, lr:(6.946e-05,)] l_pix: 1.0703e+01 
21-09-12 17:38:58.396 - INFO: [epoch:  4, iter: 299,600, lr:(6.940e-05,)] l_pix: 1.2674e+01 
21-09-12 17:40:48.989 - INFO: [epoch:  4, iter: 299,700, lr:(6.934e-05,)] l_pix: 1.2185e+01 
21-09-12 17:42:38.715 - INFO: [epoch:  4, iter: 299,800, lr:(6.928e-05,)] l_pix: 1.3784e+01 
21-09-12 17:44:28.924 - INFO: [epoch:  4, iter: 299,900, lr:(6.922e-05,)] l_pix: 1.0386e+01 
21-09-12 17:46:19.246 - INFO: [epoch:  4, iter: 300,000, lr:(6.916e-05,)] l_pix: 1.0881e+01 
21-09-12 17:48:30.414 - INFO: # Validation # PSNR: 2.8881e+01
21-09-12 17:48:30.414 - INFO: Saving models and training states.
21-09-12 17:50:21.884 - INFO: [epoch:  4, iter: 300,100, lr:(6.910e-05,)] l_pix: 1.1807e+01 
21-09-12 17:52:11.564 - INFO: [epoch:  4, iter: 300,200, lr:(6.904e-05,)] l_pix: 9.8084e+00 
21-09-12 17:54:01.605 - INFO: [epoch:  4, iter: 300,300, lr:(6.898e-05,)] l_pix: 1.3018e+01 
21-09-12 17:55:51.490 - INFO: [epoch:  4, iter: 300,400, lr:(6.892e-05,)] l_pix: 1.1210e+01 
21-09-12 17:57:36.866 - INFO: [epoch:  4, iter: 300,500, lr:(6.886e-05,)] l_pix: 1.1484e+01 
21-09-12 17:59:21.836 - INFO: [epoch:  4, iter: 300,600, lr:(6.881e-05,)] l_pix: 1.2083e+01 
21-09-12 18:01:06.490 - INFO: [epoch:  4, iter: 300,700, lr:(6.875e-05,)] l_pix: 1.3016e+01 
21-09-12 18:02:50.805 - INFO: [epoch:  4, iter: 300,800, lr:(6.869e-05,)] l_pix: 1.1636e+01 
21-09-12 18:04:35.721 - INFO: [epoch:  4, iter: 300,900, lr:(6.863e-05,)] l_pix: 9.4637e+00 
21-09-12 18:06:20.726 - INFO: [epoch:  4, iter: 301,000, lr:(6.857e-05,)] l_pix: 9.9772e+00 
21-09-12 18:08:05.473 - INFO: [epoch:  4, iter: 301,100, lr:(6.851e-05,)] l_pix: 1.0759e+01 
21-09-12 18:09:50.444 - INFO: [epoch:  4, iter: 301,200, lr:(6.845e-05,)] l_pix: 1.4566e+01 
21-09-12 18:11:34.918 - INFO: [epoch:  4, iter: 301,300, lr:(6.839e-05,)] l_pix: 1.1564e+01 
21-09-12 18:13:19.475 - INFO: [epoch:  4, iter: 301,400, lr:(6.833e-05,)] l_pix: 1.1640e+01 
21-09-12 18:15:04.683 - INFO: [epoch:  4, iter: 301,500, lr:(6.827e-05,)] l_pix: 1.1087e+01 
21-09-12 18:16:49.643 - INFO: [epoch:  4, iter: 301,600, lr:(6.821e-05,)] l_pix: 1.4721e+01 
21-09-12 18:18:34.662 - INFO: [epoch:  4, iter: 301,700, lr:(6.815e-05,)] l_pix: 1.0646e+01 
21-09-12 18:20:19.413 - INFO: [epoch:  4, iter: 301,800, lr:(6.809e-05,)] l_pix: 1.2216e+01 
21-09-12 18:22:03.959 - INFO: [epoch:  4, iter: 301,900, lr:(6.803e-05,)] l_pix: 1.1402e+01 
21-09-12 18:23:48.479 - INFO: [epoch:  4, iter: 302,000, lr:(6.797e-05,)] l_pix: 1.4865e+01 
21-09-12 18:25:33.459 - INFO: [epoch:  4, iter: 302,100, lr:(6.791e-05,)] l_pix: 1.1675e+01 
21-09-12 18:27:18.479 - INFO: [epoch:  4, iter: 302,200, lr:(6.785e-05,)] l_pix: 1.0754e+01 
21-09-12 18:29:03.606 - INFO: [epoch:  4, iter: 302,300, lr:(6.779e-05,)] l_pix: 1.0669e+01 
21-09-12 18:30:48.572 - INFO: [epoch:  4, iter: 302,400, lr:(6.773e-05,)] l_pix: 1.3446e+01 
21-09-12 18:32:33.666 - INFO: [epoch:  4, iter: 302,500, lr:(6.767e-05,)] l_pix: 9.9526e+00 
21-09-12 18:34:19.029 - INFO: [epoch:  4, iter: 302,600, lr:(6.761e-05,)] l_pix: 9.9673e+00 
21-09-12 18:36:05.046 - INFO: [epoch:  4, iter: 302,700, lr:(6.756e-05,)] l_pix: 1.1866e+01 
21-09-12 18:37:51.064 - INFO: [epoch:  4, iter: 302,800, lr:(6.750e-05,)] l_pix: 1.2474e+01 
21-09-12 18:39:37.276 - INFO: [epoch:  4, iter: 302,900, lr:(6.744e-05,)] l_pix: 1.1289e+01 
21-09-12 18:41:22.689 - INFO: [epoch:  4, iter: 303,000, lr:(6.738e-05,)] l_pix: 1.0657e+01 
21-09-12 18:43:07.946 - INFO: [epoch:  4, iter: 303,100, lr:(6.732e-05,)] l_pix: 9.7154e+00 
21-09-12 18:44:53.501 - INFO: [epoch:  4, iter: 303,200, lr:(6.726e-05,)] l_pix: 1.2552e+01 
21-09-12 18:46:39.563 - INFO: [epoch:  5, iter: 303,300, lr:(6.720e-05,)] l_pix: 1.1478e+01 
21-09-12 18:48:25.237 - INFO: [epoch:  5, iter: 303,400, lr:(6.714e-05,)] l_pix: 1.0849e+01 
21-09-12 18:50:10.395 - INFO: [epoch:  5, iter: 303,500, lr:(6.708e-05,)] l_pix: 1.0920e+01 
21-09-12 18:51:54.687 - INFO: [epoch:  5, iter: 303,600, lr:(6.702e-05,)] l_pix: 1.3355e+01 
21-09-12 18:53:36.444 - INFO: [epoch:  5, iter: 303,700, lr:(6.696e-05,)] l_pix: 1.2484e+01 
21-09-12 18:55:17.772 - INFO: [epoch:  5, iter: 303,800, lr:(6.690e-05,)] l_pix: 9.5529e+00 
21-09-12 18:56:59.170 - INFO: [epoch:  5, iter: 303,900, lr:(6.684e-05,)] l_pix: 1.2339e+01 
21-09-12 18:58:40.575 - INFO: [epoch:  5, iter: 304,000, lr:(6.678e-05,)] l_pix: 1.2422e+01 
21-09-12 19:00:21.941 - INFO: [epoch:  5, iter: 304,100, lr:(6.672e-05,)] l_pix: 1.0810e+01 
21-09-12 19:02:03.721 - INFO: [epoch:  5, iter: 304,200, lr:(6.667e-05,)] l_pix: 1.2179e+01 
21-09-12 19:03:48.872 - INFO: [epoch:  5, iter: 304,300, lr:(6.661e-05,)] l_pix: 9.6117e+00 
21-09-12 19:05:37.309 - INFO: [epoch:  5, iter: 304,400, lr:(6.655e-05,)] l_pix: 1.2226e+01 
21-09-12 19:07:27.290 - INFO: [epoch:  5, iter: 304,500, lr:(6.649e-05,)] l_pix: 9.7341e+00 
21-09-12 19:09:18.895 - INFO: [epoch:  5, iter: 304,600, lr:(6.643e-05,)] l_pix: 1.0423e+01 
21-09-12 19:11:12.002 - INFO: [epoch:  5, iter: 304,700, lr:(6.637e-05,)] l_pix: 1.2269e+01 
21-09-12 19:13:06.572 - INFO: [epoch:  5, iter: 304,800, lr:(6.631e-05,)] l_pix: 9.6397e+00 
21-09-12 19:15:01.055 - INFO: [epoch:  5, iter: 304,900, lr:(6.625e-05,)] l_pix: 1.2816e+01 
21-09-12 19:16:54.120 - INFO: [epoch:  5, iter: 305,000, lr:(6.619e-05,)] l_pix: 1.0317e+01 
21-09-12 19:19:01.974 - INFO: # Validation # PSNR: 2.8875e+01
21-09-12 19:19:01.974 - INFO: Saving models and training states.
21-09-12 19:20:57.911 - INFO: [epoch:  5, iter: 305,100, lr:(6.613e-05,)] l_pix: 1.0310e+01 
21-09-12 19:22:54.037 - INFO: [epoch:  5, iter: 305,200, lr:(6.607e-05,)] l_pix: 1.3163e+01 
21-09-12 19:24:38.216 - INFO: [epoch:  5, iter: 305,300, lr:(6.602e-05,)] l_pix: 1.1189e+01 
21-09-12 19:26:20.990 - INFO: [epoch:  5, iter: 305,400, lr:(6.596e-05,)] l_pix: 1.1602e+01 
21-09-12 19:28:06.306 - INFO: [epoch:  5, iter: 305,500, lr:(6.590e-05,)] l_pix: 1.0710e+01 
21-09-12 19:30:04.893 - INFO: [epoch:  5, iter: 305,600, lr:(6.584e-05,)] l_pix: 9.2873e+00 
21-09-12 19:32:04.180 - INFO: [epoch:  5, iter: 305,700, lr:(6.578e-05,)] l_pix: 1.1385e+01 
21-09-12 19:34:04.441 - INFO: [epoch:  5, iter: 305,800, lr:(6.572e-05,)] l_pix: 1.2842e+01 
21-09-12 19:36:04.069 - INFO: [epoch:  5, iter: 305,900, lr:(6.566e-05,)] l_pix: 1.1461e+01 
21-09-12 19:38:03.570 - INFO: [epoch:  5, iter: 306,000, lr:(6.560e-05,)] l_pix: 1.1074e+01 
21-09-12 19:40:03.693 - INFO: [epoch:  5, iter: 306,100, lr:(6.554e-05,)] l_pix: 1.1788e+01 
21-09-12 19:42:02.330 - INFO: [epoch:  5, iter: 306,200, lr:(6.548e-05,)] l_pix: 1.2722e+01 
21-09-12 19:43:59.111 - INFO: [epoch:  5, iter: 306,300, lr:(6.543e-05,)] l_pix: 1.1735e+01 
21-09-12 19:45:56.578 - INFO: [epoch:  5, iter: 306,400, lr:(6.537e-05,)] l_pix: 1.1890e+01 
21-09-12 19:47:40.540 - INFO: [epoch:  5, iter: 306,500, lr:(6.531e-05,)] l_pix: 1.0249e+01 
21-09-12 19:49:29.943 - INFO: [epoch:  5, iter: 306,600, lr:(6.525e-05,)] l_pix: 1.1547e+01 
21-09-12 19:51:25.448 - INFO: [epoch:  5, iter: 306,700, lr:(6.519e-05,)] l_pix: 1.0663e+01 
21-09-12 19:53:21.443 - INFO: [epoch:  5, iter: 306,800, lr:(6.513e-05,)] l_pix: 1.2712e+01 
21-09-12 19:55:17.369 - INFO: [epoch:  5, iter: 306,900, lr:(6.507e-05,)] l_pix: 1.0257e+01 
21-09-12 19:57:13.973 - INFO: [epoch:  5, iter: 307,000, lr:(6.501e-05,)] l_pix: 1.1451e+01 
21-09-12 19:59:11.451 - INFO: [epoch:  5, iter: 307,100, lr:(6.495e-05,)] l_pix: 1.0451e+01 
21-09-12 20:01:06.906 - INFO: [epoch:  5, iter: 307,200, lr:(6.490e-05,)] l_pix: 1.1013e+01 
21-09-12 20:03:03.476 - INFO: [epoch:  5, iter: 307,300, lr:(6.484e-05,)] l_pix: 1.3685e+01 
21-09-12 20:04:47.538 - INFO: [epoch:  5, iter: 307,400, lr:(6.478e-05,)] l_pix: 1.0355e+01 
21-09-12 20:06:31.280 - INFO: [epoch:  5, iter: 307,500, lr:(6.472e-05,)] l_pix: 9.4420e+00 
21-09-12 20:08:15.560 - INFO: [epoch:  5, iter: 307,600, lr:(6.466e-05,)] l_pix: 1.2017e+01 
21-09-12 20:10:07.289 - INFO: [epoch:  5, iter: 307,700, lr:(6.460e-05,)] l_pix: 1.0378e+01 
21-09-12 20:11:59.335 - INFO: [epoch:  5, iter: 307,800, lr:(6.454e-05,)] l_pix: 1.4186e+01 
21-09-12 20:13:50.549 - INFO: [epoch:  5, iter: 307,900, lr:(6.448e-05,)] l_pix: 1.1680e+01 
21-09-12 20:15:41.784 - INFO: [epoch:  5, iter: 308,000, lr:(6.443e-05,)] l_pix: 1.2482e+01 
21-09-12 20:17:32.749 - INFO: [epoch:  5, iter: 308,100, lr:(6.437e-05,)] l_pix: 1.0822e+01 
21-09-12 20:19:23.168 - INFO: [epoch:  5, iter: 308,200, lr:(6.431e-05,)] l_pix: 1.1074e+01 
21-09-12 20:21:13.382 - INFO: [epoch:  5, iter: 308,300, lr:(6.425e-05,)] l_pix: 1.4019e+01 
21-09-12 20:23:04.393 - INFO: [epoch:  5, iter: 308,400, lr:(6.419e-05,)] l_pix: 1.1641e+01 
21-09-12 20:24:55.980 - INFO: [epoch:  5, iter: 308,500, lr:(6.413e-05,)] l_pix: 1.3000e+01 
21-09-12 20:26:46.066 - INFO: [epoch:  5, iter: 308,600, lr:(6.407e-05,)] l_pix: 1.0025e+01 
21-09-12 20:28:38.129 - INFO: [epoch:  5, iter: 308,700, lr:(6.402e-05,)] l_pix: 9.8615e+00 
21-09-12 20:30:25.059 - INFO: [epoch:  5, iter: 308,800, lr:(6.396e-05,)] l_pix: 1.1495e+01 
21-09-12 20:32:06.775 - INFO: [epoch:  5, iter: 308,900, lr:(6.390e-05,)] l_pix: 1.1685e+01 
21-09-12 20:33:47.813 - INFO: [epoch:  5, iter: 309,000, lr:(6.384e-05,)] l_pix: 9.8813e+00 
21-09-12 20:35:29.093 - INFO: [epoch:  5, iter: 309,100, lr:(6.378e-05,)] l_pix: 1.3958e+01 
21-09-12 20:37:09.952 - INFO: [epoch:  5, iter: 309,200, lr:(6.372e-05,)] l_pix: 1.1741e+01 
21-09-12 20:38:50.862 - INFO: [epoch:  5, iter: 309,300, lr:(6.366e-05,)] l_pix: 9.2812e+00 
21-09-12 20:40:32.068 - INFO: [epoch:  5, iter: 309,400, lr:(6.361e-05,)] l_pix: 1.3190e+01 
21-09-12 20:42:13.295 - INFO: [epoch:  5, iter: 309,500, lr:(6.355e-05,)] l_pix: 1.0964e+01 
21-09-12 20:43:54.481 - INFO: [epoch:  5, iter: 309,600, lr:(6.349e-05,)] l_pix: 9.3190e+00 
21-09-12 20:45:38.077 - INFO: [epoch:  5, iter: 309,700, lr:(6.343e-05,)] l_pix: 1.0115e+01 
21-09-12 20:47:22.581 - INFO: [epoch:  5, iter: 309,800, lr:(6.337e-05,)] l_pix: 1.2308e+01 
21-09-12 20:49:07.445 - INFO: [epoch:  5, iter: 309,900, lr:(6.331e-05,)] l_pix: 9.9519e+00 
21-09-12 20:50:49.436 - INFO: [epoch:  5, iter: 310,000, lr:(6.326e-05,)] l_pix: 1.1244e+01 
21-09-12 20:52:51.168 - INFO: # Validation # PSNR: 2.8847e+01
21-09-12 20:52:51.169 - INFO: Saving models and training states.
21-09-12 20:54:33.329 - INFO: [epoch:  5, iter: 310,100, lr:(6.320e-05,)] l_pix: 1.2007e+01 
21-09-12 20:56:14.022 - INFO: [epoch:  5, iter: 310,200, lr:(6.314e-05,)] l_pix: 1.0514e+01 
21-09-12 20:57:55.181 - INFO: [epoch:  5, iter: 310,300, lr:(6.308e-05,)] l_pix: 9.8414e+00 
21-09-12 20:59:36.576 - INFO: [epoch:  5, iter: 310,400, lr:(6.302e-05,)] l_pix: 1.1212e+01 
21-09-12 21:01:17.395 - INFO: [epoch:  5, iter: 310,500, lr:(6.296e-05,)] l_pix: 1.1990e+01 
21-09-12 21:02:58.019 - INFO: [epoch:  5, iter: 310,600, lr:(6.291e-05,)] l_pix: 1.1865e+01 
21-09-12 21:04:39.380 - INFO: [epoch:  5, iter: 310,700, lr:(6.285e-05,)] l_pix: 1.0094e+01 
21-09-12 21:06:20.439 - INFO: [epoch:  5, iter: 310,800, lr:(6.279e-05,)] l_pix: 9.8143e+00 
21-09-12 21:08:01.465 - INFO: [epoch:  5, iter: 310,900, lr:(6.273e-05,)] l_pix: 1.0468e+01 
21-09-12 21:09:42.331 - INFO: [epoch:  5, iter: 311,000, lr:(6.267e-05,)] l_pix: 1.2035e+01 
21-09-12 21:11:23.478 - INFO: [epoch:  5, iter: 311,100, lr:(6.261e-05,)] l_pix: 1.0221e+01 
21-09-12 21:13:04.084 - INFO: [epoch:  5, iter: 311,200, lr:(6.256e-05,)] l_pix: 1.0837e+01 
21-09-12 21:14:47.331 - INFO: [epoch:  5, iter: 311,300, lr:(6.250e-05,)] l_pix: 1.1435e+01 
21-09-12 21:16:30.427 - INFO: [epoch:  5, iter: 311,400, lr:(6.244e-05,)] l_pix: 1.2958e+01 
21-09-12 21:18:11.540 - INFO: [epoch:  5, iter: 311,500, lr:(6.238e-05,)] l_pix: 1.1882e+01 
21-09-12 21:19:52.577 - INFO: [epoch:  5, iter: 311,600, lr:(6.232e-05,)] l_pix: 1.0343e+01 
21-09-12 21:21:33.656 - INFO: [epoch:  5, iter: 311,700, lr:(6.226e-05,)] l_pix: 1.1615e+01 
21-09-12 21:23:14.818 - INFO: [epoch:  5, iter: 311,800, lr:(6.221e-05,)] l_pix: 1.2441e+01 
21-09-12 21:24:56.334 - INFO: [epoch:  5, iter: 311,900, lr:(6.215e-05,)] l_pix: 1.2125e+01 
21-09-12 21:26:37.503 - INFO: [epoch:  5, iter: 312,000, lr:(6.209e-05,)] l_pix: 1.1446e+01 
21-09-12 21:28:18.463 - INFO: [epoch:  5, iter: 312,100, lr:(6.203e-05,)] l_pix: 1.0486e+01 
21-09-12 21:29:59.481 - INFO: [epoch:  5, iter: 312,200, lr:(6.197e-05,)] l_pix: 1.2498e+01 
21-09-12 21:31:40.208 - INFO: [epoch:  5, iter: 312,300, lr:(6.192e-05,)] l_pix: 1.2444e+01 
21-09-12 21:33:21.011 - INFO: [epoch:  5, iter: 312,400, lr:(6.186e-05,)] l_pix: 1.2579e+01 
21-09-12 21:35:02.313 - INFO: [epoch:  5, iter: 312,500, lr:(6.180e-05,)] l_pix: 1.2352e+01 
21-09-12 21:36:43.257 - INFO: [epoch:  5, iter: 312,600, lr:(6.174e-05,)] l_pix: 1.0130e+01 
21-09-12 21:38:24.808 - INFO: [epoch:  5, iter: 312,700, lr:(6.168e-05,)] l_pix: 1.0327e+01 
21-09-12 21:40:06.215 - INFO: [epoch:  5, iter: 312,800, lr:(6.163e-05,)] l_pix: 1.1691e+01 
21-09-12 21:41:47.127 - INFO: [epoch:  5, iter: 312,900, lr:(6.157e-05,)] l_pix: 1.0849e+01 
21-09-12 21:43:28.172 - INFO: [epoch:  5, iter: 313,000, lr:(6.151e-05,)] l_pix: 1.0552e+01 
21-09-12 21:45:09.141 - INFO: [epoch:  5, iter: 313,100, lr:(6.145e-05,)] l_pix: 8.9307e+00 
21-09-12 21:46:50.069 - INFO: [epoch:  5, iter: 313,200, lr:(6.139e-05,)] l_pix: 1.3361e+01 
21-09-12 21:48:31.007 - INFO: [epoch:  5, iter: 313,300, lr:(6.134e-05,)] l_pix: 1.0893e+01 
21-09-12 21:50:11.628 - INFO: [epoch:  5, iter: 313,400, lr:(6.128e-05,)] l_pix: 1.0754e+01 
21-09-12 21:51:52.164 - INFO: [epoch:  5, iter: 313,500, lr:(6.122e-05,)] l_pix: 1.0225e+01 
21-09-12 21:53:32.955 - INFO: [epoch:  5, iter: 313,600, lr:(6.116e-05,)] l_pix: 9.3966e+00 
21-09-12 21:55:13.648 - INFO: [epoch:  5, iter: 313,700, lr:(6.111e-05,)] l_pix: 1.1747e+01 
21-09-12 21:56:55.163 - INFO: [epoch:  5, iter: 313,800, lr:(6.105e-05,)] l_pix: 1.2604e+01 
21-09-12 21:58:36.602 - INFO: [epoch:  5, iter: 313,900, lr:(6.099e-05,)] l_pix: 1.2152e+01 
21-09-12 22:00:17.984 - INFO: [epoch:  5, iter: 314,000, lr:(6.093e-05,)] l_pix: 1.1135e+01 
21-09-12 22:01:59.174 - INFO: [epoch:  5, iter: 314,100, lr:(6.087e-05,)] l_pix: 1.0745e+01 
21-09-12 22:03:40.051 - INFO: [epoch:  5, iter: 314,200, lr:(6.082e-05,)] l_pix: 1.0321e+01 
21-09-12 22:05:20.900 - INFO: [epoch:  5, iter: 314,300, lr:(6.076e-05,)] l_pix: 1.0754e+01 
21-09-12 22:07:02.489 - INFO: [epoch:  5, iter: 314,400, lr:(6.070e-05,)] l_pix: 1.0154e+01 
21-09-12 22:08:43.882 - INFO: [epoch:  5, iter: 314,500, lr:(6.064e-05,)] l_pix: 1.0239e+01 
21-09-12 22:10:25.446 - INFO: [epoch:  5, iter: 314,600, lr:(6.059e-05,)] l_pix: 1.2299e+01 
21-09-12 22:12:09.710 - INFO: [epoch:  5, iter: 314,700, lr:(6.053e-05,)] l_pix: 1.2305e+01 
21-09-12 22:13:53.972 - INFO: [epoch:  5, iter: 314,800, lr:(6.047e-05,)] l_pix: 1.0288e+01 
21-09-12 22:15:38.029 - INFO: [epoch:  5, iter: 314,900, lr:(6.041e-05,)] l_pix: 1.0909e+01 
21-09-12 22:17:22.238 - INFO: [epoch:  5, iter: 315,000, lr:(6.035e-05,)] l_pix: 9.6032e+00 
21-09-12 22:19:26.785 - INFO: # Validation # PSNR: 2.8890e+01
21-09-12 22:19:26.785 - INFO: Saving models and training states.
21-09-12 22:21:12.010 - INFO: [epoch:  5, iter: 315,100, lr:(6.030e-05,)] l_pix: 1.1998e+01 
21-09-12 22:22:56.685 - INFO: [epoch:  5, iter: 315,200, lr:(6.024e-05,)] l_pix: 1.4116e+01 
21-09-12 22:24:41.303 - INFO: [epoch:  5, iter: 315,300, lr:(6.018e-05,)] l_pix: 1.1259e+01 
21-09-12 22:26:26.062 - INFO: [epoch:  5, iter: 315,400, lr:(6.012e-05,)] l_pix: 1.1781e+01 
21-09-12 22:28:10.655 - INFO: [epoch:  5, iter: 315,500, lr:(6.007e-05,)] l_pix: 1.1391e+01 
21-09-12 22:29:55.199 - INFO: [epoch:  5, iter: 315,600, lr:(6.001e-05,)] l_pix: 1.1495e+01 
21-09-12 22:31:39.705 - INFO: [epoch:  5, iter: 315,700, lr:(5.995e-05,)] l_pix: 1.0104e+01 
21-09-12 22:33:23.678 - INFO: [epoch:  5, iter: 315,800, lr:(5.989e-05,)] l_pix: 1.1369e+01 
21-09-12 22:35:08.041 - INFO: [epoch:  5, iter: 315,900, lr:(5.984e-05,)] l_pix: 1.1152e+01 
21-09-12 22:36:52.663 - INFO: [epoch:  5, iter: 316,000, lr:(5.978e-05,)] l_pix: 9.8257e+00 
21-09-12 22:38:37.226 - INFO: [epoch:  5, iter: 316,100, lr:(5.972e-05,)] l_pix: 9.9804e+00 
21-09-12 22:40:22.513 - INFO: [epoch:  5, iter: 316,200, lr:(5.966e-05,)] l_pix: 1.2965e+01 
21-09-12 22:42:06.590 - INFO: [epoch:  5, iter: 316,300, lr:(5.961e-05,)] l_pix: 1.3692e+01 
21-09-12 22:43:50.820 - INFO: [epoch:  5, iter: 316,400, lr:(5.955e-05,)] l_pix: 1.1543e+01 
21-09-12 22:45:34.975 - INFO: [epoch:  5, iter: 316,500, lr:(5.949e-05,)] l_pix: 1.1382e+01 
21-09-12 22:47:19.370 - INFO: [epoch:  5, iter: 316,600, lr:(5.943e-05,)] l_pix: 1.2535e+01 
21-09-12 22:49:04.063 - INFO: [epoch:  5, iter: 316,700, lr:(5.938e-05,)] l_pix: 9.0787e+00 
21-09-12 22:50:48.633 - INFO: [epoch:  5, iter: 316,800, lr:(5.932e-05,)] l_pix: 1.0697e+01 
21-09-12 22:52:32.741 - INFO: [epoch:  5, iter: 316,900, lr:(5.926e-05,)] l_pix: 1.2266e+01 
21-09-12 22:54:16.955 - INFO: [epoch:  5, iter: 317,000, lr:(5.920e-05,)] l_pix: 1.1054e+01 
21-09-12 22:56:01.341 - INFO: [epoch:  5, iter: 317,100, lr:(5.915e-05,)] l_pix: 1.3280e+01 
21-09-12 22:57:45.444 - INFO: [epoch:  5, iter: 317,200, lr:(5.909e-05,)] l_pix: 1.1214e+01 
21-09-12 22:59:29.284 - INFO: [epoch:  5, iter: 317,300, lr:(5.903e-05,)] l_pix: 1.1908e+01 
21-09-12 23:01:13.007 - INFO: [epoch:  5, iter: 317,400, lr:(5.898e-05,)] l_pix: 1.1853e+01 
21-09-12 23:02:57.110 - INFO: [epoch:  5, iter: 317,500, lr:(5.892e-05,)] l_pix: 1.1101e+01 
21-09-12 23:04:41.341 - INFO: [epoch:  5, iter: 317,600, lr:(5.886e-05,)] l_pix: 1.1799e+01 
21-09-12 23:06:25.716 - INFO: [epoch:  5, iter: 317,700, lr:(5.880e-05,)] l_pix: 1.0988e+01 
21-09-12 23:08:09.792 - INFO: [epoch:  5, iter: 317,800, lr:(5.875e-05,)] l_pix: 1.2712e+01 
21-09-12 23:09:53.454 - INFO: [epoch:  5, iter: 317,900, lr:(5.869e-05,)] l_pix: 1.0397e+01 
21-09-12 23:11:37.222 - INFO: [epoch:  5, iter: 318,000, lr:(5.863e-05,)] l_pix: 1.2513e+01 
21-09-12 23:13:21.238 - INFO: [epoch:  5, iter: 318,100, lr:(5.858e-05,)] l_pix: 1.1388e+01 
21-09-12 23:15:05.202 - INFO: [epoch:  5, iter: 318,200, lr:(5.852e-05,)] l_pix: 1.2024e+01 
21-09-12 23:16:49.126 - INFO: [epoch:  5, iter: 318,300, lr:(5.846e-05,)] l_pix: 1.3287e+01 
21-09-12 23:18:33.252 - INFO: [epoch:  5, iter: 318,400, lr:(5.840e-05,)] l_pix: 1.3033e+01 
21-09-12 23:20:17.613 - INFO: [epoch:  5, iter: 318,500, lr:(5.835e-05,)] l_pix: 9.9843e+00 
21-09-12 23:22:02.146 - INFO: [epoch:  5, iter: 318,600, lr:(5.829e-05,)] l_pix: 1.1583e+01 
21-09-12 23:23:46.663 - INFO: [epoch:  5, iter: 318,700, lr:(5.823e-05,)] l_pix: 1.2280e+01 
21-09-12 23:25:30.975 - INFO: [epoch:  5, iter: 318,800, lr:(5.818e-05,)] l_pix: 1.1476e+01 
21-09-12 23:27:15.448 - INFO: [epoch:  5, iter: 318,900, lr:(5.812e-05,)] l_pix: 1.1777e+01 
21-09-12 23:28:57.725 - INFO: [epoch:  5, iter: 319,000, lr:(5.806e-05,)] l_pix: 1.1693e+01 
21-09-12 23:30:39.707 - INFO: [epoch:  5, iter: 319,100, lr:(5.800e-05,)] l_pix: 1.0835e+01 
21-09-12 23:32:21.479 - INFO: [epoch:  5, iter: 319,200, lr:(5.795e-05,)] l_pix: 1.0100e+01 
21-09-12 23:34:03.281 - INFO: [epoch:  5, iter: 319,300, lr:(5.789e-05,)] l_pix: 1.2098e+01 
21-09-12 23:35:45.267 - INFO: [epoch:  5, iter: 319,400, lr:(5.783e-05,)] l_pix: 1.2619e+01 
21-09-12 23:37:26.876 - INFO: [epoch:  5, iter: 319,500, lr:(5.778e-05,)] l_pix: 1.1934e+01 
21-09-12 23:39:08.558 - INFO: [epoch:  5, iter: 319,600, lr:(5.772e-05,)] l_pix: 1.2230e+01 
21-09-12 23:40:50.179 - INFO: [epoch:  5, iter: 319,700, lr:(5.766e-05,)] l_pix: 1.1462e+01 
21-09-12 23:42:31.741 - INFO: [epoch:  5, iter: 319,800, lr:(5.761e-05,)] l_pix: 1.0872e+01 
21-09-12 23:44:12.759 - INFO: [epoch:  5, iter: 319,900, lr:(5.755e-05,)] l_pix: 1.1987e+01 
21-09-12 23:45:53.839 - INFO: [epoch:  5, iter: 320,000, lr:(5.749e-05,)] l_pix: 1.0088e+01 
21-09-12 23:47:55.710 - INFO: # Validation # PSNR: 2.8883e+01
21-09-12 23:47:55.710 - INFO: Saving models and training states.
21-09-12 23:49:38.247 - INFO: [epoch:  5, iter: 320,100, lr:(5.744e-05,)] l_pix: 1.2341e+01 
21-09-12 23:51:19.879 - INFO: [epoch:  5, iter: 320,200, lr:(5.738e-05,)] l_pix: 1.0939e+01 
21-09-12 23:53:01.928 - INFO: [epoch:  5, iter: 320,300, lr:(5.732e-05,)] l_pix: 1.0074e+01 
21-09-12 23:54:44.036 - INFO: [epoch:  5, iter: 320,400, lr:(5.727e-05,)] l_pix: 9.2003e+00 
21-09-12 23:56:25.815 - INFO: [epoch:  5, iter: 320,500, lr:(5.721e-05,)] l_pix: 1.0988e+01 
21-09-12 23:58:07.446 - INFO: [epoch:  5, iter: 320,600, lr:(5.715e-05,)] l_pix: 1.1646e+01 
21-09-12 23:59:49.161 - INFO: [epoch:  5, iter: 320,700, lr:(5.710e-05,)] l_pix: 1.1526e+01 
21-09-13 00:01:31.270 - INFO: [epoch:  5, iter: 320,800, lr:(5.704e-05,)] l_pix: 8.9783e+00 
21-09-13 00:03:12.712 - INFO: [epoch:  5, iter: 320,900, lr:(5.698e-05,)] l_pix: 1.3861e+01 
21-09-13 00:04:54.383 - INFO: [epoch:  5, iter: 321,000, lr:(5.693e-05,)] l_pix: 1.4638e+01 
21-09-13 00:06:36.551 - INFO: [epoch:  5, iter: 321,100, lr:(5.687e-05,)] l_pix: 1.1459e+01 
21-09-13 00:08:18.263 - INFO: [epoch:  5, iter: 321,200, lr:(5.681e-05,)] l_pix: 1.1538e+01 
21-09-13 00:10:00.013 - INFO: [epoch:  5, iter: 321,300, lr:(5.676e-05,)] l_pix: 1.0504e+01 
21-09-13 00:11:42.875 - INFO: [epoch:  5, iter: 321,400, lr:(5.670e-05,)] l_pix: 1.1409e+01 
21-09-13 00:13:24.915 - INFO: [epoch:  5, iter: 321,500, lr:(5.664e-05,)] l_pix: 1.1920e+01 
21-09-13 00:15:06.818 - INFO: [epoch:  5, iter: 321,600, lr:(5.659e-05,)] l_pix: 1.0459e+01 
21-09-13 00:16:48.607 - INFO: [epoch:  5, iter: 321,700, lr:(5.653e-05,)] l_pix: 1.0847e+01 
21-09-13 00:18:30.061 - INFO: [epoch:  5, iter: 321,800, lr:(5.647e-05,)] l_pix: 1.1825e+01 
21-09-13 00:20:11.063 - INFO: [epoch:  5, iter: 321,900, lr:(5.642e-05,)] l_pix: 1.4469e+01 
21-09-13 00:21:52.866 - INFO: [epoch:  5, iter: 322,000, lr:(5.636e-05,)] l_pix: 1.0047e+01 
21-09-13 00:23:35.881 - INFO: [epoch:  5, iter: 322,100, lr:(5.630e-05,)] l_pix: 1.1228e+01 
21-09-13 00:25:19.618 - INFO: [epoch:  5, iter: 322,200, lr:(5.625e-05,)] l_pix: 1.1252e+01 
21-09-13 00:27:03.739 - INFO: [epoch:  5, iter: 322,300, lr:(5.619e-05,)] l_pix: 1.3190e+01 
21-09-13 00:28:47.268 - INFO: [epoch:  5, iter: 322,400, lr:(5.613e-05,)] l_pix: 1.1184e+01 
21-09-13 00:30:31.097 - INFO: [epoch:  5, iter: 322,500, lr:(5.608e-05,)] l_pix: 1.1240e+01 
21-09-13 00:32:14.518 - INFO: [epoch:  5, iter: 322,600, lr:(5.602e-05,)] l_pix: 1.0555e+01 
21-09-13 00:33:57.692 - INFO: [epoch:  5, iter: 322,700, lr:(5.596e-05,)] l_pix: 1.0238e+01 
21-09-13 00:35:41.364 - INFO: [epoch:  5, iter: 322,800, lr:(5.591e-05,)] l_pix: 1.3388e+01 
21-09-13 00:37:24.908 - INFO: [epoch:  5, iter: 322,900, lr:(5.585e-05,)] l_pix: 1.2123e+01 
21-09-13 00:39:07.854 - INFO: [epoch:  5, iter: 323,000, lr:(5.580e-05,)] l_pix: 1.1004e+01 
21-09-13 00:40:51.937 - INFO: [epoch:  5, iter: 323,100, lr:(5.574e-05,)] l_pix: 1.1467e+01 
21-09-13 00:42:36.400 - INFO: [epoch:  5, iter: 323,200, lr:(5.568e-05,)] l_pix: 1.0846e+01 
21-09-13 00:44:20.416 - INFO: [epoch:  5, iter: 323,300, lr:(5.563e-05,)] l_pix: 1.0238e+01 
21-09-13 00:46:04.240 - INFO: [epoch:  5, iter: 323,400, lr:(5.557e-05,)] l_pix: 1.0162e+01 
21-09-13 00:47:47.744 - INFO: [epoch:  5, iter: 323,500, lr:(5.551e-05,)] l_pix: 1.3013e+01 
21-09-13 00:49:31.341 - INFO: [epoch:  5, iter: 323,600, lr:(5.546e-05,)] l_pix: 1.2067e+01 
21-09-13 00:51:15.205 - INFO: [epoch:  5, iter: 323,700, lr:(5.540e-05,)] l_pix: 1.0852e+01 
21-09-13 00:52:58.684 - INFO: [epoch:  5, iter: 323,800, lr:(5.535e-05,)] l_pix: 9.5719e+00 
21-09-13 00:54:41.780 - INFO: [epoch:  5, iter: 323,900, lr:(5.529e-05,)] l_pix: 1.1084e+01 
21-09-13 00:56:25.404 - INFO: [epoch:  5, iter: 324,000, lr:(5.523e-05,)] l_pix: 9.8113e+00 
21-09-13 00:58:09.016 - INFO: [epoch:  5, iter: 324,100, lr:(5.518e-05,)] l_pix: 1.3301e+01 
21-09-13 00:59:52.861 - INFO: [epoch:  5, iter: 324,200, lr:(5.512e-05,)] l_pix: 1.2119e+01 
21-09-13 01:01:37.358 - INFO: [epoch:  5, iter: 324,300, lr:(5.507e-05,)] l_pix: 9.8640e+00 
21-09-13 01:03:21.498 - INFO: [epoch:  5, iter: 324,400, lr:(5.501e-05,)] l_pix: 1.2451e+01 
21-09-13 01:05:05.542 - INFO: [epoch:  5, iter: 324,500, lr:(5.495e-05,)] l_pix: 1.2188e+01 
21-09-13 01:06:49.176 - INFO: [epoch:  5, iter: 324,600, lr:(5.490e-05,)] l_pix: 1.1281e+01 
21-09-13 01:08:32.734 - INFO: [epoch:  5, iter: 324,700, lr:(5.484e-05,)] l_pix: 1.1117e+01 
21-09-13 01:10:15.844 - INFO: [epoch:  5, iter: 324,800, lr:(5.479e-05,)] l_pix: 1.0118e+01 
21-09-13 01:11:59.353 - INFO: [epoch:  5, iter: 324,900, lr:(5.473e-05,)] l_pix: 1.0653e+01 
21-09-13 01:13:43.577 - INFO: [epoch:  5, iter: 325,000, lr:(5.467e-05,)] l_pix: 1.1697e+01 
21-09-13 01:15:48.674 - INFO: # Validation # PSNR: 2.8876e+01
21-09-13 01:15:48.674 - INFO: Saving models and training states.
21-09-13 01:17:33.243 - INFO: [epoch:  5, iter: 325,100, lr:(5.462e-05,)] l_pix: 1.1108e+01 
21-09-13 01:19:17.178 - INFO: [epoch:  5, iter: 325,200, lr:(5.456e-05,)] l_pix: 1.0007e+01 
21-09-13 01:21:01.364 - INFO: [epoch:  5, iter: 325,300, lr:(5.451e-05,)] l_pix: 1.1876e+01 
21-09-13 01:22:43.904 - INFO: [epoch:  5, iter: 325,400, lr:(5.445e-05,)] l_pix: 1.2054e+01 
21-09-13 01:24:25.644 - INFO: [epoch:  5, iter: 325,500, lr:(5.439e-05,)] l_pix: 9.3895e+00 
21-09-13 01:26:07.175 - INFO: [epoch:  5, iter: 325,600, lr:(5.434e-05,)] l_pix: 1.0044e+01 
21-09-13 01:27:48.639 - INFO: [epoch:  5, iter: 325,700, lr:(5.428e-05,)] l_pix: 1.1647e+01 
21-09-13 01:29:30.132 - INFO: [epoch:  5, iter: 325,800, lr:(5.423e-05,)] l_pix: 1.3191e+01 
21-09-13 01:31:11.483 - INFO: [epoch:  5, iter: 325,900, lr:(5.417e-05,)] l_pix: 1.3193e+01 
21-09-13 01:32:53.103 - INFO: [epoch:  5, iter: 326,000, lr:(5.411e-05,)] l_pix: 1.0774e+01 
21-09-13 01:34:34.475 - INFO: [epoch:  5, iter: 326,100, lr:(5.406e-05,)] l_pix: 1.2263e+01 
21-09-13 01:36:15.615 - INFO: [epoch:  5, iter: 326,200, lr:(5.400e-05,)] l_pix: 1.1087e+01 
21-09-13 01:37:57.117 - INFO: [epoch:  5, iter: 326,300, lr:(5.395e-05,)] l_pix: 1.4159e+01 
21-09-13 01:39:39.101 - INFO: [epoch:  5, iter: 326,400, lr:(5.389e-05,)] l_pix: 1.1726e+01 
21-09-13 01:41:20.719 - INFO: [epoch:  5, iter: 326,500, lr:(5.384e-05,)] l_pix: 1.2519e+01 
21-09-13 01:43:02.331 - INFO: [epoch:  5, iter: 326,600, lr:(5.378e-05,)] l_pix: 1.0070e+01 
21-09-13 01:44:44.027 - INFO: [epoch:  5, iter: 326,700, lr:(5.372e-05,)] l_pix: 1.1474e+01 
21-09-13 01:46:26.872 - INFO: [epoch:  5, iter: 326,800, lr:(5.367e-05,)] l_pix: 1.1302e+01 
21-09-13 01:48:10.832 - INFO: [epoch:  5, iter: 326,900, lr:(5.361e-05,)] l_pix: 1.2684e+01 
21-09-13 01:49:54.576 - INFO: [epoch:  5, iter: 327,000, lr:(5.356e-05,)] l_pix: 1.0777e+01 
21-09-13 01:51:37.809 - INFO: [epoch:  5, iter: 327,100, lr:(5.350e-05,)] l_pix: 1.0548e+01 
21-09-13 01:53:21.098 - INFO: [epoch:  5, iter: 327,200, lr:(5.345e-05,)] l_pix: 1.3351e+01 
21-09-13 01:55:03.936 - INFO: [epoch:  5, iter: 327,300, lr:(5.339e-05,)] l_pix: 8.9865e+00 
21-09-13 01:56:47.104 - INFO: [epoch:  5, iter: 327,400, lr:(5.334e-05,)] l_pix: 1.2134e+01 
21-09-13 01:58:30.260 - INFO: [epoch:  5, iter: 327,500, lr:(5.328e-05,)] l_pix: 1.1343e+01 
21-09-13 02:00:13.635 - INFO: [epoch:  5, iter: 327,600, lr:(5.322e-05,)] l_pix: 1.1031e+01 
21-09-13 02:01:57.235 - INFO: [epoch:  5, iter: 327,700, lr:(5.317e-05,)] l_pix: 1.1577e+01 
21-09-13 02:03:41.268 - INFO: [epoch:  5, iter: 327,800, lr:(5.311e-05,)] l_pix: 1.1391e+01 
21-09-13 02:05:24.835 - INFO: [epoch:  5, iter: 327,900, lr:(5.306e-05,)] l_pix: 1.2406e+01 
21-09-13 02:07:08.396 - INFO: [epoch:  5, iter: 328,000, lr:(5.300e-05,)] l_pix: 1.0676e+01 
21-09-13 02:08:51.742 - INFO: [epoch:  5, iter: 328,100, lr:(5.295e-05,)] l_pix: 1.1815e+01 
21-09-13 02:10:35.044 - INFO: [epoch:  5, iter: 328,200, lr:(5.289e-05,)] l_pix: 1.1467e+01 
21-09-13 02:12:18.659 - INFO: [epoch:  5, iter: 328,300, lr:(5.284e-05,)] l_pix: 1.1820e+01 
21-09-13 02:14:01.791 - INFO: [epoch:  5, iter: 328,400, lr:(5.278e-05,)] l_pix: 1.2836e+01 
21-09-13 02:15:45.299 - INFO: [epoch:  5, iter: 328,500, lr:(5.273e-05,)] l_pix: 1.0032e+01 
21-09-13 02:17:29.393 - INFO: [epoch:  5, iter: 328,600, lr:(5.267e-05,)] l_pix: 1.0585e+01 
21-09-13 02:19:13.196 - INFO: [epoch:  5, iter: 328,700, lr:(5.262e-05,)] l_pix: 9.6673e+00 
21-09-13 02:20:57.220 - INFO: [epoch:  5, iter: 328,800, lr:(5.256e-05,)] l_pix: 1.3105e+01 
21-09-13 02:22:40.901 - INFO: [epoch:  5, iter: 328,900, lr:(5.250e-05,)] l_pix: 1.2080e+01 
21-09-13 02:24:24.187 - INFO: [epoch:  5, iter: 329,000, lr:(5.245e-05,)] l_pix: 1.2083e+01 
21-09-13 02:26:07.256 - INFO: [epoch:  5, iter: 329,100, lr:(5.239e-05,)] l_pix: 1.1462e+01 
21-09-13 02:27:50.420 - INFO: [epoch:  5, iter: 329,200, lr:(5.234e-05,)] l_pix: 1.1398e+01 
21-09-13 02:29:33.619 - INFO: [epoch:  5, iter: 329,300, lr:(5.228e-05,)] l_pix: 1.0675e+01 
21-09-13 02:31:16.387 - INFO: [epoch:  5, iter: 329,400, lr:(5.223e-05,)] l_pix: 1.2307e+01 
21-09-13 02:33:00.009 - INFO: [epoch:  5, iter: 329,500, lr:(5.217e-05,)] l_pix: 1.0953e+01 
21-09-13 02:34:43.369 - INFO: [epoch:  5, iter: 329,600, lr:(5.212e-05,)] l_pix: 1.0518e+01 
21-09-13 02:36:27.121 - INFO: [epoch:  5, iter: 329,700, lr:(5.206e-05,)] l_pix: 1.1684e+01 
21-09-13 02:38:10.485 - INFO: [epoch:  5, iter: 329,800, lr:(5.201e-05,)] l_pix: 1.1112e+01 
21-09-13 02:39:54.038 - INFO: [epoch:  5, iter: 329,900, lr:(5.195e-05,)] l_pix: 1.0054e+01 
21-09-13 02:41:37.372 - INFO: [epoch:  5, iter: 330,000, lr:(5.190e-05,)] l_pix: 1.2009e+01 
21-09-13 02:43:41.144 - INFO: # Validation # PSNR: 2.8927e+01
21-09-13 02:43:41.145 - INFO: Saving models and training states.
21-09-13 02:45:25.140 - INFO: [epoch:  5, iter: 330,100, lr:(5.184e-05,)] l_pix: 1.0994e+01 
21-09-13 02:47:06.595 - INFO: [epoch:  5, iter: 330,200, lr:(5.179e-05,)] l_pix: 1.1750e+01 
21-09-13 02:48:47.935 - INFO: [epoch:  5, iter: 330,300, lr:(5.173e-05,)] l_pix: 1.0526e+01 
21-09-13 02:50:28.963 - INFO: [epoch:  5, iter: 330,400, lr:(5.168e-05,)] l_pix: 1.0022e+01 
21-09-13 02:52:10.024 - INFO: [epoch:  5, iter: 330,500, lr:(5.162e-05,)] l_pix: 9.1225e+00 
21-09-13 02:53:51.802 - INFO: [epoch:  5, iter: 330,600, lr:(5.157e-05,)] l_pix: 1.5416e+01 
21-09-13 02:55:33.755 - INFO: [epoch:  5, iter: 330,700, lr:(5.151e-05,)] l_pix: 1.2030e+01 
21-09-13 02:57:15.617 - INFO: [epoch:  5, iter: 330,800, lr:(5.146e-05,)] l_pix: 1.4424e+01 
21-09-13 02:58:57.171 - INFO: [epoch:  5, iter: 330,900, lr:(5.140e-05,)] l_pix: 1.1649e+01 
21-09-13 03:00:38.623 - INFO: [epoch:  5, iter: 331,000, lr:(5.135e-05,)] l_pix: 1.1479e+01 
21-09-13 03:02:19.822 - INFO: [epoch:  5, iter: 331,100, lr:(5.129e-05,)] l_pix: 1.0562e+01 
21-09-13 03:04:01.155 - INFO: [epoch:  5, iter: 331,200, lr:(5.124e-05,)] l_pix: 1.0567e+01 
21-09-13 03:05:42.517 - INFO: [epoch:  5, iter: 331,300, lr:(5.118e-05,)] l_pix: 1.2662e+01 
21-09-13 03:07:23.789 - INFO: [epoch:  5, iter: 331,400, lr:(5.113e-05,)] l_pix: 1.0822e+01 
21-09-13 03:09:05.268 - INFO: [epoch:  5, iter: 331,500, lr:(5.107e-05,)] l_pix: 1.2060e+01 
21-09-13 03:10:46.256 - INFO: [epoch:  5, iter: 331,600, lr:(5.102e-05,)] l_pix: 1.1288e+01 
21-09-13 03:12:27.657 - INFO: [epoch:  5, iter: 331,700, lr:(5.097e-05,)] l_pix: 1.2626e+01 
21-09-13 03:14:09.652 - INFO: [epoch:  5, iter: 331,800, lr:(5.091e-05,)] l_pix: 1.1749e+01 
21-09-13 03:15:51.325 - INFO: [epoch:  5, iter: 331,900, lr:(5.086e-05,)] l_pix: 1.0121e+01 
21-09-13 03:17:32.926 - INFO: [epoch:  5, iter: 332,000, lr:(5.080e-05,)] l_pix: 1.2515e+01 
21-09-13 03:19:14.453 - INFO: [epoch:  5, iter: 332,100, lr:(5.075e-05,)] l_pix: 1.0086e+01 
21-09-13 03:20:55.967 - INFO: [epoch:  5, iter: 332,200, lr:(5.069e-05,)] l_pix: 9.8078e+00 
21-09-13 03:22:37.601 - INFO: [epoch:  5, iter: 332,300, lr:(5.064e-05,)] l_pix: 1.1878e+01 
21-09-13 03:24:18.948 - INFO: [epoch:  5, iter: 332,400, lr:(5.058e-05,)] l_pix: 1.2832e+01 
21-09-13 03:26:00.344 - INFO: [epoch:  5, iter: 332,500, lr:(5.053e-05,)] l_pix: 1.2202e+01 
21-09-13 03:27:42.962 - INFO: [epoch:  5, iter: 332,600, lr:(5.047e-05,)] l_pix: 1.1768e+01 
21-09-13 03:29:23.929 - INFO: [epoch:  5, iter: 332,700, lr:(5.042e-05,)] l_pix: 1.1995e+01 
21-09-13 03:31:05.312 - INFO: [epoch:  5, iter: 332,800, lr:(5.036e-05,)] l_pix: 1.0157e+01 
21-09-13 03:32:47.208 - INFO: [epoch:  5, iter: 332,900, lr:(5.031e-05,)] l_pix: 1.0737e+01 
21-09-13 03:34:28.778 - INFO: [epoch:  5, iter: 333,000, lr:(5.026e-05,)] l_pix: 1.1172e+01 
21-09-13 03:36:10.122 - INFO: [epoch:  5, iter: 333,100, lr:(5.020e-05,)] l_pix: 1.1667e+01 
21-09-13 03:37:52.082 - INFO: [epoch:  5, iter: 333,200, lr:(5.015e-05,)] l_pix: 1.1826e+01 
21-09-13 03:39:33.636 - INFO: [epoch:  5, iter: 333,300, lr:(5.009e-05,)] l_pix: 1.2155e+01 
21-09-13 03:41:15.063 - INFO: [epoch:  5, iter: 333,400, lr:(5.004e-05,)] l_pix: 9.8079e+00 
21-09-13 03:42:56.275 - INFO: [epoch:  5, iter: 333,500, lr:(4.998e-05,)] l_pix: 1.2264e+01 
21-09-13 03:44:37.298 - INFO: [epoch:  5, iter: 333,600, lr:(4.993e-05,)] l_pix: 1.1918e+01 
21-09-13 03:46:19.259 - INFO: [epoch:  5, iter: 333,700, lr:(4.988e-05,)] l_pix: 1.0139e+01 
21-09-13 03:48:02.621 - INFO: [epoch:  5, iter: 333,800, lr:(4.982e-05,)] l_pix: 1.2336e+01 
21-09-13 03:49:46.643 - INFO: [epoch:  5, iter: 333,900, lr:(4.977e-05,)] l_pix: 1.1131e+01 
21-09-13 03:51:30.959 - INFO: [epoch:  5, iter: 334,000, lr:(4.971e-05,)] l_pix: 1.1427e+01 
21-09-13 03:53:15.213 - INFO: [epoch:  5, iter: 334,100, lr:(4.966e-05,)] l_pix: 1.2969e+01 
21-09-13 03:54:58.954 - INFO: [epoch:  5, iter: 334,200, lr:(4.960e-05,)] l_pix: 1.1235e+01 
21-09-13 03:56:42.465 - INFO: [epoch:  5, iter: 334,300, lr:(4.955e-05,)] l_pix: 1.1078e+01 
21-09-13 03:58:26.285 - INFO: [epoch:  5, iter: 334,400, lr:(4.950e-05,)] l_pix: 1.0849e+01 
21-09-13 04:00:10.039 - INFO: [epoch:  5, iter: 334,500, lr:(4.944e-05,)] l_pix: 1.1867e+01 
21-09-13 04:01:53.334 - INFO: [epoch:  5, iter: 334,600, lr:(4.939e-05,)] l_pix: 1.1290e+01 
21-09-13 04:03:36.602 - INFO: [epoch:  5, iter: 334,700, lr:(4.933e-05,)] l_pix: 1.1674e+01 
21-09-13 04:05:20.212 - INFO: [epoch:  5, iter: 334,800, lr:(4.928e-05,)] l_pix: 1.1999e+01 
21-09-13 04:07:03.702 - INFO: [epoch:  5, iter: 334,900, lr:(4.922e-05,)] l_pix: 1.1365e+01 
21-09-13 04:08:47.596 - INFO: [epoch:  5, iter: 335,000, lr:(4.917e-05,)] l_pix: 1.2189e+01 
21-09-13 04:10:52.735 - INFO: # Validation # PSNR: 2.8881e+01
21-09-13 04:10:52.736 - INFO: Saving models and training states.
21-09-13 04:12:37.129 - INFO: [epoch:  5, iter: 335,100, lr:(4.912e-05,)] l_pix: 1.1633e+01 
21-09-13 04:14:20.703 - INFO: [epoch:  5, iter: 335,200, lr:(4.906e-05,)] l_pix: 1.0296e+01 
21-09-13 04:16:04.391 - INFO: [epoch:  5, iter: 335,300, lr:(4.901e-05,)] l_pix: 1.1540e+01 
21-09-13 04:17:47.828 - INFO: [epoch:  5, iter: 335,400, lr:(4.895e-05,)] l_pix: 1.0287e+01 
21-09-13 04:19:31.052 - INFO: [epoch:  5, iter: 335,500, lr:(4.890e-05,)] l_pix: 1.0739e+01 
21-09-13 04:21:14.673 - INFO: [epoch:  5, iter: 335,600, lr:(4.885e-05,)] l_pix: 1.1541e+01 
21-09-13 04:22:58.479 - INFO: [epoch:  5, iter: 335,700, lr:(4.879e-05,)] l_pix: 1.2488e+01 
21-09-13 04:24:42.092 - INFO: [epoch:  5, iter: 335,800, lr:(4.874e-05,)] l_pix: 9.5948e+00 
21-09-13 04:26:26.286 - INFO: [epoch:  5, iter: 335,900, lr:(4.869e-05,)] l_pix: 1.3352e+01 
21-09-13 04:28:10.046 - INFO: [epoch:  5, iter: 336,000, lr:(4.863e-05,)] l_pix: 9.9388e+00 
21-09-13 04:29:54.450 - INFO: [epoch:  5, iter: 336,100, lr:(4.858e-05,)] l_pix: 1.0286e+01 
21-09-13 04:31:38.342 - INFO: [epoch:  5, iter: 336,200, lr:(4.852e-05,)] l_pix: 1.2434e+01 
21-09-13 04:33:22.056 - INFO: [epoch:  5, iter: 336,300, lr:(4.847e-05,)] l_pix: 1.2101e+01 
21-09-13 04:35:05.294 - INFO: [epoch:  5, iter: 336,400, lr:(4.842e-05,)] l_pix: 1.1733e+01 
21-09-13 04:36:48.752 - INFO: [epoch:  6, iter: 336,500, lr:(4.836e-05,)] l_pix: 1.1622e+01 
21-09-13 04:38:32.394 - INFO: [epoch:  6, iter: 336,600, lr:(4.831e-05,)] l_pix: 1.1768e+01 
21-09-13 04:40:16.155 - INFO: [epoch:  6, iter: 336,700, lr:(4.825e-05,)] l_pix: 1.1138e+01 
21-09-13 04:41:59.495 - INFO: [epoch:  6, iter: 336,800, lr:(4.820e-05,)] l_pix: 9.8675e+00 
21-09-13 04:43:43.341 - INFO: [epoch:  6, iter: 336,900, lr:(4.815e-05,)] l_pix: 1.2098e+01 
21-09-13 04:45:27.006 - INFO: [epoch:  6, iter: 337,000, lr:(4.809e-05,)] l_pix: 1.0246e+01 
21-09-13 04:47:08.855 - INFO: [epoch:  6, iter: 337,100, lr:(4.804e-05,)] l_pix: 1.2484e+01 
21-09-13 04:48:51.218 - INFO: [epoch:  6, iter: 337,200, lr:(4.799e-05,)] l_pix: 1.2673e+01 
21-09-13 04:50:32.677 - INFO: [epoch:  6, iter: 337,300, lr:(4.793e-05,)] l_pix: 1.1882e+01 
21-09-13 04:52:14.111 - INFO: [epoch:  6, iter: 337,400, lr:(4.788e-05,)] l_pix: 1.1112e+01 
21-09-13 04:53:55.707 - INFO: [epoch:  6, iter: 337,500, lr:(4.783e-05,)] l_pix: 1.0930e+01 
21-09-13 04:55:37.167 - INFO: [epoch:  6, iter: 337,600, lr:(4.777e-05,)] l_pix: 1.0628e+01 
21-09-13 04:57:18.453 - INFO: [epoch:  6, iter: 337,700, lr:(4.772e-05,)] l_pix: 1.2743e+01 
21-09-13 04:58:59.878 - INFO: [epoch:  6, iter: 337,800, lr:(4.767e-05,)] l_pix: 1.1767e+01 
21-09-13 05:00:41.529 - INFO: [epoch:  6, iter: 337,900, lr:(4.761e-05,)] l_pix: 1.0772e+01 
21-09-13 05:02:23.167 - INFO: [epoch:  6, iter: 338,000, lr:(4.756e-05,)] l_pix: 1.1892e+01 
21-09-13 05:04:04.444 - INFO: [epoch:  6, iter: 338,100, lr:(4.750e-05,)] l_pix: 1.0833e+01 
21-09-13 05:05:45.854 - INFO: [epoch:  6, iter: 338,200, lr:(4.745e-05,)] l_pix: 1.2227e+01 
21-09-13 05:07:27.744 - INFO: [epoch:  6, iter: 338,300, lr:(4.740e-05,)] l_pix: 1.3697e+01 
21-09-13 05:09:09.552 - INFO: [epoch:  6, iter: 338,400, lr:(4.734e-05,)] l_pix: 1.0264e+01 
21-09-13 05:10:51.182 - INFO: [epoch:  6, iter: 338,500, lr:(4.729e-05,)] l_pix: 1.5289e+01 
21-09-13 05:12:32.852 - INFO: [epoch:  6, iter: 338,600, lr:(4.724e-05,)] l_pix: 1.2075e+01 
21-09-13 05:14:14.391 - INFO: [epoch:  6, iter: 338,700, lr:(4.718e-05,)] l_pix: 1.0343e+01 
21-09-13 05:15:55.952 - INFO: [epoch:  6, iter: 338,800, lr:(4.713e-05,)] l_pix: 1.2317e+01 
21-09-13 05:17:37.447 - INFO: [epoch:  6, iter: 338,900, lr:(4.708e-05,)] l_pix: 1.1929e+01 
21-09-13 05:19:18.856 - INFO: [epoch:  6, iter: 339,000, lr:(4.702e-05,)] l_pix: 1.0100e+01 
21-09-13 05:21:00.391 - INFO: [epoch:  6, iter: 339,100, lr:(4.697e-05,)] l_pix: 1.1269e+01 
21-09-13 05:22:41.526 - INFO: [epoch:  6, iter: 339,200, lr:(4.692e-05,)] l_pix: 1.2425e+01 
21-09-13 05:24:22.499 - INFO: [epoch:  6, iter: 339,300, lr:(4.687e-05,)] l_pix: 1.1207e+01 
21-09-13 05:26:04.205 - INFO: [epoch:  6, iter: 339,400, lr:(4.681e-05,)] l_pix: 1.2366e+01 
21-09-13 05:27:45.993 - INFO: [epoch:  6, iter: 339,500, lr:(4.676e-05,)] l_pix: 1.0670e+01 
21-09-13 05:29:27.735 - INFO: [epoch:  6, iter: 339,600, lr:(4.671e-05,)] l_pix: 1.1592e+01 
21-09-13 05:31:09.481 - INFO: [epoch:  6, iter: 339,700, lr:(4.665e-05,)] l_pix: 1.2928e+01 
21-09-13 05:32:51.281 - INFO: [epoch:  6, iter: 339,800, lr:(4.660e-05,)] l_pix: 1.1178e+01 
21-09-13 05:34:32.844 - INFO: [epoch:  6, iter: 339,900, lr:(4.655e-05,)] l_pix: 9.9375e+00 
21-09-13 05:36:13.997 - INFO: [epoch:  6, iter: 340,000, lr:(4.649e-05,)] l_pix: 1.2136e+01 
21-09-13 05:38:15.624 - INFO: # Validation # PSNR: 2.8869e+01
21-09-13 05:38:15.625 - INFO: Saving models and training states.
21-09-13 05:39:57.686 - INFO: [epoch:  6, iter: 340,100, lr:(4.644e-05,)] l_pix: 1.1470e+01 
21-09-13 05:41:38.934 - INFO: [epoch:  6, iter: 340,200, lr:(4.639e-05,)] l_pix: 9.8704e+00 
21-09-13 05:43:20.065 - INFO: [epoch:  6, iter: 340,300, lr:(4.633e-05,)] l_pix: 1.2488e+01 
21-09-13 05:45:02.009 - INFO: [epoch:  6, iter: 340,400, lr:(4.628e-05,)] l_pix: 1.2790e+01 
21-09-13 05:46:45.585 - INFO: [epoch:  6, iter: 340,500, lr:(4.623e-05,)] l_pix: 9.9785e+00 
21-09-13 05:48:29.537 - INFO: [epoch:  6, iter: 340,600, lr:(4.618e-05,)] l_pix: 1.2757e+01 
21-09-13 05:50:13.462 - INFO: [epoch:  6, iter: 340,700, lr:(4.612e-05,)] l_pix: 1.1024e+01 
21-09-13 05:51:56.726 - INFO: [epoch:  6, iter: 340,800, lr:(4.607e-05,)] l_pix: 1.0623e+01 
21-09-13 05:53:40.432 - INFO: [epoch:  6, iter: 340,900, lr:(4.602e-05,)] l_pix: 1.1646e+01 
21-09-13 05:55:24.317 - INFO: [epoch:  6, iter: 341,000, lr:(4.596e-05,)] l_pix: 1.1287e+01 
21-09-13 05:57:08.091 - INFO: [epoch:  6, iter: 341,100, lr:(4.591e-05,)] l_pix: 1.1449e+01 
21-09-13 05:58:52.137 - INFO: [epoch:  6, iter: 341,200, lr:(4.586e-05,)] l_pix: 1.0687e+01 
21-09-13 06:00:35.992 - INFO: [epoch:  6, iter: 341,300, lr:(4.581e-05,)] l_pix: 9.8545e+00 
21-09-13 06:02:19.907 - INFO: [epoch:  6, iter: 341,400, lr:(4.575e-05,)] l_pix: 1.1690e+01 
21-09-13 06:04:04.079 - INFO: [epoch:  6, iter: 341,500, lr:(4.570e-05,)] l_pix: 1.1760e+01 
21-09-13 06:05:48.410 - INFO: [epoch:  6, iter: 341,600, lr:(4.565e-05,)] l_pix: 1.0782e+01 
21-09-13 06:07:32.406 - INFO: [epoch:  6, iter: 341,700, lr:(4.560e-05,)] l_pix: 1.1426e+01 
21-09-13 06:09:16.002 - INFO: [epoch:  6, iter: 341,800, lr:(4.554e-05,)] l_pix: 1.0246e+01 
21-09-13 06:10:59.799 - INFO: [epoch:  6, iter: 341,900, lr:(4.549e-05,)] l_pix: 1.0072e+01 
21-09-13 06:12:44.211 - INFO: [epoch:  6, iter: 342,000, lr:(4.544e-05,)] l_pix: 1.0202e+01 
21-09-13 06:14:28.105 - INFO: [epoch:  6, iter: 342,100, lr:(4.538e-05,)] l_pix: 1.2764e+01 
21-09-13 06:16:12.676 - INFO: [epoch:  6, iter: 342,200, lr:(4.533e-05,)] l_pix: 1.1252e+01 
21-09-13 06:17:57.554 - INFO: [epoch:  6, iter: 342,300, lr:(4.528e-05,)] l_pix: 1.1457e+01 
21-09-13 06:19:41.764 - INFO: [epoch:  6, iter: 342,400, lr:(4.523e-05,)] l_pix: 1.1625e+01 
21-09-13 06:21:25.650 - INFO: [epoch:  6, iter: 342,500, lr:(4.517e-05,)] l_pix: 1.0177e+01 
21-09-13 06:23:10.022 - INFO: [epoch:  6, iter: 342,600, lr:(4.512e-05,)] l_pix: 1.0283e+01 
21-09-13 06:24:53.820 - INFO: [epoch:  6, iter: 342,700, lr:(4.507e-05,)] l_pix: 1.2983e+01 
21-09-13 06:26:37.181 - INFO: [epoch:  6, iter: 342,800, lr:(4.502e-05,)] l_pix: 1.0755e+01 
21-09-13 06:28:20.870 - INFO: [epoch:  6, iter: 342,900, lr:(4.496e-05,)] l_pix: 1.1308e+01 
21-09-13 06:30:05.142 - INFO: [epoch:  6, iter: 343,000, lr:(4.491e-05,)] l_pix: 1.1137e+01 
21-09-13 06:31:49.323 - INFO: [epoch:  6, iter: 343,100, lr:(4.486e-05,)] l_pix: 1.2461e+01 
21-09-13 06:33:33.227 - INFO: [epoch:  6, iter: 343,200, lr:(4.481e-05,)] l_pix: 1.1023e+01 
21-09-13 06:35:17.115 - INFO: [epoch:  6, iter: 343,300, lr:(4.476e-05,)] l_pix: 1.0324e+01 
21-09-13 06:37:01.835 - INFO: [epoch:  6, iter: 343,400, lr:(4.470e-05,)] l_pix: 1.2495e+01 
21-09-13 06:38:45.630 - INFO: [epoch:  6, iter: 343,500, lr:(4.465e-05,)] l_pix: 1.1080e+01 
21-09-13 06:40:28.985 - INFO: [epoch:  6, iter: 343,600, lr:(4.460e-05,)] l_pix: 1.0444e+01 
21-09-13 06:42:12.361 - INFO: [epoch:  6, iter: 343,700, lr:(4.455e-05,)] l_pix: 1.0946e+01 
21-09-13 06:43:56.574 - INFO: [epoch:  6, iter: 343,800, lr:(4.449e-05,)] l_pix: 1.2105e+01 
21-09-13 06:45:41.412 - INFO: [epoch:  6, iter: 343,900, lr:(4.444e-05,)] l_pix: 1.1611e+01 
21-09-13 06:47:23.439 - INFO: [epoch:  6, iter: 344,000, lr:(4.439e-05,)] l_pix: 1.1353e+01 
21-09-13 06:49:05.417 - INFO: [epoch:  6, iter: 344,100, lr:(4.434e-05,)] l_pix: 1.0281e+01 
21-09-13 06:50:47.092 - INFO: [epoch:  6, iter: 344,200, lr:(4.429e-05,)] l_pix: 1.0415e+01 
21-09-13 06:52:28.862 - INFO: [epoch:  6, iter: 344,300, lr:(4.423e-05,)] l_pix: 1.2407e+01 
21-09-13 06:54:10.738 - INFO: [epoch:  6, iter: 344,400, lr:(4.418e-05,)] l_pix: 1.1906e+01 
21-09-13 06:55:52.063 - INFO: [epoch:  6, iter: 344,500, lr:(4.413e-05,)] l_pix: 1.2321e+01 
21-09-13 06:57:33.215 - INFO: [epoch:  6, iter: 344,600, lr:(4.408e-05,)] l_pix: 1.3790e+01 
21-09-13 06:59:14.637 - INFO: [epoch:  6, iter: 344,700, lr:(4.403e-05,)] l_pix: 1.3791e+01 
21-09-13 07:00:56.914 - INFO: [epoch:  6, iter: 344,800, lr:(4.397e-05,)] l_pix: 1.0873e+01 
21-09-13 07:02:39.105 - INFO: [epoch:  6, iter: 344,900, lr:(4.392e-05,)] l_pix: 1.0103e+01 
21-09-13 07:04:21.027 - INFO: [epoch:  6, iter: 345,000, lr:(4.387e-05,)] l_pix: 1.1760e+01 
21-09-13 07:06:23.540 - INFO: # Validation # PSNR: 2.8927e+01
21-09-13 07:06:23.541 - INFO: Saving models and training states.
21-09-13 07:08:05.958 - INFO: [epoch:  6, iter: 345,100, lr:(4.382e-05,)] l_pix: 1.0366e+01 
21-09-13 07:09:47.280 - INFO: [epoch:  6, iter: 345,200, lr:(4.377e-05,)] l_pix: 1.1481e+01 
21-09-13 07:11:28.913 - INFO: [epoch:  6, iter: 345,300, lr:(4.371e-05,)] l_pix: 1.2403e+01 
21-09-13 07:13:10.228 - INFO: [epoch:  6, iter: 345,400, lr:(4.366e-05,)] l_pix: 1.2000e+01 
21-09-13 07:14:51.548 - INFO: [epoch:  6, iter: 345,500, lr:(4.361e-05,)] l_pix: 1.0525e+01 
21-09-13 07:16:32.837 - INFO: [epoch:  6, iter: 345,600, lr:(4.356e-05,)] l_pix: 1.2076e+01 
21-09-13 07:18:15.453 - INFO: [epoch:  6, iter: 345,700, lr:(4.351e-05,)] l_pix: 1.1236e+01 
21-09-13 07:19:58.874 - INFO: [epoch:  6, iter: 345,800, lr:(4.345e-05,)] l_pix: 1.0937e+01 
21-09-13 07:21:40.874 - INFO: [epoch:  6, iter: 345,900, lr:(4.340e-05,)] l_pix: 1.1684e+01 
21-09-13 07:23:22.461 - INFO: [epoch:  6, iter: 346,000, lr:(4.335e-05,)] l_pix: 1.1198e+01 
21-09-13 07:25:03.990 - INFO: [epoch:  6, iter: 346,100, lr:(4.330e-05,)] l_pix: 1.1914e+01 
21-09-13 07:26:46.145 - INFO: [epoch:  6, iter: 346,200, lr:(4.325e-05,)] l_pix: 1.0178e+01 
21-09-13 07:28:29.309 - INFO: [epoch:  6, iter: 346,300, lr:(4.320e-05,)] l_pix: 1.2444e+01 
21-09-13 07:30:12.578 - INFO: [epoch:  6, iter: 346,400, lr:(4.314e-05,)] l_pix: 1.0075e+01 
21-09-13 07:31:56.726 - INFO: [epoch:  6, iter: 346,500, lr:(4.309e-05,)] l_pix: 1.0637e+01 
21-09-13 07:33:40.464 - INFO: [epoch:  6, iter: 346,600, lr:(4.304e-05,)] l_pix: 1.1057e+01 
21-09-13 07:35:23.828 - INFO: [epoch:  6, iter: 346,700, lr:(4.299e-05,)] l_pix: 1.1484e+01 
21-09-13 07:37:07.273 - INFO: [epoch:  6, iter: 346,800, lr:(4.294e-05,)] l_pix: 1.1832e+01 
21-09-13 07:38:51.277 - INFO: [epoch:  6, iter: 346,900, lr:(4.289e-05,)] l_pix: 1.1878e+01 
21-09-13 07:40:34.963 - INFO: [epoch:  6, iter: 347,000, lr:(4.283e-05,)] l_pix: 1.0710e+01 
21-09-13 07:42:18.616 - INFO: [epoch:  6, iter: 347,100, lr:(4.278e-05,)] l_pix: 1.0474e+01 
21-09-13 07:44:02.402 - INFO: [epoch:  6, iter: 347,200, lr:(4.273e-05,)] l_pix: 1.3523e+01 
21-09-13 07:45:45.793 - INFO: [epoch:  6, iter: 347,300, lr:(4.268e-05,)] l_pix: 1.1351e+01 
21-09-13 07:47:29.880 - INFO: [epoch:  6, iter: 347,400, lr:(4.263e-05,)] l_pix: 8.8972e+00 
21-09-13 07:49:13.856 - INFO: [epoch:  6, iter: 347,500, lr:(4.258e-05,)] l_pix: 1.1798e+01 
21-09-13 07:50:57.696 - INFO: [epoch:  6, iter: 347,600, lr:(4.253e-05,)] l_pix: 1.0053e+01 
21-09-13 07:52:41.632 - INFO: [epoch:  6, iter: 347,700, lr:(4.247e-05,)] l_pix: 1.2559e+01 
21-09-13 07:54:24.846 - INFO: [epoch:  6, iter: 347,800, lr:(4.242e-05,)] l_pix: 9.8956e+00 
21-09-13 07:56:08.772 - INFO: [epoch:  6, iter: 347,900, lr:(4.237e-05,)] l_pix: 1.0551e+01 
21-09-13 07:57:52.597 - INFO: [epoch:  6, iter: 348,000, lr:(4.232e-05,)] l_pix: 1.0287e+01 
21-09-13 07:59:36.295 - INFO: [epoch:  6, iter: 348,100, lr:(4.227e-05,)] l_pix: 1.5198e+01 
21-09-13 08:01:19.952 - INFO: [epoch:  6, iter: 348,200, lr:(4.222e-05,)] l_pix: 1.1664e+01 
21-09-13 08:03:04.123 - INFO: [epoch:  6, iter: 348,300, lr:(4.217e-05,)] l_pix: 9.7936e+00 
21-09-13 08:04:48.201 - INFO: [epoch:  6, iter: 348,400, lr:(4.212e-05,)] l_pix: 1.0920e+01 
21-09-13 08:06:32.044 - INFO: [epoch:  6, iter: 348,500, lr:(4.207e-05,)] l_pix: 9.9038e+00 
21-09-13 08:08:16.037 - INFO: [epoch:  6, iter: 348,600, lr:(4.201e-05,)] l_pix: 1.1853e+01 
21-09-13 08:09:59.474 - INFO: [epoch:  6, iter: 348,700, lr:(4.196e-05,)] l_pix: 1.0417e+01 
21-09-13 08:11:43.055 - INFO: [epoch:  6, iter: 348,800, lr:(4.191e-05,)] l_pix: 1.1096e+01 
21-09-13 08:13:26.521 - INFO: [epoch:  6, iter: 348,900, lr:(4.186e-05,)] l_pix: 1.0419e+01 
21-09-13 08:15:10.436 - INFO: [epoch:  6, iter: 349,000, lr:(4.181e-05,)] l_pix: 1.0757e+01 
21-09-13 08:16:54.378 - INFO: [epoch:  6, iter: 349,100, lr:(4.176e-05,)] l_pix: 9.5987e+00 
21-09-13 08:18:38.497 - INFO: [epoch:  6, iter: 349,200, lr:(4.171e-05,)] l_pix: 1.2659e+01 
21-09-13 08:20:21.961 - INFO: [epoch:  6, iter: 349,300, lr:(4.166e-05,)] l_pix: 1.0761e+01 
21-09-13 08:22:06.077 - INFO: [epoch:  6, iter: 349,400, lr:(4.161e-05,)] l_pix: 1.0663e+01 
21-09-13 08:23:49.743 - INFO: [epoch:  6, iter: 349,500, lr:(4.155e-05,)] l_pix: 1.1034e+01 
21-09-13 08:25:33.494 - INFO: [epoch:  6, iter: 349,600, lr:(4.150e-05,)] l_pix: 1.2540e+01 
21-09-13 08:27:15.910 - INFO: [epoch:  6, iter: 349,700, lr:(4.145e-05,)] l_pix: 1.1002e+01 
21-09-13 08:28:57.566 - INFO: [epoch:  6, iter: 349,800, lr:(4.140e-05,)] l_pix: 1.1700e+01 
21-09-13 08:30:38.814 - INFO: [epoch:  6, iter: 349,900, lr:(4.135e-05,)] l_pix: 1.1136e+01 
21-09-13 08:32:20.660 - INFO: [epoch:  6, iter: 350,000, lr:(4.130e-05,)] l_pix: 1.0394e+01 
21-09-13 08:34:23.860 - INFO: # Validation # PSNR: 2.8868e+01
21-09-13 08:34:23.860 - INFO: Saving models and training states.
21-09-13 08:36:07.063 - INFO: [epoch:  6, iter: 350,100, lr:(4.125e-05,)] l_pix: 9.7200e+00 
21-09-13 08:37:49.530 - INFO: [epoch:  6, iter: 350,200, lr:(4.120e-05,)] l_pix: 1.2400e+01 
21-09-13 08:39:31.484 - INFO: [epoch:  6, iter: 350,300, lr:(4.115e-05,)] l_pix: 1.1168e+01 
21-09-13 08:41:13.570 - INFO: [epoch:  6, iter: 350,400, lr:(4.110e-05,)] l_pix: 1.1622e+01 
21-09-13 08:42:55.366 - INFO: [epoch:  6, iter: 350,500, lr:(4.105e-05,)] l_pix: 1.1012e+01 
21-09-13 08:44:36.919 - INFO: [epoch:  6, iter: 350,600, lr:(4.100e-05,)] l_pix: 1.0443e+01 
21-09-13 08:46:18.522 - INFO: [epoch:  6, iter: 350,700, lr:(4.095e-05,)] l_pix: 1.2218e+01 
21-09-13 08:48:00.103 - INFO: [epoch:  6, iter: 350,800, lr:(4.089e-05,)] l_pix: 1.2966e+01 
21-09-13 08:49:41.461 - INFO: [epoch:  6, iter: 350,900, lr:(4.084e-05,)] l_pix: 1.0633e+01 
21-09-13 08:51:22.874 - INFO: [epoch:  6, iter: 351,000, lr:(4.079e-05,)] l_pix: 9.4754e+00 
21-09-13 08:53:05.097 - INFO: [epoch:  6, iter: 351,100, lr:(4.074e-05,)] l_pix: 1.2860e+01 
21-09-13 08:54:47.840 - INFO: [epoch:  6, iter: 351,200, lr:(4.069e-05,)] l_pix: 1.0106e+01 
21-09-13 08:56:29.837 - INFO: [epoch:  6, iter: 351,300, lr:(4.064e-05,)] l_pix: 1.0592e+01 
21-09-13 08:58:11.976 - INFO: [epoch:  6, iter: 351,400, lr:(4.059e-05,)] l_pix: 1.0038e+01 
21-09-13 08:59:53.862 - INFO: [epoch:  6, iter: 351,500, lr:(4.054e-05,)] l_pix: 1.0446e+01 
21-09-13 09:01:35.975 - INFO: [epoch:  6, iter: 351,600, lr:(4.049e-05,)] l_pix: 9.7697e+00 
21-09-13 09:03:17.577 - INFO: [epoch:  6, iter: 351,700, lr:(4.044e-05,)] l_pix: 9.7671e+00 
21-09-13 09:04:59.040 - INFO: [epoch:  6, iter: 351,800, lr:(4.039e-05,)] l_pix: 1.1978e+01 
21-09-13 09:06:40.853 - INFO: [epoch:  6, iter: 351,900, lr:(4.034e-05,)] l_pix: 1.2261e+01 
21-09-13 09:08:22.388 - INFO: [epoch:  6, iter: 352,000, lr:(4.029e-05,)] l_pix: 1.0904e+01 
21-09-13 09:10:03.694 - INFO: [epoch:  6, iter: 352,100, lr:(4.024e-05,)] l_pix: 1.2269e+01 
21-09-13 09:11:45.509 - INFO: [epoch:  6, iter: 352,200, lr:(4.019e-05,)] l_pix: 1.0068e+01 
21-09-13 09:13:27.876 - INFO: [epoch:  6, iter: 352,300, lr:(4.014e-05,)] l_pix: 1.0744e+01 
21-09-13 09:15:10.411 - INFO: [epoch:  6, iter: 352,400, lr:(4.009e-05,)] l_pix: 1.0328e+01 
21-09-13 09:16:52.790 - INFO: [epoch:  6, iter: 352,500, lr:(4.004e-05,)] l_pix: 1.2350e+01 
21-09-13 09:18:34.546 - INFO: [epoch:  6, iter: 352,600, lr:(3.999e-05,)] l_pix: 1.1195e+01 
21-09-13 09:20:16.297 - INFO: [epoch:  6, iter: 352,700, lr:(3.994e-05,)] l_pix: 1.1681e+01 
21-09-13 09:21:57.926 - INFO: [epoch:  6, iter: 352,800, lr:(3.989e-05,)] l_pix: 1.2232e+01 
21-09-13 09:23:39.461 - INFO: [epoch:  6, iter: 352,900, lr:(3.984e-05,)] l_pix: 1.2418e+01 
21-09-13 09:25:21.277 - INFO: [epoch:  6, iter: 353,000, lr:(3.979e-05,)] l_pix: 1.0003e+01 
21-09-13 09:27:03.079 - INFO: [epoch:  6, iter: 353,100, lr:(3.974e-05,)] l_pix: 1.0497e+01 
21-09-13 09:28:44.347 - INFO: [epoch:  6, iter: 353,200, lr:(3.969e-05,)] l_pix: 1.0905e+01 
21-09-13 09:30:26.051 - INFO: [epoch:  6, iter: 353,300, lr:(3.964e-05,)] l_pix: 9.7030e+00 
21-09-13 09:32:08.717 - INFO: [epoch:  6, iter: 353,400, lr:(3.959e-05,)] l_pix: 1.1918e+01 
21-09-13 09:33:50.618 - INFO: [epoch:  6, iter: 353,500, lr:(3.954e-05,)] l_pix: 1.0812e+01 
21-09-13 09:35:32.368 - INFO: [epoch:  6, iter: 353,600, lr:(3.949e-05,)] l_pix: 1.1854e+01 
21-09-13 09:37:14.488 - INFO: [epoch:  6, iter: 353,700, lr:(3.944e-05,)] l_pix: 1.2027e+01 
21-09-13 09:38:56.374 - INFO: [epoch:  6, iter: 353,800, lr:(3.939e-05,)] l_pix: 1.0830e+01 
21-09-13 09:40:38.106 - INFO: [epoch:  6, iter: 353,900, lr:(3.934e-05,)] l_pix: 1.1207e+01 
21-09-13 09:42:20.082 - INFO: [epoch:  6, iter: 354,000, lr:(3.929e-05,)] l_pix: 1.0921e+01 
21-09-13 09:44:01.704 - INFO: [epoch:  6, iter: 354,100, lr:(3.924e-05,)] l_pix: 1.3876e+01 
21-09-13 09:45:43.598 - INFO: [epoch:  6, iter: 354,200, lr:(3.919e-05,)] l_pix: 1.1486e+01 
21-09-13 09:47:27.020 - INFO: [epoch:  6, iter: 354,300, lr:(3.914e-05,)] l_pix: 1.0808e+01 
21-09-13 09:49:10.023 - INFO: [epoch:  6, iter: 354,400, lr:(3.909e-05,)] l_pix: 1.0921e+01 
21-09-13 09:50:53.693 - INFO: [epoch:  6, iter: 354,500, lr:(3.904e-05,)] l_pix: 9.8485e+00 
21-09-13 09:52:37.506 - INFO: [epoch:  6, iter: 354,600, lr:(3.899e-05,)] l_pix: 1.0027e+01 
21-09-13 09:54:22.170 - INFO: [epoch:  6, iter: 354,700, lr:(3.894e-05,)] l_pix: 1.2862e+01 
21-09-13 09:56:06.870 - INFO: [epoch:  6, iter: 354,800, lr:(3.889e-05,)] l_pix: 9.8407e+00 
21-09-13 09:57:51.292 - INFO: [epoch:  6, iter: 354,900, lr:(3.884e-05,)] l_pix: 1.0099e+01 
21-09-13 09:59:35.507 - INFO: [epoch:  6, iter: 355,000, lr:(3.879e-05,)] l_pix: 9.7351e+00 
21-09-13 10:01:39.783 - INFO: # Validation # PSNR: 2.8852e+01
21-09-13 10:01:39.784 - INFO: Saving models and training states.
21-09-13 10:03:24.532 - INFO: [epoch:  6, iter: 355,100, lr:(3.874e-05,)] l_pix: 1.1479e+01 
21-09-13 10:05:08.704 - INFO: [epoch:  6, iter: 355,200, lr:(3.869e-05,)] l_pix: 9.9483e+00 
21-09-13 10:06:52.245 - INFO: [epoch:  6, iter: 355,300, lr:(3.864e-05,)] l_pix: 1.1502e+01 
21-09-13 10:08:35.937 - INFO: [epoch:  6, iter: 355,400, lr:(3.859e-05,)] l_pix: 1.1015e+01 
21-09-13 10:10:20.990 - INFO: [epoch:  6, iter: 355,500, lr:(3.854e-05,)] l_pix: 1.2019e+01 
21-09-13 10:12:05.843 - INFO: [epoch:  6, iter: 355,600, lr:(3.849e-05,)] l_pix: 1.1037e+01 
21-09-13 10:13:50.514 - INFO: [epoch:  6, iter: 355,700, lr:(3.844e-05,)] l_pix: 1.1023e+01 
21-09-13 10:15:34.962 - INFO: [epoch:  6, iter: 355,800, lr:(3.839e-05,)] l_pix: 1.1800e+01 
21-09-13 10:17:19.521 - INFO: [epoch:  6, iter: 355,900, lr:(3.834e-05,)] l_pix: 1.2690e+01 
21-09-13 10:19:03.802 - INFO: [epoch:  6, iter: 356,000, lr:(3.829e-05,)] l_pix: 9.3282e+00 
21-09-13 10:20:47.877 - INFO: [epoch:  6, iter: 356,100, lr:(3.825e-05,)] l_pix: 1.2357e+01 
21-09-13 10:22:31.781 - INFO: [epoch:  6, iter: 356,200, lr:(3.820e-05,)] l_pix: 9.8720e+00 
21-09-13 10:24:15.276 - INFO: [epoch:  6, iter: 356,300, lr:(3.815e-05,)] l_pix: 1.2955e+01 
21-09-13 10:25:59.129 - INFO: [epoch:  6, iter: 356,400, lr:(3.810e-05,)] l_pix: 1.0470e+01 
21-09-13 10:27:43.378 - INFO: [epoch:  6, iter: 356,500, lr:(3.805e-05,)] l_pix: 1.0539e+01 
21-09-13 10:29:28.375 - INFO: [epoch:  6, iter: 356,600, lr:(3.800e-05,)] l_pix: 1.0524e+01 
21-09-13 10:31:13.212 - INFO: [epoch:  6, iter: 356,700, lr:(3.795e-05,)] l_pix: 9.7535e+00 
21-09-13 10:32:57.381 - INFO: [epoch:  6, iter: 356,800, lr:(3.790e-05,)] l_pix: 1.2308e+01 
21-09-13 10:34:41.885 - INFO: [epoch:  6, iter: 356,900, lr:(3.785e-05,)] l_pix: 1.2386e+01 
21-09-13 10:36:25.851 - INFO: [epoch:  6, iter: 357,000, lr:(3.780e-05,)] l_pix: 1.1160e+01 
21-09-13 10:38:09.604 - INFO: [epoch:  6, iter: 357,100, lr:(3.775e-05,)] l_pix: 9.5420e+00 
21-09-13 10:39:52.783 - INFO: [epoch:  6, iter: 357,200, lr:(3.770e-05,)] l_pix: 1.1334e+01 
21-09-13 10:41:36.361 - INFO: [epoch:  6, iter: 357,300, lr:(3.765e-05,)] l_pix: 1.2079e+01 
21-09-13 10:43:20.758 - INFO: [epoch:  6, iter: 357,400, lr:(3.761e-05,)] l_pix: 1.1452e+01 
21-09-13 10:45:05.050 - INFO: [epoch:  6, iter: 357,500, lr:(3.756e-05,)] l_pix: 1.0014e+01 
21-09-13 10:46:47.345 - INFO: [epoch:  6, iter: 357,600, lr:(3.751e-05,)] l_pix: 1.3562e+01 
21-09-13 10:48:29.590 - INFO: [epoch:  6, iter: 357,700, lr:(3.746e-05,)] l_pix: 1.0297e+01 
21-09-13 10:50:12.172 - INFO: [epoch:  6, iter: 357,800, lr:(3.741e-05,)] l_pix: 1.2784e+01 
21-09-13 10:51:54.192 - INFO: [epoch:  6, iter: 357,900, lr:(3.736e-05,)] l_pix: 1.1990e+01 
21-09-13 10:53:36.156 - INFO: [epoch:  6, iter: 358,000, lr:(3.731e-05,)] l_pix: 1.2381e+01 
21-09-13 10:55:18.066 - INFO: [epoch:  6, iter: 358,100, lr:(3.726e-05,)] l_pix: 1.0780e+01 
21-09-13 10:56:59.839 - INFO: [epoch:  6, iter: 358,200, lr:(3.721e-05,)] l_pix: 1.1213e+01 
21-09-13 10:58:41.697 - INFO: [epoch:  6, iter: 358,300, lr:(3.717e-05,)] l_pix: 1.0892e+01 
21-09-13 11:00:23.456 - INFO: [epoch:  6, iter: 358,400, lr:(3.712e-05,)] l_pix: 1.3759e+01 
21-09-13 11:02:05.499 - INFO: [epoch:  6, iter: 358,500, lr:(3.707e-05,)] l_pix: 1.1567e+01 
21-09-13 11:03:47.402 - INFO: [epoch:  6, iter: 358,600, lr:(3.702e-05,)] l_pix: 1.1743e+01 
21-09-13 11:05:28.774 - INFO: [epoch:  6, iter: 358,700, lr:(3.697e-05,)] l_pix: 1.2575e+01 
21-09-13 11:07:10.971 - INFO: [epoch:  6, iter: 358,800, lr:(3.692e-05,)] l_pix: 1.0619e+01 
21-09-13 11:08:53.458 - INFO: [epoch:  6, iter: 358,900, lr:(3.687e-05,)] l_pix: 1.1654e+01 
21-09-13 11:10:35.302 - INFO: [epoch:  6, iter: 359,000, lr:(3.682e-05,)] l_pix: 1.0617e+01 
21-09-13 11:12:17.407 - INFO: [epoch:  6, iter: 359,100, lr:(3.678e-05,)] l_pix: 1.4191e+01 
21-09-13 11:13:59.522 - INFO: [epoch:  6, iter: 359,200, lr:(3.673e-05,)] l_pix: 1.0275e+01 
21-09-13 11:15:41.589 - INFO: [epoch:  6, iter: 359,300, lr:(3.668e-05,)] l_pix: 1.1282e+01 
21-09-13 11:17:23.044 - INFO: [epoch:  6, iter: 359,400, lr:(3.663e-05,)] l_pix: 1.1882e+01 
21-09-13 11:19:04.528 - INFO: [epoch:  6, iter: 359,500, lr:(3.658e-05,)] l_pix: 1.2305e+01 
21-09-13 11:20:46.330 - INFO: [epoch:  6, iter: 359,600, lr:(3.653e-05,)] l_pix: 8.9661e+00 
21-09-13 11:22:27.981 - INFO: [epoch:  6, iter: 359,700, lr:(3.648e-05,)] l_pix: 1.4036e+01 
21-09-13 11:24:09.245 - INFO: [epoch:  6, iter: 359,800, lr:(3.644e-05,)] l_pix: 1.0301e+01 
21-09-13 11:25:51.191 - INFO: [epoch:  6, iter: 359,900, lr:(3.639e-05,)] l_pix: 1.2023e+01 
21-09-13 11:27:33.575 - INFO: [epoch:  6, iter: 360,000, lr:(3.634e-05,)] l_pix: 1.2163e+01 
21-09-13 11:29:36.260 - INFO: # Validation # PSNR: 2.8885e+01
21-09-13 11:29:36.260 - INFO: Saving models and training states.
21-09-13 11:31:19.241 - INFO: [epoch:  6, iter: 360,100, lr:(3.629e-05,)] l_pix: 1.1813e+01 
21-09-13 11:33:01.316 - INFO: [epoch:  6, iter: 360,200, lr:(3.624e-05,)] l_pix: 1.0619e+01 
21-09-13 11:34:43.724 - INFO: [epoch:  6, iter: 360,300, lr:(3.619e-05,)] l_pix: 8.8975e+00 
21-09-13 11:36:25.846 - INFO: [epoch:  6, iter: 360,400, lr:(3.615e-05,)] l_pix: 1.2505e+01 
21-09-13 11:38:07.642 - INFO: [epoch:  6, iter: 360,500, lr:(3.610e-05,)] l_pix: 9.9636e+00 
21-09-13 11:39:49.365 - INFO: [epoch:  6, iter: 360,600, lr:(3.605e-05,)] l_pix: 1.1220e+01 
21-09-13 11:41:31.032 - INFO: [epoch:  6, iter: 360,700, lr:(3.600e-05,)] l_pix: 1.1348e+01 
21-09-13 11:43:12.443 - INFO: [epoch:  6, iter: 360,800, lr:(3.595e-05,)] l_pix: 1.0142e+01 
21-09-13 11:44:54.356 - INFO: [epoch:  6, iter: 360,900, lr:(3.590e-05,)] l_pix: 1.0640e+01 
21-09-13 11:46:36.419 - INFO: [epoch:  6, iter: 361,000, lr:(3.586e-05,)] l_pix: 1.3245e+01 
21-09-13 11:48:18.569 - INFO: [epoch:  6, iter: 361,100, lr:(3.581e-05,)] l_pix: 1.0772e+01 
21-09-13 11:50:01.145 - INFO: [epoch:  6, iter: 361,200, lr:(3.576e-05,)] l_pix: 1.1141e+01 
21-09-13 11:51:45.968 - INFO: [epoch:  6, iter: 361,300, lr:(3.571e-05,)] l_pix: 9.4690e+00 
21-09-13 11:53:29.556 - INFO: [epoch:  6, iter: 361,400, lr:(3.566e-05,)] l_pix: 1.0375e+01 
21-09-13 11:55:13.344 - INFO: [epoch:  6, iter: 361,500, lr:(3.562e-05,)] l_pix: 1.2765e+01 
21-09-13 11:56:56.913 - INFO: [epoch:  6, iter: 361,600, lr:(3.557e-05,)] l_pix: 1.1742e+01 
21-09-13 11:58:40.868 - INFO: [epoch:  6, iter: 361,700, lr:(3.552e-05,)] l_pix: 8.9770e+00 
21-09-13 12:00:22.560 - INFO: [epoch:  6, iter: 361,800, lr:(3.547e-05,)] l_pix: 1.2656e+01 
21-09-13 12:02:03.639 - INFO: [epoch:  6, iter: 361,900, lr:(3.542e-05,)] l_pix: 9.3517e+00 
21-09-13 12:03:46.185 - INFO: [epoch:  6, iter: 362,000, lr:(3.538e-05,)] l_pix: 1.1295e+01 
21-09-13 12:05:29.901 - INFO: [epoch:  6, iter: 362,100, lr:(3.533e-05,)] l_pix: 1.3326e+01 
21-09-13 12:07:13.714 - INFO: [epoch:  6, iter: 362,200, lr:(3.528e-05,)] l_pix: 1.1951e+01 
21-09-13 12:08:57.476 - INFO: [epoch:  6, iter: 362,300, lr:(3.523e-05,)] l_pix: 1.0458e+01 
21-09-13 12:10:41.094 - INFO: [epoch:  6, iter: 362,400, lr:(3.518e-05,)] l_pix: 1.2177e+01 
21-09-13 12:12:24.752 - INFO: [epoch:  6, iter: 362,500, lr:(3.514e-05,)] l_pix: 1.2361e+01 
21-09-13 12:14:08.144 - INFO: [epoch:  6, iter: 362,600, lr:(3.509e-05,)] l_pix: 1.1860e+01 
21-09-13 12:15:52.376 - INFO: [epoch:  6, iter: 362,700, lr:(3.504e-05,)] l_pix: 1.0339e+01 
21-09-13 12:17:36.609 - INFO: [epoch:  6, iter: 362,800, lr:(3.499e-05,)] l_pix: 1.1817e+01 
21-09-13 12:19:21.074 - INFO: [epoch:  6, iter: 362,900, lr:(3.495e-05,)] l_pix: 9.5223e+00 
21-09-13 12:21:05.765 - INFO: [epoch:  6, iter: 363,000, lr:(3.490e-05,)] l_pix: 1.2374e+01 
21-09-13 12:22:50.037 - INFO: [epoch:  6, iter: 363,100, lr:(3.485e-05,)] l_pix: 1.0116e+01 
21-09-13 12:24:34.743 - INFO: [epoch:  6, iter: 363,200, lr:(3.480e-05,)] l_pix: 1.0804e+01 
21-09-13 12:26:18.689 - INFO: [epoch:  6, iter: 363,300, lr:(3.476e-05,)] l_pix: 1.1827e+01 
21-09-13 12:28:02.543 - INFO: [epoch:  6, iter: 363,400, lr:(3.471e-05,)] l_pix: 1.3016e+01 
21-09-13 12:29:46.684 - INFO: [epoch:  6, iter: 363,500, lr:(3.466e-05,)] l_pix: 1.0714e+01 
21-09-13 12:31:28.721 - INFO: [epoch:  6, iter: 363,600, lr:(3.461e-05,)] l_pix: 1.2670e+01 
21-09-13 12:33:10.296 - INFO: [epoch:  6, iter: 363,700, lr:(3.457e-05,)] l_pix: 1.1950e+01 
21-09-13 12:34:51.496 - INFO: [epoch:  6, iter: 363,800, lr:(3.452e-05,)] l_pix: 1.2635e+01 
21-09-13 12:36:33.622 - INFO: [epoch:  6, iter: 363,900, lr:(3.447e-05,)] l_pix: 1.1397e+01 
21-09-13 12:38:17.217 - INFO: [epoch:  6, iter: 364,000, lr:(3.442e-05,)] l_pix: 1.0410e+01 
21-09-13 12:40:00.989 - INFO: [epoch:  6, iter: 364,100, lr:(3.438e-05,)] l_pix: 1.2748e+01 
21-09-13 12:41:44.656 - INFO: [epoch:  6, iter: 364,200, lr:(3.433e-05,)] l_pix: 1.1862e+01 
21-09-13 12:43:28.250 - INFO: [epoch:  6, iter: 364,300, lr:(3.428e-05,)] l_pix: 1.0180e+01 
21-09-13 12:45:11.321 - INFO: [epoch:  6, iter: 364,400, lr:(3.423e-05,)] l_pix: 1.0998e+01 
21-09-13 12:46:55.455 - INFO: [epoch:  6, iter: 364,500, lr:(3.419e-05,)] l_pix: 1.2161e+01 
21-09-13 12:48:39.585 - INFO: [epoch:  6, iter: 364,600, lr:(3.414e-05,)] l_pix: 9.7805e+00 
21-09-13 12:50:23.902 - INFO: [epoch:  6, iter: 364,700, lr:(3.409e-05,)] l_pix: 1.0564e+01 
21-09-13 12:52:08.223 - INFO: [epoch:  6, iter: 364,800, lr:(3.405e-05,)] l_pix: 1.1367e+01 
21-09-13 12:53:52.226 - INFO: [epoch:  6, iter: 364,900, lr:(3.400e-05,)] l_pix: 1.0022e+01 
21-09-13 12:55:35.627 - INFO: [epoch:  6, iter: 365,000, lr:(3.395e-05,)] l_pix: 1.2622e+01 
21-09-13 12:57:39.739 - INFO: # Validation # PSNR: 2.8902e+01
21-09-13 12:57:39.739 - INFO: Saving models and training states.
21-09-13 12:59:23.890 - INFO: [epoch:  6, iter: 365,100, lr:(3.390e-05,)] l_pix: 1.0854e+01 
21-09-13 13:01:07.063 - INFO: [epoch:  6, iter: 365,200, lr:(3.386e-05,)] l_pix: 1.2290e+01 
21-09-13 13:02:51.115 - INFO: [epoch:  6, iter: 365,300, lr:(3.381e-05,)] l_pix: 1.0854e+01 
21-09-13 13:04:35.102 - INFO: [epoch:  6, iter: 365,400, lr:(3.376e-05,)] l_pix: 1.1517e+01 
21-09-13 13:06:19.344 - INFO: [epoch:  6, iter: 365,500, lr:(3.372e-05,)] l_pix: 1.0028e+01 
21-09-13 13:08:03.836 - INFO: [epoch:  6, iter: 365,600, lr:(3.367e-05,)] l_pix: 1.2925e+01 
21-09-13 13:09:47.771 - INFO: [epoch:  6, iter: 365,700, lr:(3.362e-05,)] l_pix: 1.0929e+01 
21-09-13 13:11:31.277 - INFO: [epoch:  6, iter: 365,800, lr:(3.358e-05,)] l_pix: 1.1309e+01 
21-09-13 13:13:14.854 - INFO: [epoch:  6, iter: 365,900, lr:(3.353e-05,)] l_pix: 1.2166e+01 
21-09-13 13:14:58.134 - INFO: [epoch:  6, iter: 366,000, lr:(3.348e-05,)] l_pix: 1.1081e+01 
21-09-13 13:16:41.650 - INFO: [epoch:  6, iter: 366,100, lr:(3.343e-05,)] l_pix: 1.0826e+01 
21-09-13 13:18:25.788 - INFO: [epoch:  6, iter: 366,200, lr:(3.339e-05,)] l_pix: 1.1921e+01 
21-09-13 13:20:09.812 - INFO: [epoch:  6, iter: 366,300, lr:(3.334e-05,)] l_pix: 1.2608e+01 
21-09-13 13:21:54.237 - INFO: [epoch:  6, iter: 366,400, lr:(3.329e-05,)] l_pix: 1.1931e+01 
21-09-13 13:23:38.381 - INFO: [epoch:  6, iter: 366,500, lr:(3.325e-05,)] l_pix: 1.2251e+01 
21-09-13 13:25:22.561 - INFO: [epoch:  6, iter: 366,600, lr:(3.320e-05,)] l_pix: 9.9217e+00 
21-09-13 13:27:06.081 - INFO: [epoch:  6, iter: 366,700, lr:(3.315e-05,)] l_pix: 1.2406e+01 
21-09-13 13:28:49.460 - INFO: [epoch:  6, iter: 366,800, lr:(3.311e-05,)] l_pix: 1.0885e+01 
21-09-13 13:30:32.635 - INFO: [epoch:  6, iter: 366,900, lr:(3.306e-05,)] l_pix: 1.1623e+01 
21-09-13 13:32:15.896 - INFO: [epoch:  6, iter: 367,000, lr:(3.301e-05,)] l_pix: 1.1814e+01 
21-09-13 13:33:59.303 - INFO: [epoch:  6, iter: 367,100, lr:(3.297e-05,)] l_pix: 1.1382e+01 
21-09-13 13:35:43.443 - INFO: [epoch:  6, iter: 367,200, lr:(3.292e-05,)] l_pix: 1.0716e+01 
21-09-13 13:37:25.183 - INFO: [epoch:  6, iter: 367,300, lr:(3.287e-05,)] l_pix: 1.1720e+01 
21-09-13 13:39:06.777 - INFO: [epoch:  6, iter: 367,400, lr:(3.283e-05,)] l_pix: 1.0330e+01 
21-09-13 13:40:48.404 - INFO: [epoch:  6, iter: 367,500, lr:(3.278e-05,)] l_pix: 1.2399e+01 
21-09-13 13:42:29.964 - INFO: [epoch:  6, iter: 367,600, lr:(3.274e-05,)] l_pix: 1.1507e+01 
21-09-13 13:44:11.643 - INFO: [epoch:  6, iter: 367,700, lr:(3.269e-05,)] l_pix: 1.0804e+01 
21-09-13 13:45:53.070 - INFO: [epoch:  6, iter: 367,800, lr:(3.264e-05,)] l_pix: 1.2380e+01 
21-09-13 13:47:37.193 - INFO: [epoch:  6, iter: 367,900, lr:(3.260e-05,)] l_pix: 1.1877e+01 
21-09-13 13:49:21.615 - INFO: [epoch:  6, iter: 368,000, lr:(3.255e-05,)] l_pix: 1.1801e+01 
