21-09-13 13:54:32.164 - INFO:   name: RCAN_branch3
  use_tb_logger: True
  model: sr
  distortion: sr
  scale: 4
  gpu_ids: [0]
  network_G:[
    which_model_G: RCAN
    n_resblocks: 20
    n_feats: 64
    n_resgroups: 10
    res_scale: 1
    n_colors: 3
    rgb_range: 255
    scale: 4
    reduction: 16
  ]
  datasets:[
    train:[
      name: DIV2K
      mode: LQGT_rcan
      dataroot_GT: E:\dataset\div2k\class\DIV2k_scale_sub_psnr_GT_class3
      dataroot_LQ: E:\dataset\div2k\class\DIV2k_scale_sub_psnr_LR_class3
      use_shuffle: True
      n_workers: 6
      batch_size: 16
      GT_size: 128
      use_flip: True
      use_rot: True
      color: RGB
      phase: train
      scale: 4
      data_type: img
    ]
    val:[
      name: Set5
      mode: LQGT_rcan
      dataroot_GT: E:\dataset\div2k\Set5_valid_sub\Set5_valid_sub\GT
      dataroot_LQ: E:\dataset\div2k\Set5_valid_sub\Set5_valid_sub\LR
      phase: val
      scale: 4
      data_type: img
    ]
  ]
  path:[
    pretrain_model_G: E:\paddle_paper\ClassSR_paddle-develop\experiments\RCAN_branch3\models\365000_G.pth
    strict_load: True
    resume_state: E:\paddle_paper\ClassSR_paddle-develop\experiments\RCAN_branch3\training_state\365000.state
    root: E:\paddle_paper\ClassSR_paddle-develop
    experiments_root: E:\paddle_paper\ClassSR_paddle-develop\experiments\RCAN_branch3
    models: E:\paddle_paper\ClassSR_paddle-develop\experiments\RCAN_branch3\models
    training_state: E:\paddle_paper\ClassSR_paddle-develop\experiments\RCAN_branch3\training_state
    log: E:\paddle_paper\ClassSR_paddle-develop\experiments\RCAN_branch3
    val_images: E:\paddle_paper\ClassSR_paddle-develop\experiments\RCAN_branch3\val_images
  ]
  train:[
    lr_G: 0.0002
    lr_scheme: CosineAnnealingLR_Restart
    beta1: 0.9
    beta2: 0.99
    niter: 500000
    warmup_iter: -1
    T_period: [500000]
    restarts: [500000]
    restart_weights: [1]
    eta_min: 1e-07
    lr_gamma: 0.5
    clear_state: 1000000
    pixel_criterion: l1
    pixel_weight: 1.0
    manual_seed: 9990
    val_freq: 5000
  ]
  logger:[
    print_freq: 100
    save_checkpoint_freq: 5000
  ]
  is_train: True
  dist: False

21-09-13 13:54:32.512 - INFO: Random seed: 9990
21-09-13 13:54:36.530 - INFO: Dataset [LQGTDataset_rcan - DIV2K] is created.
21-09-13 13:54:36.567 - INFO: Number of train images: 531,335, iters: 33,209
21-09-13 13:54:36.567 - INFO: Total epochs needed: 16 for iters 500,000
21-09-13 13:54:36.570 - INFO: Dataset [LQGTDataset_rcan - Set5] is created.
21-09-13 13:54:36.570 - INFO: Number of val images in [Set5]: 252
21-09-13 13:54:42.717 - INFO: Network G structure: RCAN, with parameters: 15,592,379
21-09-13 13:54:42.717 - INFO: RCAN(
  (sub_mean): MeanShift(3, 3, kernel_size=[1, 1], data_format=NCHW)
  (add_mean): MeanShift(3, 3, kernel_size=[1, 1], data_format=NCHW)
  (head): Sequential(
    (0): Conv2D(3, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
  )
  (body): Sequential(
    (0): ResidualGroup(
      (body): Sequential(
        (0): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (1): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (2): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (3): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (4): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (5): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (6): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (7): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (8): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (9): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (10): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (11): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (12): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (13): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (14): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (15): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (16): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (17): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (18): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (19): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (20): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
      )
    )
    (1): ResidualGroup(
      (body): Sequential(
        (0): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (1): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (2): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (3): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (4): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (5): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (6): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (7): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (8): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (9): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (10): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (11): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (12): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (13): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (14): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (15): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (16): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (17): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (18): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (19): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (20): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
      )
    )
    (2): ResidualGroup(
      (body): Sequential(
        (0): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (1): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (2): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (3): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (4): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (5): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (6): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (7): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (8): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (9): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (10): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (11): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (12): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (13): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (14): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (15): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (16): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (17): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (18): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (19): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (20): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
      )
    )
    (3): ResidualGroup(
      (body): Sequential(
        (0): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (1): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (2): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (3): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (4): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (5): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (6): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (7): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (8): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (9): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (10): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (11): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (12): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (13): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (14): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (15): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (16): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (17): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (18): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (19): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (20): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
      )
    )
    (4): ResidualGroup(
      (body): Sequential(
        (0): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (1): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (2): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (3): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (4): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (5): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (6): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (7): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (8): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (9): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (10): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (11): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (12): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (13): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (14): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (15): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (16): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (17): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (18): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (19): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (20): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
      )
    )
    (5): ResidualGroup(
      (body): Sequential(
        (0): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (1): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (2): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (3): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (4): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (5): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (6): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (7): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (8): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (9): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (10): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (11): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (12): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (13): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (14): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (15): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (16): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (17): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (18): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (19): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (20): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
      )
    )
    (6): ResidualGroup(
      (body): Sequential(
        (0): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (1): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (2): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (3): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (4): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (5): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (6): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (7): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (8): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (9): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (10): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (11): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (12): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (13): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (14): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (15): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (16): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (17): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (18): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (19): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (20): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
      )
    )
    (7): ResidualGroup(
      (body): Sequential(
        (0): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (1): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (2): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (3): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (4): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (5): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (6): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (7): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (8): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (9): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (10): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (11): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (12): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (13): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (14): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (15): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (16): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (17): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (18): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (19): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (20): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
      )
    )
    (8): ResidualGroup(
      (body): Sequential(
        (0): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (1): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (2): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (3): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (4): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (5): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (6): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (7): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (8): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (9): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (10): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (11): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (12): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (13): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (14): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (15): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (16): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (17): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (18): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (19): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (20): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
      )
    )
    (9): ResidualGroup(
      (body): Sequential(
        (0): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (1): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (2): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (3): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (4): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (5): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (6): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (7): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (8): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (9): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (10): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (11): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (12): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (13): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (14): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (15): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (16): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (17): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (18): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (19): RCAB(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2D(output_size=1)
              (conv_du): Sequential(
                (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                (1): ReLU()
                (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                (3): Sigmoid()
              )
            )
          )
        )
        (20): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
      )
    )
    (10): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2D(64, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
      (1): PixelShuffle(upscale_factor=2)
      (2): Conv2D(64, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
      (3): PixelShuffle(upscale_factor=2)
    )
    (1): Conv2D(64, 3, kernel_size=[3, 3], padding=1, data_format=NCHW)
  )
)
21-09-13 13:54:42.758 - INFO: Loading model for G [E:\paddle_paper\ClassSR_paddle-develop\experiments\RCAN_branch3\models\365000_G.pth] ...
21-09-13 13:54:43.351 - INFO: Model [SRModel] is created.
21-09-13 13:54:43.351 - INFO: Resuming training from epoch: 6, iter: 365000.
21-09-13 13:54:43.352 - INFO: Start training from epoch: 6, iter: 365000
21-09-13 13:56:33.121 - INFO: [epoch:  6, iter: 365,100, lr:(3.390e-05,)] l_pix: 1.0942e+01 
21-09-13 13:58:17.785 - INFO: [epoch:  6, iter: 365,200, lr:(3.386e-05,)] l_pix: 1.0648e+01 
21-09-13 14:00:02.612 - INFO: [epoch:  6, iter: 365,300, lr:(3.381e-05,)] l_pix: 1.2958e+01 
21-09-13 14:01:47.398 - INFO: [epoch:  6, iter: 365,400, lr:(3.376e-05,)] l_pix: 1.1737e+01 
21-09-13 14:03:32.331 - INFO: [epoch:  6, iter: 365,500, lr:(3.372e-05,)] l_pix: 1.0789e+01 
21-09-13 14:05:17.104 - INFO: [epoch:  6, iter: 365,600, lr:(3.367e-05,)] l_pix: 1.1178e+01 
21-09-13 14:07:01.078 - INFO: [epoch:  6, iter: 365,700, lr:(3.362e-05,)] l_pix: 1.1261e+01 
21-09-13 14:08:43.732 - INFO: [epoch:  6, iter: 365,800, lr:(3.358e-05,)] l_pix: 1.0554e+01 
21-09-13 14:10:25.175 - INFO: [epoch:  6, iter: 365,900, lr:(3.353e-05,)] l_pix: 1.3074e+01 
21-09-13 14:12:06.785 - INFO: [epoch:  6, iter: 366,000, lr:(3.348e-05,)] l_pix: 1.2535e+01 
21-09-13 14:13:48.073 - INFO: [epoch:  6, iter: 366,100, lr:(3.343e-05,)] l_pix: 1.0343e+01 
21-09-13 14:15:29.398 - INFO: [epoch:  6, iter: 366,200, lr:(3.339e-05,)] l_pix: 1.1799e+01 
21-09-13 14:17:11.127 - INFO: [epoch:  6, iter: 366,300, lr:(3.334e-05,)] l_pix: 1.1409e+01 
21-09-13 14:18:53.251 - INFO: [epoch:  6, iter: 366,400, lr:(3.329e-05,)] l_pix: 1.0996e+01 
21-09-13 14:20:34.821 - INFO: [epoch:  6, iter: 366,500, lr:(3.325e-05,)] l_pix: 1.2389e+01 
21-09-13 14:22:16.417 - INFO: [epoch:  6, iter: 366,600, lr:(3.320e-05,)] l_pix: 1.1598e+01 
21-09-13 14:23:58.291 - INFO: [epoch:  6, iter: 366,700, lr:(3.315e-05,)] l_pix: 1.2604e+01 
21-09-13 14:25:39.693 - INFO: [epoch:  6, iter: 366,800, lr:(3.311e-05,)] l_pix: 1.2339e+01 
21-09-13 14:27:21.063 - INFO: [epoch:  6, iter: 366,900, lr:(3.306e-05,)] l_pix: 1.0958e+01 
21-09-13 14:29:02.505 - INFO: [epoch:  6, iter: 367,000, lr:(3.301e-05,)] l_pix: 1.2360e+01 
21-09-13 14:30:43.892 - INFO: [epoch:  6, iter: 367,100, lr:(3.297e-05,)] l_pix: 1.1541e+01 
21-09-13 14:32:25.360 - INFO: [epoch:  6, iter: 367,200, lr:(3.292e-05,)] l_pix: 1.0331e+01 
21-09-13 14:34:07.333 - INFO: [epoch:  6, iter: 367,300, lr:(3.287e-05,)] l_pix: 1.0023e+01 
21-09-13 14:35:49.196 - INFO: [epoch:  6, iter: 367,400, lr:(3.283e-05,)] l_pix: 1.2862e+01 
21-09-13 14:37:30.671 - INFO: [epoch:  6, iter: 367,500, lr:(3.278e-05,)] l_pix: 8.4853e+00 
21-09-13 14:39:12.236 - INFO: [epoch:  6, iter: 367,600, lr:(3.274e-05,)] l_pix: 1.2714e+01 
21-09-13 14:40:53.613 - INFO: [epoch:  6, iter: 367,700, lr:(3.269e-05,)] l_pix: 1.1288e+01 
21-09-13 14:42:35.232 - INFO: [epoch:  6, iter: 367,800, lr:(3.264e-05,)] l_pix: 1.1295e+01 
21-09-13 14:44:16.828 - INFO: [epoch:  6, iter: 367,900, lr:(3.260e-05,)] l_pix: 1.0803e+01 
21-09-13 14:45:58.326 - INFO: [epoch:  6, iter: 368,000, lr:(3.255e-05,)] l_pix: 1.1998e+01 
21-09-13 14:47:39.528 - INFO: [epoch:  6, iter: 368,100, lr:(3.250e-05,)] l_pix: 1.3166e+01 
21-09-13 14:49:20.796 - INFO: [epoch:  6, iter: 368,200, lr:(3.246e-05,)] l_pix: 1.1643e+01 
21-09-13 14:51:02.404 - INFO: [epoch:  6, iter: 368,300, lr:(3.241e-05,)] l_pix: 1.1122e+01 
21-09-13 14:52:44.072 - INFO: [epoch:  6, iter: 368,400, lr:(3.236e-05,)] l_pix: 1.1477e+01 
21-09-13 14:54:26.132 - INFO: [epoch:  6, iter: 368,500, lr:(3.232e-05,)] l_pix: 1.1188e+01 
21-09-13 14:56:07.469 - INFO: [epoch:  6, iter: 368,600, lr:(3.227e-05,)] l_pix: 1.0045e+01 
21-09-13 14:57:48.885 - INFO: [epoch:  6, iter: 368,700, lr:(3.223e-05,)] l_pix: 1.1232e+01 
21-09-13 14:59:30.069 - INFO: [epoch:  6, iter: 368,800, lr:(3.218e-05,)] l_pix: 1.1016e+01 
21-09-13 15:01:11.363 - INFO: [epoch:  6, iter: 368,900, lr:(3.213e-05,)] l_pix: 1.0889e+01 
21-09-13 15:02:52.453 - INFO: [epoch:  6, iter: 369,000, lr:(3.209e-05,)] l_pix: 9.9542e+00 
21-09-13 15:04:33.499 - INFO: [epoch:  6, iter: 369,100, lr:(3.204e-05,)] l_pix: 1.1033e+01 
21-09-13 15:06:14.807 - INFO: [epoch:  6, iter: 369,200, lr:(3.200e-05,)] l_pix: 1.1655e+01 
21-09-13 15:07:56.484 - INFO: [epoch:  6, iter: 369,300, lr:(3.195e-05,)] l_pix: 9.5860e+00 
21-09-13 15:09:38.148 - INFO: [epoch:  6, iter: 369,400, lr:(3.190e-05,)] l_pix: 1.0398e+01 
21-09-13 15:11:19.541 - INFO: [epoch:  6, iter: 369,500, lr:(3.186e-05,)] l_pix: 9.9061e+00 
21-09-13 15:13:01.178 - INFO: [epoch:  6, iter: 369,600, lr:(3.181e-05,)] l_pix: 1.1910e+01 
21-09-13 15:14:42.917 - INFO: [epoch:  6, iter: 369,700, lr:(3.177e-05,)] l_pix: 9.2628e+00 
21-09-13 15:16:24.742 - INFO: [epoch:  6, iter: 369,800, lr:(3.172e-05,)] l_pix: 1.0841e+01 
21-09-13 15:18:06.835 - INFO: [epoch:  6, iter: 369,900, lr:(3.167e-05,)] l_pix: 1.1329e+01 
21-09-13 15:19:48.375 - INFO: [epoch:  6, iter: 370,000, lr:(3.163e-05,)] l_pix: 1.0747e+01 
21-09-13 15:21:50.251 - INFO: # Validation # PSNR: 2.8887e+01
21-09-13 15:21:50.252 - INFO: Saving models and training states.
21-09-13 15:23:33.518 - INFO: [epoch:  6, iter: 370,100, lr:(3.158e-05,)] l_pix: 1.0634e+01 
21-09-13 15:25:15.964 - INFO: [epoch:  6, iter: 370,200, lr:(3.154e-05,)] l_pix: 1.1964e+01 
21-09-13 15:26:58.667 - INFO: [epoch:  6, iter: 370,300, lr:(3.149e-05,)] l_pix: 9.3539e+00 
21-09-13 15:28:40.844 - INFO: [epoch:  6, iter: 370,400, lr:(3.145e-05,)] l_pix: 9.4208e+00 
21-09-13 15:30:22.980 - INFO: [epoch:  6, iter: 370,500, lr:(3.140e-05,)] l_pix: 1.1395e+01 
21-09-13 15:32:04.855 - INFO: [epoch:  6, iter: 370,600, lr:(3.135e-05,)] l_pix: 1.0394e+01 
21-09-13 15:33:46.457 - INFO: [epoch:  6, iter: 370,700, lr:(3.131e-05,)] l_pix: 1.1031e+01 
21-09-13 15:35:27.891 - INFO: [epoch:  6, iter: 370,800, lr:(3.126e-05,)] l_pix: 1.1570e+01 
21-09-13 15:37:09.207 - INFO: [epoch:  6, iter: 370,900, lr:(3.122e-05,)] l_pix: 1.2342e+01 
21-09-13 15:38:50.557 - INFO: [epoch:  6, iter: 371,000, lr:(3.117e-05,)] l_pix: 1.1330e+01 
21-09-13 15:40:32.240 - INFO: [epoch:  6, iter: 371,100, lr:(3.113e-05,)] l_pix: 1.2513e+01 
21-09-13 15:42:13.624 - INFO: [epoch:  6, iter: 371,200, lr:(3.108e-05,)] l_pix: 1.2494e+01 
21-09-13 15:43:55.181 - INFO: [epoch:  6, iter: 371,300, lr:(3.104e-05,)] l_pix: 1.5341e+01 
21-09-13 15:45:36.905 - INFO: [epoch:  6, iter: 371,400, lr:(3.099e-05,)] l_pix: 1.1873e+01 
21-09-13 15:47:18.506 - INFO: [epoch:  6, iter: 371,500, lr:(3.095e-05,)] l_pix: 9.3006e+00 
21-09-13 15:49:00.137 - INFO: [epoch:  6, iter: 371,600, lr:(3.090e-05,)] l_pix: 1.1085e+01 
21-09-13 15:50:41.516 - INFO: [epoch:  6, iter: 371,700, lr:(3.085e-05,)] l_pix: 1.1395e+01 
21-09-13 15:52:23.072 - INFO: [epoch:  6, iter: 371,800, lr:(3.081e-05,)] l_pix: 1.0878e+01 
21-09-13 15:54:04.165 - INFO: [epoch:  6, iter: 371,900, lr:(3.076e-05,)] l_pix: 1.2734e+01 
21-09-13 15:55:45.474 - INFO: [epoch:  6, iter: 372,000, lr:(3.072e-05,)] l_pix: 9.9436e+00 
21-09-13 15:57:26.949 - INFO: [epoch:  6, iter: 372,100, lr:(3.067e-05,)] l_pix: 1.0597e+01 
21-09-13 15:59:08.858 - INFO: [epoch:  6, iter: 372,200, lr:(3.063e-05,)] l_pix: 1.2357e+01 
21-09-13 16:00:50.486 - INFO: [epoch:  6, iter: 372,300, lr:(3.058e-05,)] l_pix: 1.1490e+01 
21-09-13 16:02:32.185 - INFO: [epoch:  6, iter: 372,400, lr:(3.054e-05,)] l_pix: 9.7111e+00 
21-09-13 16:04:13.809 - INFO: [epoch:  6, iter: 372,500, lr:(3.049e-05,)] l_pix: 1.3315e+01 
21-09-13 16:05:54.995 - INFO: [epoch:  6, iter: 372,600, lr:(3.045e-05,)] l_pix: 1.0418e+01 
21-09-13 16:07:36.416 - INFO: [epoch:  6, iter: 372,700, lr:(3.040e-05,)] l_pix: 9.6170e+00 
21-09-13 16:09:17.995 - INFO: [epoch:  6, iter: 372,800, lr:(3.036e-05,)] l_pix: 1.2532e+01 
21-09-13 16:10:59.206 - INFO: [epoch:  6, iter: 372,900, lr:(3.031e-05,)] l_pix: 1.2603e+01 
21-09-13 16:12:40.624 - INFO: [epoch:  6, iter: 373,000, lr:(3.027e-05,)] l_pix: 1.1442e+01 
21-09-13 16:14:22.186 - INFO: [epoch:  6, iter: 373,100, lr:(3.022e-05,)] l_pix: 1.2304e+01 
21-09-13 16:16:04.106 - INFO: [epoch:  6, iter: 373,200, lr:(3.018e-05,)] l_pix: 1.1848e+01 
21-09-13 16:17:45.935 - INFO: [epoch:  6, iter: 373,300, lr:(3.013e-05,)] l_pix: 1.1768e+01 
21-09-13 16:19:28.237 - INFO: [epoch:  6, iter: 373,400, lr:(3.009e-05,)] l_pix: 1.2254e+01 
21-09-13 16:21:09.935 - INFO: [epoch:  6, iter: 373,500, lr:(3.004e-05,)] l_pix: 9.7779e+00 
21-09-13 16:22:51.484 - INFO: [epoch:  6, iter: 373,600, lr:(3.000e-05,)] l_pix: 1.1543e+01 
21-09-13 16:24:32.584 - INFO: [epoch:  6, iter: 373,700, lr:(2.995e-05,)] l_pix: 1.2853e+01 
21-09-13 16:26:13.444 - INFO: [epoch:  6, iter: 373,800, lr:(2.991e-05,)] l_pix: 9.7269e+00 
21-09-13 16:27:54.733 - INFO: [epoch:  6, iter: 373,900, lr:(2.986e-05,)] l_pix: 1.2330e+01 
21-09-13 16:29:36.955 - INFO: [epoch:  6, iter: 374,000, lr:(2.982e-05,)] l_pix: 1.0234e+01 
21-09-13 16:31:18.994 - INFO: [epoch:  6, iter: 374,100, lr:(2.978e-05,)] l_pix: 1.0362e+01 
21-09-13 16:33:00.953 - INFO: [epoch:  6, iter: 374,200, lr:(2.973e-05,)] l_pix: 1.1784e+01 
21-09-13 16:34:42.564 - INFO: [epoch:  6, iter: 374,300, lr:(2.969e-05,)] l_pix: 1.0346e+01 
21-09-13 16:36:24.380 - INFO: [epoch:  6, iter: 374,400, lr:(2.964e-05,)] l_pix: 1.1858e+01 
21-09-13 16:38:05.463 - INFO: [epoch:  6, iter: 374,500, lr:(2.960e-05,)] l_pix: 9.8942e+00 
21-09-13 16:39:47.171 - INFO: [epoch:  6, iter: 374,600, lr:(2.955e-05,)] l_pix: 1.0044e+01 
21-09-13 16:41:28.848 - INFO: [epoch:  6, iter: 374,700, lr:(2.951e-05,)] l_pix: 9.7434e+00 
21-09-13 16:43:10.193 - INFO: [epoch:  6, iter: 374,800, lr:(2.946e-05,)] l_pix: 1.0135e+01 
21-09-13 16:44:52.074 - INFO: [epoch:  6, iter: 374,900, lr:(2.942e-05,)] l_pix: 1.2308e+01 
21-09-13 16:46:34.136 - INFO: [epoch:  6, iter: 375,000, lr:(2.937e-05,)] l_pix: 1.1445e+01 
21-09-13 16:48:36.943 - INFO: # Validation # PSNR: 2.8858e+01
21-09-13 16:48:36.943 - INFO: Saving models and training states.
21-09-13 16:50:19.525 - INFO: [epoch:  6, iter: 375,100, lr:(2.933e-05,)] l_pix: 1.1930e+01 
21-09-13 16:52:01.203 - INFO: [epoch:  6, iter: 375,200, lr:(2.929e-05,)] l_pix: 1.1182e+01 
21-09-13 16:53:42.764 - INFO: [epoch:  6, iter: 375,300, lr:(2.924e-05,)] l_pix: 1.2067e+01 
21-09-13 16:55:24.301 - INFO: [epoch:  6, iter: 375,400, lr:(2.920e-05,)] l_pix: 1.1421e+01 
21-09-13 16:57:05.831 - INFO: [epoch:  6, iter: 375,500, lr:(2.915e-05,)] l_pix: 9.6383e+00 
21-09-13 16:58:47.202 - INFO: [epoch:  6, iter: 375,600, lr:(2.911e-05,)] l_pix: 1.1944e+01 
21-09-13 17:00:28.370 - INFO: [epoch:  6, iter: 375,700, lr:(2.906e-05,)] l_pix: 1.1170e+01 
21-09-13 17:02:09.810 - INFO: [epoch:  6, iter: 375,800, lr:(2.902e-05,)] l_pix: 1.0445e+01 
21-09-13 17:03:51.548 - INFO: [epoch:  6, iter: 375,900, lr:(2.898e-05,)] l_pix: 1.1007e+01 
21-09-13 17:05:33.594 - INFO: [epoch:  6, iter: 376,000, lr:(2.893e-05,)] l_pix: 1.1176e+01 
21-09-13 17:07:15.906 - INFO: [epoch:  6, iter: 376,100, lr:(2.889e-05,)] l_pix: 9.8541e+00 
21-09-13 17:08:58.186 - INFO: [epoch:  6, iter: 376,200, lr:(2.884e-05,)] l_pix: 1.3306e+01 
21-09-13 17:10:39.406 - INFO: [epoch:  6, iter: 376,300, lr:(2.880e-05,)] l_pix: 1.2580e+01 
21-09-13 17:12:20.719 - INFO: [epoch:  6, iter: 376,400, lr:(2.876e-05,)] l_pix: 1.0656e+01 
21-09-13 17:14:02.088 - INFO: [epoch:  6, iter: 376,500, lr:(2.871e-05,)] l_pix: 1.0892e+01 
21-09-13 17:15:43.278 - INFO: [epoch:  6, iter: 376,600, lr:(2.867e-05,)] l_pix: 1.1269e+01 
21-09-13 17:17:24.513 - INFO: [epoch:  6, iter: 376,700, lr:(2.862e-05,)] l_pix: 1.1726e+01 
21-09-13 17:19:06.191 - INFO: [epoch:  6, iter: 376,800, lr:(2.858e-05,)] l_pix: 1.1151e+01 
21-09-13 17:20:47.829 - INFO: [epoch:  6, iter: 376,900, lr:(2.854e-05,)] l_pix: 1.1057e+01 
21-09-13 17:22:29.264 - INFO: [epoch:  6, iter: 377,000, lr:(2.849e-05,)] l_pix: 1.1782e+01 
21-09-13 17:24:10.549 - INFO: [epoch:  6, iter: 377,100, lr:(2.845e-05,)] l_pix: 1.3379e+01 
21-09-13 17:25:52.094 - INFO: [epoch:  6, iter: 377,200, lr:(2.840e-05,)] l_pix: 1.0867e+01 
21-09-13 17:27:33.679 - INFO: [epoch:  6, iter: 377,300, lr:(2.836e-05,)] l_pix: 1.0739e+01 
21-09-13 17:29:15.223 - INFO: [epoch:  6, iter: 377,400, lr:(2.832e-05,)] l_pix: 1.2211e+01 
21-09-13 17:30:56.653 - INFO: [epoch:  6, iter: 377,500, lr:(2.827e-05,)] l_pix: 1.2816e+01 
21-09-13 17:32:37.871 - INFO: [epoch:  6, iter: 377,600, lr:(2.823e-05,)] l_pix: 9.8064e+00 
21-09-13 17:34:19.630 - INFO: [epoch:  6, iter: 377,700, lr:(2.819e-05,)] l_pix: 1.0509e+01 
21-09-13 17:36:01.354 - INFO: [epoch:  6, iter: 377,800, lr:(2.814e-05,)] l_pix: 1.1819e+01 
21-09-13 17:37:43.175 - INFO: [epoch:  6, iter: 377,900, lr:(2.810e-05,)] l_pix: 1.1127e+01 
21-09-13 17:39:25.189 - INFO: [epoch:  6, iter: 378,000, lr:(2.805e-05,)] l_pix: 1.0394e+01 
21-09-13 17:41:07.460 - INFO: [epoch:  6, iter: 378,100, lr:(2.801e-05,)] l_pix: 1.2770e+01 
21-09-13 17:42:49.544 - INFO: [epoch:  6, iter: 378,200, lr:(2.797e-05,)] l_pix: 1.0786e+01 
21-09-13 17:44:31.779 - INFO: [epoch:  6, iter: 378,300, lr:(2.792e-05,)] l_pix: 1.1404e+01 
21-09-13 17:46:13.635 - INFO: [epoch:  6, iter: 378,400, lr:(2.788e-05,)] l_pix: 1.2117e+01 
21-09-13 17:47:55.227 - INFO: [epoch:  6, iter: 378,500, lr:(2.784e-05,)] l_pix: 9.8915e+00 
21-09-13 17:49:36.849 - INFO: [epoch:  6, iter: 378,600, lr:(2.779e-05,)] l_pix: 1.1270e+01 
21-09-13 17:51:19.709 - INFO: [epoch:  6, iter: 378,700, lr:(2.775e-05,)] l_pix: 1.0854e+01 
21-09-13 17:53:02.616 - INFO: [epoch:  6, iter: 378,800, lr:(2.771e-05,)] l_pix: 1.1512e+01 
21-09-13 17:54:45.258 - INFO: [epoch:  6, iter: 378,900, lr:(2.766e-05,)] l_pix: 9.9479e+00 
21-09-13 17:56:27.403 - INFO: [epoch:  6, iter: 379,000, lr:(2.762e-05,)] l_pix: 1.0509e+01 
21-09-13 17:58:09.708 - INFO: [epoch:  6, iter: 379,100, lr:(2.758e-05,)] l_pix: 1.0597e+01 
21-09-13 17:59:51.026 - INFO: [epoch:  6, iter: 379,200, lr:(2.753e-05,)] l_pix: 1.1264e+01 
21-09-13 18:01:32.377 - INFO: [epoch:  6, iter: 379,300, lr:(2.749e-05,)] l_pix: 1.2282e+01 
21-09-13 18:03:14.396 - INFO: [epoch:  6, iter: 379,400, lr:(2.745e-05,)] l_pix: 1.2488e+01 
21-09-13 18:04:56.220 - INFO: [epoch:  6, iter: 379,500, lr:(2.740e-05,)] l_pix: 1.1635e+01 
21-09-13 18:06:37.719 - INFO: [epoch:  6, iter: 379,600, lr:(2.736e-05,)] l_pix: 1.1588e+01 
21-09-13 18:08:20.159 - INFO: [epoch:  6, iter: 379,700, lr:(2.732e-05,)] l_pix: 1.1377e+01 
21-09-13 18:10:03.060 - INFO: [epoch:  6, iter: 379,800, lr:(2.728e-05,)] l_pix: 9.3564e+00 
21-09-13 18:11:46.005 - INFO: [epoch:  6, iter: 379,900, lr:(2.723e-05,)] l_pix: 1.2604e+01 
21-09-13 18:13:28.095 - INFO: [epoch:  6, iter: 380,000, lr:(2.719e-05,)] l_pix: 1.3328e+01 
21-09-13 18:15:30.823 - INFO: # Validation # PSNR: 2.8897e+01
21-09-13 18:15:30.823 - INFO: Saving models and training states.
21-09-13 18:17:13.195 - INFO: [epoch:  6, iter: 380,100, lr:(2.715e-05,)] l_pix: 1.1193e+01 
21-09-13 18:18:54.685 - INFO: [epoch:  6, iter: 380,200, lr:(2.710e-05,)] l_pix: 1.0828e+01 
21-09-13 18:20:36.207 - INFO: [epoch:  6, iter: 380,300, lr:(2.706e-05,)] l_pix: 9.7586e+00 
21-09-13 18:22:17.284 - INFO: [epoch:  6, iter: 380,400, lr:(2.702e-05,)] l_pix: 9.1831e+00 
21-09-13 18:23:59.027 - INFO: [epoch:  6, iter: 380,500, lr:(2.697e-05,)] l_pix: 1.1768e+01 
21-09-13 18:25:41.918 - INFO: [epoch:  6, iter: 380,600, lr:(2.693e-05,)] l_pix: 1.2826e+01 
21-09-13 18:27:24.333 - INFO: [epoch:  6, iter: 380,700, lr:(2.689e-05,)] l_pix: 1.0849e+01 
21-09-13 18:29:06.158 - INFO: [epoch:  6, iter: 380,800, lr:(2.685e-05,)] l_pix: 1.1705e+01 
21-09-13 18:30:48.403 - INFO: [epoch:  6, iter: 380,900, lr:(2.680e-05,)] l_pix: 1.1639e+01 
21-09-13 18:32:30.216 - INFO: [epoch:  6, iter: 381,000, lr:(2.676e-05,)] l_pix: 1.2224e+01 
21-09-13 18:34:11.739 - INFO: [epoch:  6, iter: 381,100, lr:(2.672e-05,)] l_pix: 1.2811e+01 
21-09-13 18:35:52.894 - INFO: [epoch:  6, iter: 381,200, lr:(2.668e-05,)] l_pix: 1.0439e+01 
21-09-13 18:37:34.343 - INFO: [epoch:  6, iter: 381,300, lr:(2.663e-05,)] l_pix: 1.1454e+01 
21-09-13 18:39:15.531 - INFO: [epoch:  6, iter: 381,400, lr:(2.659e-05,)] l_pix: 1.2793e+01 
21-09-13 18:40:56.950 - INFO: [epoch:  6, iter: 381,500, lr:(2.655e-05,)] l_pix: 9.8670e+00 
21-09-13 18:42:38.467 - INFO: [epoch:  6, iter: 381,600, lr:(2.651e-05,)] l_pix: 1.1309e+01 
21-09-13 18:44:19.980 - INFO: [epoch:  6, iter: 381,700, lr:(2.646e-05,)] l_pix: 1.0440e+01 
21-09-13 18:46:01.780 - INFO: [epoch:  6, iter: 381,800, lr:(2.642e-05,)] l_pix: 1.1957e+01 
21-09-13 18:47:43.324 - INFO: [epoch:  6, iter: 381,900, lr:(2.638e-05,)] l_pix: 1.1450e+01 
21-09-13 18:49:26.205 - INFO: [epoch:  6, iter: 382,000, lr:(2.634e-05,)] l_pix: 1.0849e+01 
21-09-13 18:51:07.428 - INFO: [epoch:  6, iter: 382,100, lr:(2.629e-05,)] l_pix: 1.1000e+01 
21-09-13 18:52:49.445 - INFO: [epoch:  6, iter: 382,200, lr:(2.625e-05,)] l_pix: 8.9590e+00 
21-09-13 18:54:31.746 - INFO: [epoch:  6, iter: 382,300, lr:(2.621e-05,)] l_pix: 1.1257e+01 
21-09-13 18:56:15.507 - INFO: [epoch:  6, iter: 382,400, lr:(2.617e-05,)] l_pix: 9.9805e+00 
21-09-13 18:57:59.558 - INFO: [epoch:  6, iter: 382,500, lr:(2.612e-05,)] l_pix: 9.6925e+00 
21-09-13 18:59:43.941 - INFO: [epoch:  6, iter: 382,600, lr:(2.608e-05,)] l_pix: 1.1744e+01 
21-09-13 19:01:28.208 - INFO: [epoch:  6, iter: 382,700, lr:(2.604e-05,)] l_pix: 1.1479e+01 
21-09-13 19:03:12.343 - INFO: [epoch:  6, iter: 382,800, lr:(2.600e-05,)] l_pix: 1.2971e+01 
21-09-13 19:04:56.591 - INFO: [epoch:  6, iter: 382,900, lr:(2.595e-05,)] l_pix: 1.0394e+01 
21-09-13 19:06:40.306 - INFO: [epoch:  6, iter: 383,000, lr:(2.591e-05,)] l_pix: 1.1148e+01 
21-09-13 19:08:24.146 - INFO: [epoch:  6, iter: 383,100, lr:(2.587e-05,)] l_pix: 1.0757e+01 
21-09-13 19:10:07.810 - INFO: [epoch:  6, iter: 383,200, lr:(2.583e-05,)] l_pix: 1.1135e+01 
21-09-13 19:11:51.274 - INFO: [epoch:  6, iter: 383,300, lr:(2.579e-05,)] l_pix: 1.1218e+01 
21-09-13 19:13:35.887 - INFO: [epoch:  6, iter: 383,400, lr:(2.574e-05,)] l_pix: 1.0234e+01 
21-09-13 19:15:20.041 - INFO: [epoch:  6, iter: 383,500, lr:(2.570e-05,)] l_pix: 1.0683e+01 
21-09-13 19:17:05.218 - INFO: [epoch:  6, iter: 383,600, lr:(2.566e-05,)] l_pix: 1.1029e+01 
21-09-13 19:18:49.916 - INFO: [epoch:  6, iter: 383,700, lr:(2.562e-05,)] l_pix: 1.0156e+01 
21-09-13 19:20:34.139 - INFO: [epoch:  6, iter: 383,800, lr:(2.558e-05,)] l_pix: 9.6859e+00 
21-09-13 19:22:18.747 - INFO: [epoch:  6, iter: 383,900, lr:(2.553e-05,)] l_pix: 1.1952e+01 
21-09-13 19:24:02.933 - INFO: [epoch:  6, iter: 384,000, lr:(2.549e-05,)] l_pix: 1.1479e+01 
21-09-13 19:25:46.705 - INFO: [epoch:  6, iter: 384,100, lr:(2.545e-05,)] l_pix: 1.0880e+01 
21-09-13 19:27:30.543 - INFO: [epoch:  6, iter: 384,200, lr:(2.541e-05,)] l_pix: 1.1417e+01 
21-09-13 19:29:15.302 - INFO: [epoch:  6, iter: 384,300, lr:(2.537e-05,)] l_pix: 1.0777e+01 
21-09-13 19:30:59.685 - INFO: [epoch:  6, iter: 384,400, lr:(2.533e-05,)] l_pix: 1.1177e+01 
21-09-13 19:32:43.721 - INFO: [epoch:  6, iter: 384,500, lr:(2.528e-05,)] l_pix: 1.1724e+01 
21-09-13 19:34:27.863 - INFO: [epoch:  6, iter: 384,600, lr:(2.524e-05,)] l_pix: 1.1048e+01 
21-09-13 19:36:13.219 - INFO: [epoch:  6, iter: 384,700, lr:(2.520e-05,)] l_pix: 1.3653e+01 
21-09-13 19:37:58.664 - INFO: [epoch:  6, iter: 384,800, lr:(2.516e-05,)] l_pix: 1.1181e+01 
21-09-13 19:39:44.064 - INFO: [epoch:  6, iter: 384,900, lr:(2.512e-05,)] l_pix: 1.2578e+01 
21-09-13 19:41:28.343 - INFO: [epoch:  6, iter: 385,000, lr:(2.508e-05,)] l_pix: 1.4080e+01 
21-09-13 19:43:33.616 - INFO: # Validation # PSNR: 2.8909e+01
21-09-13 19:43:33.616 - INFO: Saving models and training states.
21-09-13 19:45:18.177 - INFO: [epoch:  6, iter: 385,100, lr:(2.503e-05,)] l_pix: 1.1810e+01 
21-09-13 19:47:02.406 - INFO: [epoch:  6, iter: 385,200, lr:(2.499e-05,)] l_pix: 1.1231e+01 
21-09-13 19:48:46.404 - INFO: [epoch:  6, iter: 385,300, lr:(2.495e-05,)] l_pix: 1.0617e+01 
21-09-13 19:50:30.850 - INFO: [epoch:  6, iter: 385,400, lr:(2.491e-05,)] l_pix: 1.1826e+01 
21-09-13 19:52:15.423 - INFO: [epoch:  6, iter: 385,500, lr:(2.487e-05,)] l_pix: 1.0547e+01 
21-09-13 19:53:59.928 - INFO: [epoch:  6, iter: 385,600, lr:(2.483e-05,)] l_pix: 1.1677e+01 
21-09-13 19:55:44.307 - INFO: [epoch:  6, iter: 385,700, lr:(2.479e-05,)] l_pix: 1.2267e+01 
21-09-13 19:57:27.074 - INFO: [epoch:  6, iter: 385,800, lr:(2.474e-05,)] l_pix: 1.0781e+01 
21-09-13 19:59:09.429 - INFO: [epoch:  6, iter: 385,900, lr:(2.470e-05,)] l_pix: 1.0343e+01 
21-09-13 20:00:51.756 - INFO: [epoch:  6, iter: 386,000, lr:(2.466e-05,)] l_pix: 1.2585e+01 
21-09-13 20:02:33.688 - INFO: [epoch:  6, iter: 386,100, lr:(2.462e-05,)] l_pix: 9.2956e+00 
21-09-13 20:04:15.134 - INFO: [epoch:  6, iter: 386,200, lr:(2.458e-05,)] l_pix: 1.1744e+01 
21-09-13 20:05:56.246 - INFO: [epoch:  6, iter: 386,300, lr:(2.454e-05,)] l_pix: 1.2931e+01 
21-09-13 20:07:37.612 - INFO: [epoch:  6, iter: 386,400, lr:(2.450e-05,)] l_pix: 8.8691e+00 
21-09-13 20:09:19.371 - INFO: [epoch:  6, iter: 386,500, lr:(2.446e-05,)] l_pix: 1.0286e+01 
21-09-13 20:11:00.566 - INFO: [epoch:  6, iter: 386,600, lr:(2.442e-05,)] l_pix: 1.2226e+01 
21-09-13 20:12:42.038 - INFO: [epoch:  6, iter: 386,700, lr:(2.437e-05,)] l_pix: 1.0903e+01 
21-09-13 20:14:24.027 - INFO: [epoch:  6, iter: 386,800, lr:(2.433e-05,)] l_pix: 1.1358e+01 
21-09-13 20:16:06.507 - INFO: [epoch:  6, iter: 386,900, lr:(2.429e-05,)] l_pix: 1.1024e+01 
21-09-13 20:17:49.381 - INFO: [epoch:  6, iter: 387,000, lr:(2.425e-05,)] l_pix: 1.0213e+01 
21-09-13 20:19:32.399 - INFO: [epoch:  6, iter: 387,100, lr:(2.421e-05,)] l_pix: 1.0112e+01 
21-09-13 20:21:14.768 - INFO: [epoch:  6, iter: 387,200, lr:(2.417e-05,)] l_pix: 1.1288e+01 
21-09-13 20:22:56.645 - INFO: [epoch:  6, iter: 387,300, lr:(2.413e-05,)] l_pix: 1.3161e+01 
21-09-13 20:24:38.047 - INFO: [epoch:  6, iter: 387,400, lr:(2.409e-05,)] l_pix: 1.1144e+01 
21-09-13 20:26:19.826 - INFO: [epoch:  6, iter: 387,500, lr:(2.405e-05,)] l_pix: 9.7270e+00 
21-09-13 20:28:01.312 - INFO: [epoch:  6, iter: 387,600, lr:(2.401e-05,)] l_pix: 1.0001e+01 
21-09-13 20:29:42.543 - INFO: [epoch:  6, iter: 387,700, lr:(2.397e-05,)] l_pix: 1.1318e+01 
21-09-13 20:31:24.056 - INFO: [epoch:  6, iter: 387,800, lr:(2.392e-05,)] l_pix: 1.1198e+01 
21-09-13 20:33:06.509 - INFO: [epoch:  6, iter: 387,900, lr:(2.388e-05,)] l_pix: 1.0433e+01 
21-09-13 20:34:49.286 - INFO: [epoch:  6, iter: 388,000, lr:(2.384e-05,)] l_pix: 1.1602e+01 
21-09-13 20:36:31.673 - INFO: [epoch:  6, iter: 388,100, lr:(2.380e-05,)] l_pix: 1.1394e+01 
21-09-13 20:38:14.073 - INFO: [epoch:  6, iter: 388,200, lr:(2.376e-05,)] l_pix: 1.1424e+01 
21-09-13 20:39:56.771 - INFO: [epoch:  6, iter: 388,300, lr:(2.372e-05,)] l_pix: 1.1339e+01 
21-09-13 20:41:39.351 - INFO: [epoch:  6, iter: 388,400, lr:(2.368e-05,)] l_pix: 1.1490e+01 
21-09-13 20:43:21.374 - INFO: [epoch:  6, iter: 388,500, lr:(2.364e-05,)] l_pix: 1.0682e+01 
21-09-13 20:45:03.066 - INFO: [epoch:  6, iter: 388,600, lr:(2.360e-05,)] l_pix: 1.0225e+01 
21-09-13 20:46:44.706 - INFO: [epoch:  6, iter: 388,700, lr:(2.356e-05,)] l_pix: 1.2124e+01 
21-09-13 20:48:26.043 - INFO: [epoch:  6, iter: 388,800, lr:(2.352e-05,)] l_pix: 1.0262e+01 
21-09-13 20:50:07.593 - INFO: [epoch:  6, iter: 388,900, lr:(2.348e-05,)] l_pix: 1.0308e+01 
21-09-13 20:51:49.830 - INFO: [epoch:  6, iter: 389,000, lr:(2.344e-05,)] l_pix: 9.7834e+00 
21-09-13 20:53:31.535 - INFO: [epoch:  6, iter: 389,100, lr:(2.340e-05,)] l_pix: 1.1827e+01 
21-09-13 20:55:12.996 - INFO: [epoch:  6, iter: 389,200, lr:(2.336e-05,)] l_pix: 1.1236e+01 
21-09-13 20:56:54.893 - INFO: [epoch:  6, iter: 389,300, lr:(2.332e-05,)] l_pix: 1.1145e+01 
21-09-13 20:58:37.125 - INFO: [epoch:  6, iter: 389,400, lr:(2.328e-05,)] l_pix: 1.1418e+01 
21-09-13 21:00:18.868 - INFO: [epoch:  6, iter: 389,500, lr:(2.324e-05,)] l_pix: 1.1185e+01 
21-09-13 21:02:00.797 - INFO: [epoch:  6, iter: 389,600, lr:(2.320e-05,)] l_pix: 1.2292e+01 
21-09-13 21:03:43.156 - INFO: [epoch:  6, iter: 389,700, lr:(2.316e-05,)] l_pix: 1.3041e+01 
21-09-13 21:05:25.569 - INFO: [epoch:  6, iter: 389,800, lr:(2.312e-05,)] l_pix: 1.1104e+01 
21-09-13 21:07:07.520 - INFO: [epoch:  6, iter: 389,900, lr:(2.308e-05,)] l_pix: 1.1162e+01 
21-09-13 21:08:48.683 - INFO: [epoch:  6, iter: 390,000, lr:(2.304e-05,)] l_pix: 1.2073e+01 
21-09-13 21:10:51.264 - INFO: # Validation # PSNR: 2.8929e+01
21-09-13 21:10:51.264 - INFO: Saving models and training states.
21-09-13 21:12:33.882 - INFO: [epoch:  6, iter: 390,100, lr:(2.300e-05,)] l_pix: 1.3197e+01 
21-09-13 21:14:15.393 - INFO: [epoch:  6, iter: 390,200, lr:(2.296e-05,)] l_pix: 1.0233e+01 
21-09-13 21:15:57.228 - INFO: [epoch:  6, iter: 390,300, lr:(2.292e-05,)] l_pix: 1.0264e+01 
21-09-13 21:17:39.261 - INFO: [epoch:  6, iter: 390,400, lr:(2.288e-05,)] l_pix: 1.0558e+01 
21-09-13 21:19:20.717 - INFO: [epoch:  6, iter: 390,500, lr:(2.284e-05,)] l_pix: 1.2766e+01 
21-09-13 21:21:02.179 - INFO: [epoch:  6, iter: 390,600, lr:(2.280e-05,)] l_pix: 1.3152e+01 
21-09-13 21:22:44.370 - INFO: [epoch:  6, iter: 390,700, lr:(2.276e-05,)] l_pix: 1.1256e+01 
21-09-13 21:24:26.425 - INFO: [epoch:  6, iter: 390,800, lr:(2.272e-05,)] l_pix: 1.0529e+01 
21-09-13 21:26:08.725 - INFO: [epoch:  6, iter: 390,900, lr:(2.268e-05,)] l_pix: 1.0677e+01 
21-09-13 21:27:50.592 - INFO: [epoch:  6, iter: 391,000, lr:(2.264e-05,)] l_pix: 1.0104e+01 
21-09-13 21:29:32.612 - INFO: [epoch:  6, iter: 391,100, lr:(2.260e-05,)] l_pix: 9.5148e+00 
21-09-13 21:31:15.063 - INFO: [epoch:  6, iter: 391,200, lr:(2.256e-05,)] l_pix: 1.0496e+01 
21-09-13 21:32:56.778 - INFO: [epoch:  6, iter: 391,300, lr:(2.252e-05,)] l_pix: 1.1581e+01 
21-09-13 21:34:38.207 - INFO: [epoch:  6, iter: 391,400, lr:(2.248e-05,)] l_pix: 1.1461e+01 
21-09-13 21:36:19.706 - INFO: [epoch:  6, iter: 391,500, lr:(2.244e-05,)] l_pix: 1.1343e+01 
21-09-13 21:38:01.567 - INFO: [epoch:  6, iter: 391,600, lr:(2.240e-05,)] l_pix: 1.0178e+01 
21-09-13 21:39:43.773 - INFO: [epoch:  6, iter: 391,700, lr:(2.236e-05,)] l_pix: 1.2724e+01 
21-09-13 21:41:25.350 - INFO: [epoch:  6, iter: 391,800, lr:(2.232e-05,)] l_pix: 1.2674e+01 
21-09-13 21:43:06.852 - INFO: [epoch:  6, iter: 391,900, lr:(2.228e-05,)] l_pix: 1.0166e+01 
21-09-13 21:44:48.353 - INFO: [epoch:  6, iter: 392,000, lr:(2.224e-05,)] l_pix: 1.0373e+01 
21-09-13 21:46:30.833 - INFO: [epoch:  6, iter: 392,100, lr:(2.220e-05,)] l_pix: 1.0321e+01 
21-09-13 21:48:14.939 - INFO: [epoch:  6, iter: 392,200, lr:(2.216e-05,)] l_pix: 1.3673e+01 
21-09-13 21:49:58.879 - INFO: [epoch:  6, iter: 392,300, lr:(2.212e-05,)] l_pix: 1.0757e+01 
21-09-13 21:51:42.995 - INFO: [epoch:  6, iter: 392,400, lr:(2.208e-05,)] l_pix: 9.2572e+00 
21-09-13 21:53:27.458 - INFO: [epoch:  6, iter: 392,500, lr:(2.205e-05,)] l_pix: 1.0056e+01 
21-09-13 21:55:11.577 - INFO: [epoch:  6, iter: 392,600, lr:(2.201e-05,)] l_pix: 1.0609e+01 
21-09-13 21:56:55.884 - INFO: [epoch:  6, iter: 392,700, lr:(2.197e-05,)] l_pix: 1.2003e+01 
21-09-13 21:58:39.292 - INFO: [epoch:  6, iter: 392,800, lr:(2.193e-05,)] l_pix: 1.0718e+01 
21-09-13 22:00:23.117 - INFO: [epoch:  6, iter: 392,900, lr:(2.189e-05,)] l_pix: 1.1689e+01 
21-09-13 22:02:06.798 - INFO: [epoch:  6, iter: 393,000, lr:(2.185e-05,)] l_pix: 1.1683e+01 
21-09-13 22:03:50.620 - INFO: [epoch:  6, iter: 393,100, lr:(2.181e-05,)] l_pix: 9.7976e+00 
21-09-13 22:05:34.600 - INFO: [epoch:  6, iter: 393,200, lr:(2.177e-05,)] l_pix: 1.1443e+01 
21-09-13 22:07:18.662 - INFO: [epoch:  6, iter: 393,300, lr:(2.173e-05,)] l_pix: 1.1816e+01 
21-09-13 22:09:03.466 - INFO: [epoch:  6, iter: 393,400, lr:(2.169e-05,)] l_pix: 8.9607e+00 
21-09-13 22:10:47.845 - INFO: [epoch:  6, iter: 393,500, lr:(2.165e-05,)] l_pix: 1.1405e+01 
21-09-13 22:12:31.896 - INFO: [epoch:  6, iter: 393,600, lr:(2.162e-05,)] l_pix: 1.0974e+01 
21-09-13 22:14:16.641 - INFO: [epoch:  6, iter: 393,700, lr:(2.158e-05,)] l_pix: 1.1411e+01 
21-09-13 22:16:01.627 - INFO: [epoch:  6, iter: 393,800, lr:(2.154e-05,)] l_pix: 1.1376e+01 
21-09-13 22:17:45.437 - INFO: [epoch:  6, iter: 393,900, lr:(2.150e-05,)] l_pix: 8.4721e+00 
21-09-13 22:19:29.193 - INFO: [epoch:  6, iter: 394,000, lr:(2.146e-05,)] l_pix: 1.0307e+01 
21-09-13 22:21:13.244 - INFO: [epoch:  6, iter: 394,100, lr:(2.142e-05,)] l_pix: 9.2673e+00 
21-09-13 22:22:57.491 - INFO: [epoch:  6, iter: 394,200, lr:(2.138e-05,)] l_pix: 1.1326e+01 
21-09-13 22:24:41.294 - INFO: [epoch:  6, iter: 394,300, lr:(2.134e-05,)] l_pix: 1.1750e+01 
21-09-13 22:26:25.376 - INFO: [epoch:  6, iter: 394,400, lr:(2.131e-05,)] l_pix: 1.0390e+01 
21-09-13 22:28:09.907 - INFO: [epoch:  6, iter: 394,500, lr:(2.127e-05,)] l_pix: 1.0540e+01 
21-09-13 22:29:54.116 - INFO: [epoch:  6, iter: 394,600, lr:(2.123e-05,)] l_pix: 1.2622e+01 
21-09-13 22:31:38.278 - INFO: [epoch:  6, iter: 394,700, lr:(2.119e-05,)] l_pix: 1.2022e+01 
21-09-13 22:33:23.162 - INFO: [epoch:  6, iter: 394,800, lr:(2.115e-05,)] l_pix: 1.3669e+01 
21-09-13 22:35:06.605 - INFO: [epoch:  6, iter: 394,900, lr:(2.111e-05,)] l_pix: 1.0227e+01 
21-09-13 22:36:49.898 - INFO: [epoch:  6, iter: 395,000, lr:(2.107e-05,)] l_pix: 1.0754e+01 
21-09-13 22:38:55.988 - INFO: # Validation # PSNR: 2.8887e+01
21-09-13 22:38:55.989 - INFO: Saving models and training states.
21-09-13 22:40:40.940 - INFO: [epoch:  6, iter: 395,100, lr:(2.104e-05,)] l_pix: 1.1699e+01 
21-09-13 22:42:25.564 - INFO: [epoch:  6, iter: 395,200, lr:(2.100e-05,)] l_pix: 9.7389e+00 
21-09-13 22:44:09.291 - INFO: [epoch:  6, iter: 395,300, lr:(2.096e-05,)] l_pix: 1.2878e+01 
21-09-13 22:45:53.399 - INFO: [epoch:  6, iter: 395,400, lr:(2.092e-05,)] l_pix: 1.1030e+01 
21-09-13 22:47:35.093 - INFO: [epoch:  6, iter: 395,500, lr:(2.088e-05,)] l_pix: 1.1371e+01 
21-09-13 22:49:16.379 - INFO: [epoch:  6, iter: 395,600, lr:(2.084e-05,)] l_pix: 1.1921e+01 
21-09-13 22:50:58.915 - INFO: [epoch:  6, iter: 395,700, lr:(2.080e-05,)] l_pix: 1.2910e+01 
21-09-13 22:52:43.112 - INFO: [epoch:  6, iter: 395,800, lr:(2.077e-05,)] l_pix: 1.1497e+01 
21-09-13 22:54:27.563 - INFO: [epoch:  6, iter: 395,900, lr:(2.073e-05,)] l_pix: 9.3492e+00 
21-09-13 22:56:12.267 - INFO: [epoch:  6, iter: 396,000, lr:(2.069e-05,)] l_pix: 9.7219e+00 
21-09-13 22:57:57.048 - INFO: [epoch:  6, iter: 396,100, lr:(2.065e-05,)] l_pix: 1.0577e+01 
21-09-13 22:59:41.774 - INFO: [epoch:  6, iter: 396,200, lr:(2.061e-05,)] l_pix: 1.4357e+01 
21-09-13 23:01:26.099 - INFO: [epoch:  6, iter: 396,300, lr:(2.058e-05,)] l_pix: 1.1456e+01 
21-09-13 23:03:09.995 - INFO: [epoch:  6, iter: 396,400, lr:(2.054e-05,)] l_pix: 1.1464e+01 
21-09-13 23:04:52.526 - INFO: [epoch:  6, iter: 396,500, lr:(2.050e-05,)] l_pix: 1.0938e+01 
21-09-13 23:06:34.555 - INFO: [epoch:  6, iter: 396,600, lr:(2.046e-05,)] l_pix: 1.4436e+01 
21-09-13 23:08:17.455 - INFO: [epoch:  6, iter: 396,700, lr:(2.042e-05,)] l_pix: 1.0547e+01 
21-09-13 23:10:01.284 - INFO: [epoch:  6, iter: 396,800, lr:(2.039e-05,)] l_pix: 1.2085e+01 
21-09-13 23:11:45.197 - INFO: [epoch:  6, iter: 396,900, lr:(2.035e-05,)] l_pix: 1.1213e+01 
21-09-13 23:13:29.135 - INFO: [epoch:  6, iter: 397,000, lr:(2.031e-05,)] l_pix: 1.4719e+01 
21-09-13 23:15:12.565 - INFO: [epoch:  6, iter: 397,100, lr:(2.027e-05,)] l_pix: 1.1505e+01 
21-09-13 23:16:56.848 - INFO: [epoch:  6, iter: 397,200, lr:(2.023e-05,)] l_pix: 1.0576e+01 
21-09-13 23:18:41.409 - INFO: [epoch:  6, iter: 397,300, lr:(2.020e-05,)] l_pix: 1.0368e+01 
21-09-13 23:20:25.968 - INFO: [epoch:  6, iter: 397,400, lr:(2.016e-05,)] l_pix: 1.3298e+01 
21-09-13 23:22:10.253 - INFO: [epoch:  6, iter: 397,500, lr:(2.012e-05,)] l_pix: 9.7840e+00 
21-09-13 23:23:54.341 - INFO: [epoch:  6, iter: 397,600, lr:(2.008e-05,)] l_pix: 9.8467e+00 
21-09-13 23:25:38.548 - INFO: [epoch:  6, iter: 397,700, lr:(2.005e-05,)] l_pix: 1.1679e+01 
21-09-13 23:27:22.879 - INFO: [epoch:  6, iter: 397,800, lr:(2.001e-05,)] l_pix: 1.2306e+01 
21-09-13 23:29:07.061 - INFO: [epoch:  6, iter: 397,900, lr:(1.997e-05,)] l_pix: 1.1194e+01 
21-09-13 23:30:51.435 - INFO: [epoch:  6, iter: 398,000, lr:(1.993e-05,)] l_pix: 1.0592e+01 
21-09-13 23:32:35.795 - INFO: [epoch:  6, iter: 398,100, lr:(1.990e-05,)] l_pix: 9.6604e+00 
21-09-13 23:34:20.462 - INFO: [epoch:  6, iter: 398,200, lr:(1.986e-05,)] l_pix: 1.2457e+01 
21-09-13 23:36:04.717 - INFO: [epoch:  7, iter: 398,300, lr:(1.982e-05,)] l_pix: 1.1148e+01 
21-09-13 23:37:48.609 - INFO: [epoch:  7, iter: 398,400, lr:(1.978e-05,)] l_pix: 1.0667e+01 
21-09-13 23:39:32.579 - INFO: [epoch:  7, iter: 398,500, lr:(1.975e-05,)] l_pix: 1.0787e+01 
21-09-13 23:41:16.359 - INFO: [epoch:  7, iter: 398,600, lr:(1.971e-05,)] l_pix: 1.3251e+01 
21-09-13 23:43:00.277 - INFO: [epoch:  7, iter: 398,700, lr:(1.967e-05,)] l_pix: 1.2326e+01 
21-09-13 23:44:44.800 - INFO: [epoch:  7, iter: 398,800, lr:(1.963e-05,)] l_pix: 9.4629e+00 
21-09-13 23:46:29.427 - INFO: [epoch:  7, iter: 398,900, lr:(1.960e-05,)] l_pix: 1.2172e+01 
21-09-13 23:48:13.723 - INFO: [epoch:  7, iter: 399,000, lr:(1.956e-05,)] l_pix: 1.2284e+01 
21-09-13 23:49:57.808 - INFO: [epoch:  7, iter: 399,100, lr:(1.952e-05,)] l_pix: 1.0750e+01 
21-09-13 23:51:41.893 - INFO: [epoch:  7, iter: 399,200, lr:(1.948e-05,)] l_pix: 1.2034e+01 
21-09-13 23:53:26.144 - INFO: [epoch:  7, iter: 399,300, lr:(1.945e-05,)] l_pix: 9.4102e+00 
21-09-13 23:55:10.492 - INFO: [epoch:  7, iter: 399,400, lr:(1.941e-05,)] l_pix: 1.1956e+01 
21-09-13 23:56:54.664 - INFO: [epoch:  7, iter: 399,500, lr:(1.937e-05,)] l_pix: 9.5424e+00 
21-09-13 23:58:38.514 - INFO: [epoch:  7, iter: 399,600, lr:(1.934e-05,)] l_pix: 1.0284e+01 
21-09-14 00:00:22.684 - INFO: [epoch:  7, iter: 399,700, lr:(1.930e-05,)] l_pix: 1.2172e+01 
21-09-14 00:02:06.962 - INFO: [epoch:  7, iter: 399,800, lr:(1.926e-05,)] l_pix: 9.5643e+00 
21-09-14 00:03:50.976 - INFO: [epoch:  7, iter: 399,900, lr:(1.923e-05,)] l_pix: 1.2755e+01 
21-09-14 00:05:34.994 - INFO: [epoch:  7, iter: 400,000, lr:(1.919e-05,)] l_pix: 1.0174e+01 
21-09-14 00:07:40.851 - INFO: # Validation # PSNR: 2.8912e+01
21-09-14 00:07:40.851 - INFO: Saving models and training states.
21-09-14 00:09:25.377 - INFO: [epoch:  7, iter: 400,100, lr:(1.915e-05,)] l_pix: 1.0111e+01 
21-09-14 00:11:09.798 - INFO: [epoch:  7, iter: 400,200, lr:(1.911e-05,)] l_pix: 1.3044e+01 
21-09-14 00:12:54.061 - INFO: [epoch:  7, iter: 400,300, lr:(1.908e-05,)] l_pix: 1.1079e+01 
21-09-14 00:14:38.295 - INFO: [epoch:  7, iter: 400,400, lr:(1.904e-05,)] l_pix: 1.1488e+01 
21-09-14 00:16:21.687 - INFO: [epoch:  7, iter: 400,500, lr:(1.900e-05,)] l_pix: 1.0597e+01 
21-09-14 00:18:06.262 - INFO: [epoch:  7, iter: 400,600, lr:(1.897e-05,)] l_pix: 9.1058e+00 
21-09-14 00:19:50.740 - INFO: [epoch:  7, iter: 400,700, lr:(1.893e-05,)] l_pix: 1.1208e+01 
21-09-14 00:21:35.386 - INFO: [epoch:  7, iter: 400,800, lr:(1.889e-05,)] l_pix: 1.2706e+01 
21-09-14 00:23:19.978 - INFO: [epoch:  7, iter: 400,900, lr:(1.886e-05,)] l_pix: 1.1284e+01 
21-09-14 00:25:04.919 - INFO: [epoch:  7, iter: 401,000, lr:(1.882e-05,)] l_pix: 1.0941e+01 
21-09-14 00:26:50.024 - INFO: [epoch:  7, iter: 401,100, lr:(1.878e-05,)] l_pix: 1.1667e+01 
21-09-14 00:28:34.984 - INFO: [epoch:  7, iter: 401,200, lr:(1.875e-05,)] l_pix: 1.2537e+01 
21-09-14 00:30:19.839 - INFO: [epoch:  7, iter: 401,300, lr:(1.871e-05,)] l_pix: 1.1676e+01 
21-09-14 00:32:04.688 - INFO: [epoch:  7, iter: 401,400, lr:(1.867e-05,)] l_pix: 1.1827e+01 
21-09-14 00:33:49.615 - INFO: [epoch:  7, iter: 401,500, lr:(1.864e-05,)] l_pix: 1.0030e+01 
21-09-14 00:35:34.484 - INFO: [epoch:  7, iter: 401,600, lr:(1.860e-05,)] l_pix: 1.1434e+01 
21-09-14 00:37:19.332 - INFO: [epoch:  7, iter: 401,700, lr:(1.857e-05,)] l_pix: 1.0534e+01 
21-09-14 00:39:03.903 - INFO: [epoch:  7, iter: 401,800, lr:(1.853e-05,)] l_pix: 1.2475e+01 
21-09-14 00:40:48.741 - INFO: [epoch:  7, iter: 401,900, lr:(1.849e-05,)] l_pix: 1.0051e+01 
21-09-14 00:42:33.509 - INFO: [epoch:  7, iter: 402,000, lr:(1.846e-05,)] l_pix: 1.1338e+01 
21-09-14 00:44:18.061 - INFO: [epoch:  7, iter: 402,100, lr:(1.842e-05,)] l_pix: 1.0398e+01 
21-09-14 00:46:02.845 - INFO: [epoch:  7, iter: 402,200, lr:(1.838e-05,)] l_pix: 1.0914e+01 
21-09-14 00:47:47.856 - INFO: [epoch:  7, iter: 402,300, lr:(1.835e-05,)] l_pix: 1.3399e+01 
21-09-14 00:49:32.810 - INFO: [epoch:  7, iter: 402,400, lr:(1.831e-05,)] l_pix: 1.0262e+01 
21-09-14 00:51:17.920 - INFO: [epoch:  7, iter: 402,500, lr:(1.828e-05,)] l_pix: 9.3340e+00 
21-09-14 00:53:02.669 - INFO: [epoch:  7, iter: 402,600, lr:(1.824e-05,)] l_pix: 1.1901e+01 
21-09-14 00:54:47.484 - INFO: [epoch:  7, iter: 402,700, lr:(1.820e-05,)] l_pix: 1.0283e+01 
21-09-14 00:56:32.440 - INFO: [epoch:  7, iter: 402,800, lr:(1.817e-05,)] l_pix: 1.3976e+01 
21-09-14 00:58:17.229 - INFO: [epoch:  7, iter: 402,900, lr:(1.813e-05,)] l_pix: 1.1581e+01 
21-09-14 01:00:01.646 - INFO: [epoch:  7, iter: 403,000, lr:(1.810e-05,)] l_pix: 1.2281e+01 
21-09-14 01:01:46.146 - INFO: [epoch:  7, iter: 403,100, lr:(1.806e-05,)] l_pix: 1.0703e+01 
21-09-14 01:03:30.885 - INFO: [epoch:  7, iter: 403,200, lr:(1.802e-05,)] l_pix: 1.0899e+01 
21-09-14 01:05:15.441 - INFO: [epoch:  7, iter: 403,300, lr:(1.799e-05,)] l_pix: 1.3936e+01 
21-09-14 01:06:59.924 - INFO: [epoch:  7, iter: 403,400, lr:(1.795e-05,)] l_pix: 1.1546e+01 
21-09-14 01:08:44.787 - INFO: [epoch:  7, iter: 403,500, lr:(1.792e-05,)] l_pix: 1.2846e+01 
21-09-14 01:10:29.841 - INFO: [epoch:  7, iter: 403,600, lr:(1.788e-05,)] l_pix: 9.9415e+00 
21-09-14 01:12:14.992 - INFO: [epoch:  7, iter: 403,700, lr:(1.784e-05,)] l_pix: 9.6329e+00 
21-09-14 01:13:59.918 - INFO: [epoch:  7, iter: 403,800, lr:(1.781e-05,)] l_pix: 1.1430e+01 
21-09-14 01:15:44.997 - INFO: [epoch:  7, iter: 403,900, lr:(1.777e-05,)] l_pix: 1.1627e+01 
21-09-14 01:17:30.145 - INFO: [epoch:  7, iter: 404,000, lr:(1.774e-05,)] l_pix: 9.7949e+00 
21-09-14 01:19:14.878 - INFO: [epoch:  7, iter: 404,100, lr:(1.770e-05,)] l_pix: 1.3856e+01 
21-09-14 01:20:59.720 - INFO: [epoch:  7, iter: 404,200, lr:(1.767e-05,)] l_pix: 1.1703e+01 
21-09-14 01:22:44.205 - INFO: [epoch:  7, iter: 404,300, lr:(1.763e-05,)] l_pix: 9.1794e+00 
21-09-14 01:24:28.727 - INFO: [epoch:  7, iter: 404,400, lr:(1.760e-05,)] l_pix: 1.3110e+01 
21-09-14 01:26:13.083 - INFO: [epoch:  7, iter: 404,500, lr:(1.756e-05,)] l_pix: 1.0869e+01 
21-09-14 01:27:57.670 - INFO: [epoch:  7, iter: 404,600, lr:(1.752e-05,)] l_pix: 9.1886e+00 
21-09-14 01:29:42.783 - INFO: [epoch:  7, iter: 404,700, lr:(1.749e-05,)] l_pix: 1.0008e+01 
21-09-14 01:31:27.970 - INFO: [epoch:  7, iter: 404,800, lr:(1.745e-05,)] l_pix: 1.2199e+01 
21-09-14 01:33:12.999 - INFO: [epoch:  7, iter: 404,900, lr:(1.742e-05,)] l_pix: 9.8064e+00 
21-09-14 01:34:57.753 - INFO: [epoch:  7, iter: 405,000, lr:(1.738e-05,)] l_pix: 1.1149e+01 
21-09-14 01:37:03.646 - INFO: # Validation # PSNR: 2.8872e+01
21-09-14 01:37:03.646 - INFO: Saving models and training states.
21-09-14 01:38:49.415 - INFO: [epoch:  7, iter: 405,100, lr:(1.735e-05,)] l_pix: 1.1847e+01 
21-09-14 01:40:34.123 - INFO: [epoch:  7, iter: 405,200, lr:(1.731e-05,)] l_pix: 1.0451e+01 
21-09-14 01:42:18.876 - INFO: [epoch:  7, iter: 405,300, lr:(1.728e-05,)] l_pix: 9.7111e+00 
21-09-14 01:44:03.251 - INFO: [epoch:  7, iter: 405,400, lr:(1.724e-05,)] l_pix: 1.1117e+01 
21-09-14 01:45:47.700 - INFO: [epoch:  7, iter: 405,500, lr:(1.721e-05,)] l_pix: 1.1844e+01 
21-09-14 01:47:32.115 - INFO: [epoch:  7, iter: 405,600, lr:(1.717e-05,)] l_pix: 1.1663e+01 
21-09-14 01:49:16.711 - INFO: [epoch:  7, iter: 405,700, lr:(1.714e-05,)] l_pix: 9.9381e+00 
21-09-14 01:51:01.366 - INFO: [epoch:  7, iter: 405,800, lr:(1.710e-05,)] l_pix: 9.6865e+00 
21-09-14 01:52:45.863 - INFO: [epoch:  7, iter: 405,900, lr:(1.707e-05,)] l_pix: 1.0446e+01 
21-09-14 01:54:30.377 - INFO: [epoch:  7, iter: 406,000, lr:(1.703e-05,)] l_pix: 1.1947e+01 
21-09-14 01:56:15.249 - INFO: [epoch:  7, iter: 406,100, lr:(1.700e-05,)] l_pix: 1.0184e+01 
21-09-14 01:58:00.321 - INFO: [epoch:  7, iter: 406,200, lr:(1.696e-05,)] l_pix: 1.0779e+01 
21-09-14 01:59:45.119 - INFO: [epoch:  7, iter: 406,300, lr:(1.693e-05,)] l_pix: 1.1313e+01 
21-09-14 02:01:29.953 - INFO: [epoch:  7, iter: 406,400, lr:(1.689e-05,)] l_pix: 1.2852e+01 
21-09-14 02:03:14.858 - INFO: [epoch:  7, iter: 406,500, lr:(1.686e-05,)] l_pix: 1.1760e+01 
21-09-14 02:04:59.765 - INFO: [epoch:  7, iter: 406,600, lr:(1.682e-05,)] l_pix: 1.0186e+01 
21-09-14 02:06:44.134 - INFO: [epoch:  7, iter: 406,700, lr:(1.679e-05,)] l_pix: 1.1410e+01 
21-09-14 02:08:28.927 - INFO: [epoch:  7, iter: 406,800, lr:(1.675e-05,)] l_pix: 1.2292e+01 
21-09-14 02:10:13.476 - INFO: [epoch:  7, iter: 406,900, lr:(1.672e-05,)] l_pix: 1.1967e+01 
21-09-14 02:11:58.158 - INFO: [epoch:  7, iter: 407,000, lr:(1.668e-05,)] l_pix: 1.1191e+01 
21-09-14 02:13:43.034 - INFO: [epoch:  7, iter: 407,100, lr:(1.665e-05,)] l_pix: 1.0381e+01 
21-09-14 02:15:27.733 - INFO: [epoch:  7, iter: 407,200, lr:(1.661e-05,)] l_pix: 1.2415e+01 
21-09-14 02:17:12.417 - INFO: [epoch:  7, iter: 407,300, lr:(1.658e-05,)] l_pix: 1.2365e+01 
21-09-14 02:18:57.224 - INFO: [epoch:  7, iter: 407,400, lr:(1.655e-05,)] l_pix: 1.2251e+01 
21-09-14 02:20:42.207 - INFO: [epoch:  7, iter: 407,500, lr:(1.651e-05,)] l_pix: 1.2273e+01 
21-09-14 02:22:27.098 - INFO: [epoch:  7, iter: 407,600, lr:(1.648e-05,)] l_pix: 1.0081e+01 
21-09-14 02:24:12.119 - INFO: [epoch:  7, iter: 407,700, lr:(1.644e-05,)] l_pix: 1.0256e+01 
21-09-14 02:25:56.972 - INFO: [epoch:  7, iter: 407,800, lr:(1.641e-05,)] l_pix: 1.1630e+01 
21-09-14 02:27:41.927 - INFO: [epoch:  7, iter: 407,900, lr:(1.637e-05,)] l_pix: 1.0759e+01 
21-09-14 02:29:26.829 - INFO: [epoch:  7, iter: 408,000, lr:(1.634e-05,)] l_pix: 1.0428e+01 
21-09-14 02:31:11.614 - INFO: [epoch:  7, iter: 408,100, lr:(1.630e-05,)] l_pix: 8.7915e+00 
21-09-14 02:32:56.238 - INFO: [epoch:  7, iter: 408,200, lr:(1.627e-05,)] l_pix: 1.3193e+01 
21-09-14 02:34:40.881 - INFO: [epoch:  7, iter: 408,300, lr:(1.624e-05,)] l_pix: 1.0837e+01 
21-09-14 02:36:25.672 - INFO: [epoch:  7, iter: 408,400, lr:(1.620e-05,)] l_pix: 1.0387e+01 
21-09-14 02:38:10.262 - INFO: [epoch:  7, iter: 408,500, lr:(1.617e-05,)] l_pix: 1.0027e+01 
21-09-14 02:39:54.618 - INFO: [epoch:  7, iter: 408,600, lr:(1.613e-05,)] l_pix: 9.2732e+00 
21-09-14 02:41:39.277 - INFO: [epoch:  7, iter: 408,700, lr:(1.610e-05,)] l_pix: 1.1646e+01 
21-09-14 02:43:24.251 - INFO: [epoch:  7, iter: 408,800, lr:(1.607e-05,)] l_pix: 1.2488e+01 
21-09-14 02:45:09.177 - INFO: [epoch:  7, iter: 408,900, lr:(1.603e-05,)] l_pix: 1.2003e+01 
21-09-14 02:46:53.464 - INFO: [epoch:  7, iter: 409,000, lr:(1.600e-05,)] l_pix: 1.1070e+01 
21-09-14 02:48:38.339 - INFO: [epoch:  7, iter: 409,100, lr:(1.596e-05,)] l_pix: 1.0612e+01 
21-09-14 02:50:23.314 - INFO: [epoch:  7, iter: 409,200, lr:(1.593e-05,)] l_pix: 1.0148e+01 
21-09-14 02:52:08.245 - INFO: [epoch:  7, iter: 409,300, lr:(1.590e-05,)] l_pix: 1.0700e+01 
21-09-14 02:53:53.098 - INFO: [epoch:  7, iter: 409,400, lr:(1.586e-05,)] l_pix: 1.0047e+01 
21-09-14 02:55:37.937 - INFO: [epoch:  7, iter: 409,500, lr:(1.583e-05,)] l_pix: 1.0132e+01 
21-09-14 02:57:22.718 - INFO: [epoch:  7, iter: 409,600, lr:(1.579e-05,)] l_pix: 1.2062e+01 
21-09-14 02:59:07.504 - INFO: [epoch:  7, iter: 409,700, lr:(1.576e-05,)] l_pix: 1.2083e+01 
21-09-14 03:00:52.354 - INFO: [epoch:  7, iter: 409,800, lr:(1.573e-05,)] l_pix: 1.0151e+01 
21-09-14 03:02:36.833 - INFO: [epoch:  7, iter: 409,900, lr:(1.569e-05,)] l_pix: 1.0823e+01 
21-09-14 03:04:21.040 - INFO: [epoch:  7, iter: 410,000, lr:(1.566e-05,)] l_pix: 9.4522e+00 
21-09-14 03:06:25.916 - INFO: # Validation # PSNR: 2.8896e+01
21-09-14 03:06:25.916 - INFO: Saving models and training states.
21-09-14 03:08:11.495 - INFO: [epoch:  7, iter: 410,100, lr:(1.563e-05,)] l_pix: 1.1850e+01 
21-09-14 03:09:56.304 - INFO: [epoch:  7, iter: 410,200, lr:(1.559e-05,)] l_pix: 1.3886e+01 
21-09-14 03:11:41.065 - INFO: [epoch:  7, iter: 410,300, lr:(1.556e-05,)] l_pix: 1.1176e+01 
21-09-14 03:13:25.570 - INFO: [epoch:  7, iter: 410,400, lr:(1.552e-05,)] l_pix: 1.1604e+01 
21-09-14 03:15:09.777 - INFO: [epoch:  7, iter: 410,500, lr:(1.549e-05,)] l_pix: 1.1347e+01 
21-09-14 03:16:54.678 - INFO: [epoch:  7, iter: 410,600, lr:(1.546e-05,)] l_pix: 1.1419e+01 
21-09-14 03:18:40.023 - INFO: [epoch:  7, iter: 410,700, lr:(1.542e-05,)] l_pix: 9.9448e+00 
21-09-14 03:20:24.985 - INFO: [epoch:  7, iter: 410,800, lr:(1.539e-05,)] l_pix: 1.1308e+01 
21-09-14 03:22:09.779 - INFO: [epoch:  7, iter: 410,900, lr:(1.536e-05,)] l_pix: 1.1063e+01 
21-09-14 03:23:54.615 - INFO: [epoch:  7, iter: 411,000, lr:(1.532e-05,)] l_pix: 9.7245e+00 
21-09-14 03:25:39.501 - INFO: [epoch:  7, iter: 411,100, lr:(1.529e-05,)] l_pix: 9.8680e+00 
21-09-14 03:27:24.397 - INFO: [epoch:  7, iter: 411,200, lr:(1.526e-05,)] l_pix: 1.2895e+01 
21-09-14 03:29:08.938 - INFO: [epoch:  7, iter: 411,300, lr:(1.522e-05,)] l_pix: 1.3604e+01 
21-09-14 03:30:53.454 - INFO: [epoch:  7, iter: 411,400, lr:(1.519e-05,)] l_pix: 1.1375e+01 
21-09-14 03:32:38.006 - INFO: [epoch:  7, iter: 411,500, lr:(1.516e-05,)] l_pix: 1.1309e+01 
21-09-14 03:34:22.466 - INFO: [epoch:  7, iter: 411,600, lr:(1.512e-05,)] l_pix: 1.2299e+01 
21-09-14 03:36:06.991 - INFO: [epoch:  7, iter: 411,700, lr:(1.509e-05,)] l_pix: 8.8891e+00 
21-09-14 03:37:51.590 - INFO: [epoch:  7, iter: 411,800, lr:(1.506e-05,)] l_pix: 1.0582e+01 
21-09-14 03:39:36.152 - INFO: [epoch:  7, iter: 411,900, lr:(1.503e-05,)] l_pix: 1.2191e+01 
21-09-14 03:41:21.243 - INFO: [epoch:  7, iter: 412,000, lr:(1.499e-05,)] l_pix: 1.0914e+01 
21-09-14 03:43:05.403 - INFO: [epoch:  7, iter: 412,100, lr:(1.496e-05,)] l_pix: 1.3177e+01 
21-09-14 03:44:50.313 - INFO: [epoch:  7, iter: 412,200, lr:(1.493e-05,)] l_pix: 1.1105e+01 
21-09-14 03:46:35.062 - INFO: [epoch:  7, iter: 412,300, lr:(1.489e-05,)] l_pix: 1.1793e+01 
21-09-14 03:48:19.777 - INFO: [epoch:  7, iter: 412,400, lr:(1.486e-05,)] l_pix: 1.1733e+01 
21-09-14 03:50:04.460 - INFO: [epoch:  7, iter: 412,500, lr:(1.483e-05,)] l_pix: 1.1034e+01 
21-09-14 03:51:48.873 - INFO: [epoch:  7, iter: 412,600, lr:(1.480e-05,)] l_pix: 1.1672e+01 
21-09-14 03:53:33.415 - INFO: [epoch:  7, iter: 412,700, lr:(1.476e-05,)] l_pix: 1.0877e+01 
21-09-14 03:55:18.571 - INFO: [epoch:  7, iter: 412,800, lr:(1.473e-05,)] l_pix: 1.2653e+01 
21-09-14 03:57:03.803 - INFO: [epoch:  7, iter: 412,900, lr:(1.470e-05,)] l_pix: 1.0301e+01 
21-09-14 03:58:48.671 - INFO: [epoch:  7, iter: 413,000, lr:(1.466e-05,)] l_pix: 1.2423e+01 
21-09-14 04:00:33.593 - INFO: [epoch:  7, iter: 413,100, lr:(1.463e-05,)] l_pix: 1.1334e+01 
21-09-14 04:02:18.514 - INFO: [epoch:  7, iter: 413,200, lr:(1.460e-05,)] l_pix: 1.1842e+01 
21-09-14 04:04:03.375 - INFO: [epoch:  7, iter: 413,300, lr:(1.457e-05,)] l_pix: 1.3125e+01 
21-09-14 04:05:48.182 - INFO: [epoch:  7, iter: 413,400, lr:(1.453e-05,)] l_pix: 1.2905e+01 
21-09-14 04:07:32.897 - INFO: [epoch:  7, iter: 413,500, lr:(1.450e-05,)] l_pix: 9.8406e+00 
21-09-14 04:09:17.455 - INFO: [epoch:  7, iter: 413,600, lr:(1.447e-05,)] l_pix: 1.1488e+01 
21-09-14 04:11:02.106 - INFO: [epoch:  7, iter: 413,700, lr:(1.444e-05,)] l_pix: 1.2176e+01 
21-09-14 04:12:46.959 - INFO: [epoch:  7, iter: 413,800, lr:(1.440e-05,)] l_pix: 1.1342e+01 
21-09-14 04:14:31.641 - INFO: [epoch:  7, iter: 413,900, lr:(1.437e-05,)] l_pix: 1.1737e+01 
21-09-14 04:16:16.192 - INFO: [epoch:  7, iter: 414,000, lr:(1.434e-05,)] l_pix: 1.1593e+01 
21-09-14 04:18:01.255 - INFO: [epoch:  7, iter: 414,100, lr:(1.431e-05,)] l_pix: 1.0740e+01 
21-09-14 04:19:46.448 - INFO: [epoch:  7, iter: 414,200, lr:(1.428e-05,)] l_pix: 1.0000e+01 
21-09-14 04:21:31.241 - INFO: [epoch:  7, iter: 414,300, lr:(1.424e-05,)] l_pix: 1.1799e+01 
21-09-14 04:23:16.133 - INFO: [epoch:  7, iter: 414,400, lr:(1.421e-05,)] l_pix: 1.2469e+01 
21-09-14 04:25:01.072 - INFO: [epoch:  7, iter: 414,500, lr:(1.418e-05,)] l_pix: 1.1844e+01 
21-09-14 04:26:45.686 - INFO: [epoch:  7, iter: 414,600, lr:(1.415e-05,)] l_pix: 1.2117e+01 
21-09-14 04:28:30.355 - INFO: [epoch:  7, iter: 414,700, lr:(1.411e-05,)] l_pix: 1.1358e+01 
21-09-14 04:30:14.825 - INFO: [epoch:  7, iter: 414,800, lr:(1.408e-05,)] l_pix: 1.0734e+01 
21-09-14 04:31:59.348 - INFO: [epoch:  7, iter: 414,900, lr:(1.405e-05,)] l_pix: 1.1785e+01 
21-09-14 04:33:43.825 - INFO: [epoch:  7, iter: 415,000, lr:(1.402e-05,)] l_pix: 1.0007e+01 
21-09-14 04:35:50.153 - INFO: # Validation # PSNR: 2.8897e+01
21-09-14 04:35:50.153 - INFO: Saving models and training states.
21-09-14 04:37:35.695 - INFO: [epoch:  7, iter: 415,100, lr:(1.399e-05,)] l_pix: 1.2235e+01 
21-09-14 04:39:20.672 - INFO: [epoch:  7, iter: 415,200, lr:(1.395e-05,)] l_pix: 1.0850e+01 
21-09-14 04:41:05.536 - INFO: [epoch:  7, iter: 415,300, lr:(1.392e-05,)] l_pix: 9.9758e+00 
21-09-14 04:42:50.562 - INFO: [epoch:  7, iter: 415,400, lr:(1.389e-05,)] l_pix: 9.0435e+00 
21-09-14 04:44:35.443 - INFO: [epoch:  7, iter: 415,500, lr:(1.386e-05,)] l_pix: 1.0821e+01 
21-09-14 04:46:20.438 - INFO: [epoch:  7, iter: 415,600, lr:(1.383e-05,)] l_pix: 1.1459e+01 
21-09-14 04:48:05.281 - INFO: [epoch:  7, iter: 415,700, lr:(1.380e-05,)] l_pix: 1.1368e+01 
21-09-14 04:49:50.174 - INFO: [epoch:  7, iter: 415,800, lr:(1.376e-05,)] l_pix: 8.8630e+00 
21-09-14 04:51:34.681 - INFO: [epoch:  7, iter: 415,900, lr:(1.373e-05,)] l_pix: 1.3727e+01 
21-09-14 04:53:19.244 - INFO: [epoch:  7, iter: 416,000, lr:(1.370e-05,)] l_pix: 1.4255e+01 
21-09-14 04:55:03.894 - INFO: [epoch:  7, iter: 416,100, lr:(1.367e-05,)] l_pix: 1.1378e+01 
21-09-14 04:56:48.526 - INFO: [epoch:  7, iter: 416,200, lr:(1.364e-05,)] l_pix: 1.1431e+01 
21-09-14 04:58:33.121 - INFO: [epoch:  7, iter: 416,300, lr:(1.361e-05,)] l_pix: 1.0448e+01 
21-09-14 05:00:17.856 - INFO: [epoch:  7, iter: 416,400, lr:(1.357e-05,)] l_pix: 1.1271e+01 
21-09-14 05:02:02.371 - INFO: [epoch:  7, iter: 416,500, lr:(1.354e-05,)] l_pix: 1.1848e+01 
21-09-14 05:03:46.676 - INFO: [epoch:  7, iter: 416,600, lr:(1.351e-05,)] l_pix: 1.0396e+01 
21-09-14 05:05:31.618 - INFO: [epoch:  7, iter: 416,700, lr:(1.348e-05,)] l_pix: 1.0718e+01 
21-09-14 05:07:16.979 - INFO: [epoch:  7, iter: 416,800, lr:(1.345e-05,)] l_pix: 1.1723e+01 
21-09-14 05:09:02.190 - INFO: [epoch:  7, iter: 416,900, lr:(1.342e-05,)] l_pix: 1.4375e+01 
21-09-14 05:10:47.154 - INFO: [epoch:  7, iter: 417,000, lr:(1.339e-05,)] l_pix: 9.9819e+00 
21-09-14 05:12:32.167 - INFO: [epoch:  7, iter: 417,100, lr:(1.335e-05,)] l_pix: 1.1125e+01 
21-09-14 05:14:17.298 - INFO: [epoch:  7, iter: 417,200, lr:(1.332e-05,)] l_pix: 1.1141e+01 
21-09-14 05:16:02.376 - INFO: [epoch:  7, iter: 417,300, lr:(1.329e-05,)] l_pix: 1.3094e+01 
21-09-14 05:17:47.483 - INFO: [epoch:  7, iter: 417,400, lr:(1.326e-05,)] l_pix: 1.1024e+01 
21-09-14 05:19:32.356 - INFO: [epoch:  7, iter: 417,500, lr:(1.323e-05,)] l_pix: 1.1141e+01 
21-09-14 05:21:17.084 - INFO: [epoch:  7, iter: 417,600, lr:(1.320e-05,)] l_pix: 1.0464e+01 
21-09-14 05:23:01.698 - INFO: [epoch:  7, iter: 417,700, lr:(1.317e-05,)] l_pix: 1.0036e+01 
21-09-14 05:24:46.484 - INFO: [epoch:  7, iter: 417,800, lr:(1.314e-05,)] l_pix: 1.3245e+01 
21-09-14 05:26:31.524 - INFO: [epoch:  7, iter: 417,900, lr:(1.311e-05,)] l_pix: 1.2041e+01 
21-09-14 05:28:16.477 - INFO: [epoch:  7, iter: 418,000, lr:(1.307e-05,)] l_pix: 1.0866e+01 
21-09-14 05:30:01.519 - INFO: [epoch:  7, iter: 418,100, lr:(1.304e-05,)] l_pix: 1.1352e+01 
21-09-14 05:31:45.940 - INFO: [epoch:  7, iter: 418,200, lr:(1.301e-05,)] l_pix: 1.0751e+01 
21-09-14 05:33:30.794 - INFO: [epoch:  7, iter: 418,300, lr:(1.298e-05,)] l_pix: 1.0178e+01 
21-09-14 05:35:16.194 - INFO: [epoch:  7, iter: 418,400, lr:(1.295e-05,)] l_pix: 1.0020e+01 
21-09-14 05:37:01.404 - INFO: [epoch:  7, iter: 418,500, lr:(1.292e-05,)] l_pix: 1.2850e+01 
21-09-14 05:38:46.599 - INFO: [epoch:  7, iter: 418,600, lr:(1.289e-05,)] l_pix: 1.2008e+01 
21-09-14 05:40:31.669 - INFO: [epoch:  7, iter: 418,700, lr:(1.286e-05,)] l_pix: 1.0775e+01 
21-09-14 05:42:16.719 - INFO: [epoch:  7, iter: 418,800, lr:(1.283e-05,)] l_pix: 9.4377e+00 
21-09-14 05:44:01.778 - INFO: [epoch:  7, iter: 418,900, lr:(1.280e-05,)] l_pix: 1.1022e+01 
21-09-14 05:45:46.720 - INFO: [epoch:  7, iter: 419,000, lr:(1.277e-05,)] l_pix: 9.7309e+00 
21-09-14 05:47:31.512 - INFO: [epoch:  7, iter: 419,100, lr:(1.274e-05,)] l_pix: 1.3159e+01 
21-09-14 05:49:16.404 - INFO: [epoch:  7, iter: 419,200, lr:(1.271e-05,)] l_pix: 1.2039e+01 
21-09-14 05:51:01.162 - INFO: [epoch:  7, iter: 419,300, lr:(1.268e-05,)] l_pix: 9.7336e+00 
21-09-14 05:52:45.987 - INFO: [epoch:  7, iter: 419,400, lr:(1.264e-05,)] l_pix: 1.2346e+01 
21-09-14 05:54:31.182 - INFO: [epoch:  7, iter: 419,500, lr:(1.261e-05,)] l_pix: 1.2094e+01 
21-09-14 05:56:16.283 - INFO: [epoch:  7, iter: 419,600, lr:(1.258e-05,)] l_pix: 1.1228e+01 
21-09-14 05:58:01.530 - INFO: [epoch:  7, iter: 419,700, lr:(1.255e-05,)] l_pix: 1.0942e+01 
21-09-14 05:59:46.607 - INFO: [epoch:  7, iter: 419,800, lr:(1.252e-05,)] l_pix: 9.9681e+00 
21-09-14 06:01:31.588 - INFO: [epoch:  7, iter: 419,900, lr:(1.249e-05,)] l_pix: 1.0580e+01 
21-09-14 06:03:16.506 - INFO: [epoch:  7, iter: 420,000, lr:(1.246e-05,)] l_pix: 1.1591e+01 
21-09-14 06:05:22.298 - INFO: # Validation # PSNR: 2.8880e+01
21-09-14 06:05:22.298 - INFO: Saving models and training states.
21-09-14 06:07:08.043 - INFO: [epoch:  7, iter: 420,100, lr:(1.243e-05,)] l_pix: 1.1059e+01 
21-09-14 06:08:52.719 - INFO: [epoch:  7, iter: 420,200, lr:(1.240e-05,)] l_pix: 9.9431e+00 
21-09-14 06:10:37.348 - INFO: [epoch:  7, iter: 420,300, lr:(1.237e-05,)] l_pix: 1.1773e+01 
21-09-14 06:12:22.211 - INFO: [epoch:  7, iter: 420,400, lr:(1.234e-05,)] l_pix: 1.1968e+01 
21-09-14 06:14:06.953 - INFO: [epoch:  7, iter: 420,500, lr:(1.231e-05,)] l_pix: 9.2403e+00 
21-09-14 06:15:51.645 - INFO: [epoch:  7, iter: 420,600, lr:(1.228e-05,)] l_pix: 1.0004e+01 
21-09-14 06:17:36.825 - INFO: [epoch:  7, iter: 420,700, lr:(1.225e-05,)] l_pix: 1.1481e+01 
21-09-14 06:19:21.926 - INFO: [epoch:  7, iter: 420,800, lr:(1.222e-05,)] l_pix: 1.3138e+01 
21-09-14 06:21:06.925 - INFO: [epoch:  7, iter: 420,900, lr:(1.219e-05,)] l_pix: 1.3094e+01 
21-09-14 06:22:51.741 - INFO: [epoch:  7, iter: 421,000, lr:(1.216e-05,)] l_pix: 1.0716e+01 
21-09-14 06:24:36.502 - INFO: [epoch:  7, iter: 421,100, lr:(1.213e-05,)] l_pix: 1.2154e+01 
21-09-14 06:26:21.378 - INFO: [epoch:  7, iter: 421,200, lr:(1.210e-05,)] l_pix: 1.0927e+01 
21-09-14 06:28:06.205 - INFO: [epoch:  7, iter: 421,300, lr:(1.207e-05,)] l_pix: 1.4048e+01 
21-09-14 06:29:50.801 - INFO: [epoch:  7, iter: 421,400, lr:(1.204e-05,)] l_pix: 1.1623e+01 
21-09-14 06:31:35.195 - INFO: [epoch:  7, iter: 421,500, lr:(1.201e-05,)] l_pix: 1.2326e+01 
21-09-14 06:33:19.798 - INFO: [epoch:  7, iter: 421,600, lr:(1.198e-05,)] l_pix: 9.8661e+00 
21-09-14 06:35:04.338 - INFO: [epoch:  7, iter: 421,700, lr:(1.195e-05,)] l_pix: 1.1398e+01 
21-09-14 06:36:48.822 - INFO: [epoch:  7, iter: 421,800, lr:(1.192e-05,)] l_pix: 1.1239e+01 
21-09-14 06:38:33.396 - INFO: [epoch:  7, iter: 421,900, lr:(1.189e-05,)] l_pix: 1.2460e+01 
21-09-14 06:40:18.278 - INFO: [epoch:  7, iter: 422,000, lr:(1.186e-05,)] l_pix: 1.0712e+01 
21-09-14 06:42:03.211 - INFO: [epoch:  7, iter: 422,100, lr:(1.184e-05,)] l_pix: 1.0406e+01 
21-09-14 06:43:48.103 - INFO: [epoch:  7, iter: 422,200, lr:(1.181e-05,)] l_pix: 1.3253e+01 
21-09-14 06:45:33.036 - INFO: [epoch:  7, iter: 422,300, lr:(1.178e-05,)] l_pix: 8.8391e+00 
21-09-14 06:47:17.753 - INFO: [epoch:  7, iter: 422,400, lr:(1.175e-05,)] l_pix: 1.1973e+01 
21-09-14 06:49:02.277 - INFO: [epoch:  7, iter: 422,500, lr:(1.172e-05,)] l_pix: 1.1247e+01 
21-09-14 06:50:46.409 - INFO: [epoch:  7, iter: 422,600, lr:(1.169e-05,)] l_pix: 1.0847e+01 
21-09-14 06:52:31.163 - INFO: [epoch:  7, iter: 422,700, lr:(1.166e-05,)] l_pix: 1.1476e+01 
21-09-14 06:54:16.176 - INFO: [epoch:  7, iter: 422,800, lr:(1.163e-05,)] l_pix: 1.1299e+01 
21-09-14 06:56:01.186 - INFO: [epoch:  7, iter: 422,900, lr:(1.160e-05,)] l_pix: 1.2237e+01 
21-09-14 06:57:45.960 - INFO: [epoch:  7, iter: 423,000, lr:(1.157e-05,)] l_pix: 1.0566e+01 
21-09-14 06:59:30.713 - INFO: [epoch:  7, iter: 423,100, lr:(1.154e-05,)] l_pix: 1.1658e+01 
21-09-14 07:01:15.458 - INFO: [epoch:  7, iter: 423,200, lr:(1.151e-05,)] l_pix: 1.1321e+01 
21-09-14 07:03:00.144 - INFO: [epoch:  7, iter: 423,300, lr:(1.148e-05,)] l_pix: 1.1662e+01 
21-09-14 07:04:44.978 - INFO: [epoch:  7, iter: 423,400, lr:(1.145e-05,)] l_pix: 1.2736e+01 
21-09-14 07:06:29.691 - INFO: [epoch:  7, iter: 423,500, lr:(1.143e-05,)] l_pix: 9.9399e+00 
21-09-14 07:08:14.101 - INFO: [epoch:  7, iter: 423,600, lr:(1.140e-05,)] l_pix: 1.0427e+01 
21-09-14 07:09:58.732 - INFO: [epoch:  7, iter: 423,700, lr:(1.137e-05,)] l_pix: 9.6043e+00 
21-09-14 07:11:43.355 - INFO: [epoch:  7, iter: 423,800, lr:(1.134e-05,)] l_pix: 1.2935e+01 
21-09-14 07:13:28.050 - INFO: [epoch:  7, iter: 423,900, lr:(1.131e-05,)] l_pix: 1.1942e+01 
21-09-14 07:15:12.736 - INFO: [epoch:  7, iter: 424,000, lr:(1.128e-05,)] l_pix: 1.1980e+01 
21-09-14 07:16:57.171 - INFO: [epoch:  7, iter: 424,100, lr:(1.125e-05,)] l_pix: 1.1288e+01 
21-09-14 07:18:41.525 - INFO: [epoch:  7, iter: 424,200, lr:(1.122e-05,)] l_pix: 1.1299e+01 
21-09-14 07:20:26.366 - INFO: [epoch:  7, iter: 424,300, lr:(1.119e-05,)] l_pix: 1.0579e+01 
21-09-14 07:22:11.464 - INFO: [epoch:  7, iter: 424,400, lr:(1.117e-05,)] l_pix: 1.2212e+01 
21-09-14 07:23:56.528 - INFO: [epoch:  7, iter: 424,500, lr:(1.114e-05,)] l_pix: 1.0773e+01 
21-09-14 07:25:41.362 - INFO: [epoch:  7, iter: 424,600, lr:(1.111e-05,)] l_pix: 1.0417e+01 
21-09-14 07:27:26.380 - INFO: [epoch:  7, iter: 424,700, lr:(1.108e-05,)] l_pix: 1.1511e+01 
21-09-14 07:29:11.347 - INFO: [epoch:  7, iter: 424,800, lr:(1.105e-05,)] l_pix: 1.0992e+01 
21-09-14 07:30:56.344 - INFO: [epoch:  7, iter: 424,900, lr:(1.102e-05,)] l_pix: 9.9217e+00 
21-09-14 07:32:41.172 - INFO: [epoch:  7, iter: 425,000, lr:(1.099e-05,)] l_pix: 1.1893e+01 
21-09-14 07:34:46.911 - INFO: # Validation # PSNR: 2.8896e+01
21-09-14 07:34:46.912 - INFO: Saving models and training states.
21-09-14 07:36:32.364 - INFO: [epoch:  7, iter: 425,100, lr:(1.097e-05,)] l_pix: 1.0838e+01 
21-09-14 07:38:17.015 - INFO: [epoch:  7, iter: 425,200, lr:(1.094e-05,)] l_pix: 1.1660e+01 
21-09-14 07:40:01.781 - INFO: [epoch:  7, iter: 425,300, lr:(1.091e-05,)] l_pix: 1.0464e+01 
21-09-14 07:41:46.553 - INFO: [epoch:  7, iter: 425,400, lr:(1.088e-05,)] l_pix: 9.8439e+00 
21-09-14 07:43:31.375 - INFO: [epoch:  7, iter: 425,500, lr:(1.085e-05,)] l_pix: 9.0556e+00 
21-09-14 07:45:15.828 - INFO: [epoch:  7, iter: 425,600, lr:(1.082e-05,)] l_pix: 1.5249e+01 
21-09-14 07:47:00.443 - INFO: [epoch:  7, iter: 425,700, lr:(1.079e-05,)] l_pix: 1.1871e+01 
21-09-14 07:48:45.168 - INFO: [epoch:  7, iter: 425,800, lr:(1.077e-05,)] l_pix: 1.4145e+01 
21-09-14 07:50:29.747 - INFO: [epoch:  7, iter: 425,900, lr:(1.074e-05,)] l_pix: 1.1574e+01 
21-09-14 07:52:14.834 - INFO: [epoch:  7, iter: 426,000, lr:(1.071e-05,)] l_pix: 1.1363e+01 
21-09-14 07:54:00.098 - INFO: [epoch:  7, iter: 426,100, lr:(1.068e-05,)] l_pix: 1.0468e+01 
21-09-14 07:55:45.331 - INFO: [epoch:  7, iter: 426,200, lr:(1.065e-05,)] l_pix: 1.0505e+01 
21-09-14 07:57:30.349 - INFO: [epoch:  7, iter: 426,300, lr:(1.063e-05,)] l_pix: 1.2570e+01 
21-09-14 07:59:15.324 - INFO: [epoch:  7, iter: 426,400, lr:(1.060e-05,)] l_pix: 1.0774e+01 
21-09-14 08:01:00.340 - INFO: [epoch:  7, iter: 426,500, lr:(1.057e-05,)] l_pix: 1.1978e+01 
21-09-14 08:02:44.907 - INFO: [epoch:  7, iter: 426,600, lr:(1.054e-05,)] l_pix: 1.1188e+01 
21-09-14 08:04:29.546 - INFO: [epoch:  7, iter: 426,700, lr:(1.051e-05,)] l_pix: 1.2566e+01 
21-09-14 08:06:14.048 - INFO: [epoch:  7, iter: 426,800, lr:(1.049e-05,)] l_pix: 1.1609e+01 
21-09-14 08:07:58.525 - INFO: [epoch:  7, iter: 426,900, lr:(1.046e-05,)] l_pix: 9.9341e+00 
21-09-14 08:09:43.009 - INFO: [epoch:  7, iter: 427,000, lr:(1.043e-05,)] l_pix: 1.2367e+01 
21-09-14 08:11:28.074 - INFO: [epoch:  7, iter: 427,100, lr:(1.040e-05,)] l_pix: 1.0008e+01 
21-09-14 08:13:13.000 - INFO: [epoch:  7, iter: 427,200, lr:(1.037e-05,)] l_pix: 9.7040e+00 
21-09-14 08:14:57.684 - INFO: [epoch:  7, iter: 427,300, lr:(1.035e-05,)] l_pix: 1.1772e+01 
21-09-14 08:16:42.535 - INFO: [epoch:  7, iter: 427,400, lr:(1.032e-05,)] l_pix: 1.2746e+01 
21-09-14 08:18:27.357 - INFO: [epoch:  7, iter: 427,500, lr:(1.029e-05,)] l_pix: 1.2009e+01 
21-09-14 08:20:12.090 - INFO: [epoch:  7, iter: 427,600, lr:(1.026e-05,)] l_pix: 1.1689e+01 
21-09-14 08:21:56.664 - INFO: [epoch:  7, iter: 427,700, lr:(1.024e-05,)] l_pix: 1.1902e+01 
21-09-14 08:23:41.478 - INFO: [epoch:  7, iter: 427,800, lr:(1.021e-05,)] l_pix: 1.0014e+01 
21-09-14 08:25:26.030 - INFO: [epoch:  7, iter: 427,900, lr:(1.018e-05,)] l_pix: 1.0462e+01 
21-09-14 08:27:10.402 - INFO: [epoch:  7, iter: 428,000, lr:(1.015e-05,)] l_pix: 1.0933e+01 
21-09-14 08:28:54.586 - INFO: [epoch:  7, iter: 428,100, lr:(1.013e-05,)] l_pix: 1.1557e+01 
21-09-14 08:30:38.397 - INFO: [epoch:  7, iter: 428,200, lr:(1.010e-05,)] l_pix: 1.1757e+01 
21-09-14 08:32:22.474 - INFO: [epoch:  7, iter: 428,300, lr:(1.007e-05,)] l_pix: 1.2066e+01 
21-09-14 08:34:06.631 - INFO: [epoch:  7, iter: 428,400, lr:(1.004e-05,)] l_pix: 9.6349e+00 
21-09-14 08:35:50.815 - INFO: [epoch:  7, iter: 428,500, lr:(1.002e-05,)] l_pix: 1.2138e+01 
21-09-14 08:37:35.163 - INFO: [epoch:  7, iter: 428,600, lr:(9.990e-06,)] l_pix: 1.1741e+01 
21-09-14 08:39:19.770 - INFO: [epoch:  7, iter: 428,700, lr:(9.963e-06,)] l_pix: 1.0062e+01 
21-09-14 08:41:04.372 - INFO: [epoch:  7, iter: 428,800, lr:(9.936e-06,)] l_pix: 1.2246e+01 
21-09-14 08:42:49.005 - INFO: [epoch:  7, iter: 428,900, lr:(9.909e-06,)] l_pix: 1.1033e+01 
21-09-14 08:44:33.668 - INFO: [epoch:  7, iter: 429,000, lr:(9.881e-06,)] l_pix: 1.1216e+01 
21-09-14 08:46:18.346 - INFO: [epoch:  7, iter: 429,100, lr:(9.854e-06,)] l_pix: 1.2906e+01 
21-09-14 08:48:03.082 - INFO: [epoch:  7, iter: 429,200, lr:(9.827e-06,)] l_pix: 1.1082e+01 
21-09-14 08:49:47.563 - INFO: [epoch:  7, iter: 429,300, lr:(9.800e-06,)] l_pix: 1.0985e+01 
21-09-14 08:51:31.977 - INFO: [epoch:  7, iter: 429,400, lr:(9.773e-06,)] l_pix: 1.0724e+01 
21-09-14 08:53:16.453 - INFO: [epoch:  7, iter: 429,500, lr:(9.746e-06,)] l_pix: 1.1796e+01 
21-09-14 08:55:00.885 - INFO: [epoch:  7, iter: 429,600, lr:(9.720e-06,)] l_pix: 1.1155e+01 
21-09-14 08:56:45.518 - INFO: [epoch:  7, iter: 429,700, lr:(9.693e-06,)] l_pix: 1.1603e+01 
21-09-14 08:58:30.035 - INFO: [epoch:  7, iter: 429,800, lr:(9.666e-06,)] l_pix: 1.1818e+01 
21-09-14 09:00:14.700 - INFO: [epoch:  7, iter: 429,900, lr:(9.639e-06,)] l_pix: 1.1281e+01 
21-09-14 09:01:59.488 - INFO: [epoch:  7, iter: 430,000, lr:(9.612e-06,)] l_pix: 1.2001e+01 
21-09-14 09:04:06.261 - INFO: # Validation # PSNR: 2.8903e+01
21-09-14 09:04:06.262 - INFO: Saving models and training states.
21-09-14 09:05:52.143 - INFO: [epoch:  7, iter: 430,100, lr:(9.586e-06,)] l_pix: 1.1516e+01 
21-09-14 09:07:36.960 - INFO: [epoch:  7, iter: 430,200, lr:(9.559e-06,)] l_pix: 1.0124e+01 
21-09-14 09:09:21.830 - INFO: [epoch:  7, iter: 430,300, lr:(9.532e-06,)] l_pix: 1.1343e+01 
21-09-14 09:11:06.769 - INFO: [epoch:  7, iter: 430,400, lr:(9.506e-06,)] l_pix: 1.0233e+01 
21-09-14 09:12:51.311 - INFO: [epoch:  7, iter: 430,500, lr:(9.479e-06,)] l_pix: 1.0633e+01 
21-09-14 09:14:35.853 - INFO: [epoch:  7, iter: 430,600, lr:(9.452e-06,)] l_pix: 1.1423e+01 
21-09-14 09:16:20.257 - INFO: [epoch:  7, iter: 430,700, lr:(9.426e-06,)] l_pix: 1.2385e+01 
21-09-14 09:18:04.718 - INFO: [epoch:  7, iter: 430,800, lr:(9.400e-06,)] l_pix: 9.4887e+00 
21-09-14 09:19:49.349 - INFO: [epoch:  7, iter: 430,900, lr:(9.373e-06,)] l_pix: 1.3304e+01 
21-09-14 09:21:33.865 - INFO: [epoch:  7, iter: 431,000, lr:(9.347e-06,)] l_pix: 9.8681e+00 
21-09-14 09:23:18.255 - INFO: [epoch:  7, iter: 431,100, lr:(9.320e-06,)] l_pix: 1.0092e+01 
21-09-14 09:25:02.883 - INFO: [epoch:  7, iter: 431,200, lr:(9.294e-06,)] l_pix: 1.2321e+01 
21-09-14 09:26:47.789 - INFO: [epoch:  7, iter: 431,300, lr:(9.268e-06,)] l_pix: 1.1992e+01 
21-09-14 09:28:32.922 - INFO: [epoch:  7, iter: 431,400, lr:(9.241e-06,)] l_pix: 1.1627e+01 
21-09-14 09:30:17.804 - INFO: [epoch:  8, iter: 431,500, lr:(9.215e-06,)] l_pix: 1.1566e+01 
21-09-14 09:32:02.646 - INFO: [epoch:  8, iter: 431,600, lr:(9.189e-06,)] l_pix: 1.1710e+01 
21-09-14 09:33:47.385 - INFO: [epoch:  8, iter: 431,700, lr:(9.163e-06,)] l_pix: 1.0966e+01 
21-09-14 09:35:32.267 - INFO: [epoch:  8, iter: 431,800, lr:(9.137e-06,)] l_pix: 9.8337e+00 
21-09-14 09:37:17.196 - INFO: [epoch:  8, iter: 431,900, lr:(9.111e-06,)] l_pix: 1.2026e+01 
21-09-14 09:39:02.049 - INFO: [epoch:  8, iter: 432,000, lr:(9.085e-06,)] l_pix: 1.0189e+01 
21-09-14 09:40:46.788 - INFO: [epoch:  8, iter: 432,100, lr:(9.059e-06,)] l_pix: 1.2298e+01 
21-09-14 09:42:31.420 - INFO: [epoch:  8, iter: 432,200, lr:(9.033e-06,)] l_pix: 1.2640e+01 
21-09-14 09:44:16.015 - INFO: [epoch:  8, iter: 432,300, lr:(9.007e-06,)] l_pix: 1.1850e+01 
21-09-14 09:46:00.532 - INFO: [epoch:  8, iter: 432,400, lr:(8.981e-06,)] l_pix: 1.0975e+01 
21-09-14 09:47:45.019 - INFO: [epoch:  8, iter: 432,500, lr:(8.955e-06,)] l_pix: 1.0773e+01 
21-09-14 09:49:29.808 - INFO: [epoch:  8, iter: 432,600, lr:(8.929e-06,)] l_pix: 1.0558e+01 
21-09-14 09:51:14.750 - INFO: [epoch:  8, iter: 432,700, lr:(8.903e-06,)] l_pix: 1.2582e+01 
21-09-14 09:52:59.738 - INFO: [epoch:  8, iter: 432,800, lr:(8.878e-06,)] l_pix: 1.1712e+01 
21-09-14 09:54:44.615 - INFO: [epoch:  8, iter: 432,900, lr:(8.852e-06,)] l_pix: 1.0671e+01 
21-09-14 09:56:29.445 - INFO: [epoch:  8, iter: 433,000, lr:(8.826e-06,)] l_pix: 1.1807e+01 
21-09-14 09:58:14.394 - INFO: [epoch:  8, iter: 433,100, lr:(8.801e-06,)] l_pix: 1.0713e+01 
21-09-14 09:59:59.028 - INFO: [epoch:  8, iter: 433,200, lr:(8.775e-06,)] l_pix: 1.2121e+01 
21-09-14 10:01:43.754 - INFO: [epoch:  8, iter: 433,300, lr:(8.749e-06,)] l_pix: 1.3616e+01 
21-09-14 10:03:28.072 - INFO: [epoch:  8, iter: 433,400, lr:(8.724e-06,)] l_pix: 1.0177e+01 
21-09-14 10:05:12.531 - INFO: [epoch:  8, iter: 433,500, lr:(8.698e-06,)] l_pix: 1.5165e+01 
21-09-14 10:06:57.025 - INFO: [epoch:  8, iter: 433,600, lr:(8.673e-06,)] l_pix: 1.2010e+01 
21-09-14 10:08:41.614 - INFO: [epoch:  8, iter: 433,700, lr:(8.647e-06,)] l_pix: 1.0206e+01 
21-09-14 10:10:26.085 - INFO: [epoch:  8, iter: 433,800, lr:(8.622e-06,)] l_pix: 1.2257e+01 
21-09-14 10:12:10.869 - INFO: [epoch:  8, iter: 433,900, lr:(8.597e-06,)] l_pix: 1.1836e+01 
21-09-14 10:13:55.834 - INFO: [epoch:  8, iter: 434,000, lr:(8.571e-06,)] l_pix: 1.0020e+01 
21-09-14 10:15:40.720 - INFO: [epoch:  8, iter: 434,100, lr:(8.546e-06,)] l_pix: 1.1217e+01 
21-09-14 10:17:25.503 - INFO: [epoch:  8, iter: 434,200, lr:(8.521e-06,)] l_pix: 1.2336e+01 
21-09-14 10:19:10.505 - INFO: [epoch:  8, iter: 434,300, lr:(8.496e-06,)] l_pix: 1.1101e+01 
21-09-14 10:20:55.377 - INFO: [epoch:  8, iter: 434,400, lr:(8.470e-06,)] l_pix: 1.2241e+01 
21-09-14 10:22:39.952 - INFO: [epoch:  8, iter: 434,500, lr:(8.445e-06,)] l_pix: 1.0576e+01 
21-09-14 10:24:24.451 - INFO: [epoch:  8, iter: 434,600, lr:(8.420e-06,)] l_pix: 1.1445e+01 
21-09-14 10:26:08.763 - INFO: [epoch:  8, iter: 434,700, lr:(8.395e-06,)] l_pix: 1.2862e+01 
21-09-14 10:27:53.154 - INFO: [epoch:  8, iter: 434,800, lr:(8.370e-06,)] l_pix: 1.1122e+01 
21-09-14 10:29:37.843 - INFO: [epoch:  8, iter: 434,900, lr:(8.345e-06,)] l_pix: 9.8123e+00 
21-09-14 10:31:22.355 - INFO: [epoch:  8, iter: 435,000, lr:(8.320e-06,)] l_pix: 1.2090e+01 
21-09-14 10:33:27.631 - INFO: # Validation # PSNR: 2.8883e+01
21-09-14 10:33:27.631 - INFO: Saving models and training states.
21-09-14 10:35:12.876 - INFO: [epoch:  8, iter: 435,100, lr:(8.295e-06,)] l_pix: 1.1412e+01 
21-09-14 10:36:57.705 - INFO: [epoch:  8, iter: 435,200, lr:(8.270e-06,)] l_pix: 9.8040e+00 
21-09-14 10:38:42.624 - INFO: [epoch:  8, iter: 435,300, lr:(8.246e-06,)] l_pix: 1.2340e+01 
21-09-14 10:40:27.328 - INFO: [epoch:  8, iter: 435,400, lr:(8.221e-06,)] l_pix: 1.2593e+01 
21-09-14 10:42:12.091 - INFO: [epoch:  8, iter: 435,500, lr:(8.196e-06,)] l_pix: 9.8621e+00 
21-09-14 10:43:56.856 - INFO: [epoch:  8, iter: 435,600, lr:(8.171e-06,)] l_pix: 1.2667e+01 
21-09-14 10:45:41.736 - INFO: [epoch:  8, iter: 435,700, lr:(8.146e-06,)] l_pix: 1.0975e+01 
21-09-14 10:47:26.108 - INFO: [epoch:  8, iter: 435,800, lr:(8.122e-06,)] l_pix: 1.0526e+01 
21-09-14 10:49:10.553 - INFO: [epoch:  8, iter: 435,900, lr:(8.097e-06,)] l_pix: 1.1577e+01 
21-09-14 10:50:54.906 - INFO: [epoch:  8, iter: 436,000, lr:(8.073e-06,)] l_pix: 1.1170e+01 
21-09-14 10:52:39.284 - INFO: [epoch:  8, iter: 436,100, lr:(8.048e-06,)] l_pix: 1.1308e+01 
21-09-14 10:54:23.359 - INFO: [epoch:  8, iter: 436,200, lr:(8.023e-06,)] l_pix: 1.0549e+01 
21-09-14 10:56:07.850 - INFO: [epoch:  8, iter: 436,300, lr:(7.999e-06,)] l_pix: 9.6306e+00 
21-09-14 10:57:52.872 - INFO: [epoch:  8, iter: 436,400, lr:(7.975e-06,)] l_pix: 1.1506e+01 
21-09-14 10:59:37.769 - INFO: [epoch:  8, iter: 436,500, lr:(7.950e-06,)] l_pix: 1.1691e+01 
21-09-14 11:01:22.596 - INFO: [epoch:  8, iter: 436,600, lr:(7.926e-06,)] l_pix: 1.0695e+01 
21-09-14 11:03:07.514 - INFO: [epoch:  8, iter: 436,700, lr:(7.901e-06,)] l_pix: 1.1273e+01 
21-09-14 11:04:52.317 - INFO: [epoch:  8, iter: 436,800, lr:(7.877e-06,)] l_pix: 1.0179e+01 
21-09-14 11:06:37.226 - INFO: [epoch:  8, iter: 436,900, lr:(7.853e-06,)] l_pix: 1.0008e+01 
21-09-14 11:08:21.943 - INFO: [epoch:  8, iter: 437,000, lr:(7.829e-06,)] l_pix: 1.0116e+01 
21-09-14 11:10:06.649 - INFO: [epoch:  8, iter: 437,100, lr:(7.804e-06,)] l_pix: 1.2563e+01 
21-09-14 11:11:50.964 - INFO: [epoch:  8, iter: 437,200, lr:(7.780e-06,)] l_pix: 1.1173e+01 
21-09-14 11:13:35.331 - INFO: [epoch:  8, iter: 437,300, lr:(7.756e-06,)] l_pix: 1.1387e+01 
21-09-14 11:15:19.951 - INFO: [epoch:  8, iter: 437,400, lr:(7.732e-06,)] l_pix: 1.1569e+01 
21-09-14 11:17:04.365 - INFO: [epoch:  8, iter: 437,500, lr:(7.708e-06,)] l_pix: 1.0086e+01 
21-09-14 11:18:48.731 - INFO: [epoch:  8, iter: 437,600, lr:(7.684e-06,)] l_pix: 1.0205e+01 
21-09-14 11:20:32.948 - INFO: [epoch:  8, iter: 437,700, lr:(7.660e-06,)] l_pix: 1.2846e+01 
21-09-14 11:22:16.926 - INFO: [epoch:  8, iter: 437,800, lr:(7.636e-06,)] l_pix: 1.0651e+01 
21-09-14 11:24:01.451 - INFO: [epoch:  8, iter: 437,900, lr:(7.612e-06,)] l_pix: 1.1131e+01 
21-09-14 11:25:46.335 - INFO: [epoch:  8, iter: 438,000, lr:(7.588e-06,)] l_pix: 1.1016e+01 
21-09-14 11:27:31.200 - INFO: [epoch:  8, iter: 438,100, lr:(7.564e-06,)] l_pix: 1.2318e+01 
21-09-14 11:29:15.775 - INFO: [epoch:  8, iter: 438,200, lr:(7.541e-06,)] l_pix: 1.0895e+01 
21-09-14 11:31:00.432 - INFO: [epoch:  8, iter: 438,300, lr:(7.517e-06,)] l_pix: 1.0228e+01 
21-09-14 11:32:45.154 - INFO: [epoch:  8, iter: 438,400, lr:(7.493e-06,)] l_pix: 1.2157e+01 
21-09-14 11:34:29.695 - INFO: [epoch:  8, iter: 438,500, lr:(7.470e-06,)] l_pix: 1.0974e+01 
21-09-14 11:36:14.353 - INFO: [epoch:  8, iter: 438,600, lr:(7.446e-06,)] l_pix: 1.0383e+01 
21-09-14 11:37:58.982 - INFO: [epoch:  8, iter: 438,700, lr:(7.422e-06,)] l_pix: 1.0871e+01 
21-09-14 11:39:43.229 - INFO: [epoch:  8, iter: 438,800, lr:(7.399e-06,)] l_pix: 1.2048e+01 
21-09-14 11:41:27.470 - INFO: [epoch:  8, iter: 438,900, lr:(7.375e-06,)] l_pix: 1.1490e+01 
21-09-14 11:43:11.800 - INFO: [epoch:  8, iter: 439,000, lr:(7.352e-06,)] l_pix: 1.1252e+01 
21-09-14 11:44:56.136 - INFO: [epoch:  8, iter: 439,100, lr:(7.328e-06,)] l_pix: 1.0205e+01 
21-09-14 11:46:40.597 - INFO: [epoch:  8, iter: 439,200, lr:(7.305e-06,)] l_pix: 1.0343e+01 
21-09-14 11:48:25.156 - INFO: [epoch:  8, iter: 439,300, lr:(7.281e-06,)] l_pix: 1.2299e+01 
21-09-14 11:50:10.004 - INFO: [epoch:  8, iter: 439,400, lr:(7.258e-06,)] l_pix: 1.1779e+01 
21-09-14 11:51:54.896 - INFO: [epoch:  8, iter: 439,500, lr:(7.235e-06,)] l_pix: 1.2213e+01 
21-09-14 11:53:39.663 - INFO: [epoch:  8, iter: 439,600, lr:(7.211e-06,)] l_pix: 1.3711e+01 
21-09-14 11:55:24.450 - INFO: [epoch:  8, iter: 439,700, lr:(7.188e-06,)] l_pix: 1.3736e+01 
21-09-14 11:57:09.330 - INFO: [epoch:  8, iter: 439,800, lr:(7.165e-06,)] l_pix: 1.0787e+01 
21-09-14 11:58:54.075 - INFO: [epoch:  8, iter: 439,900, lr:(7.142e-06,)] l_pix: 1.0014e+01 
21-09-14 12:00:38.784 - INFO: [epoch:  8, iter: 440,000, lr:(7.119e-06,)] l_pix: 1.1690e+01 
21-09-14 12:02:43.753 - INFO: # Validation # PSNR: 2.8900e+01
21-09-14 12:02:43.754 - INFO: Saving models and training states.
21-09-14 12:04:29.041 - INFO: [epoch:  8, iter: 440,100, lr:(7.096e-06,)] l_pix: 1.0314e+01 
21-09-14 12:06:13.741 - INFO: [epoch:  8, iter: 440,200, lr:(7.072e-06,)] l_pix: 1.1413e+01 
21-09-14 12:07:58.523 - INFO: [epoch:  8, iter: 440,300, lr:(7.049e-06,)] l_pix: 1.2282e+01 
21-09-14 12:09:42.952 - INFO: [epoch:  8, iter: 440,400, lr:(7.026e-06,)] l_pix: 1.1912e+01 
21-09-14 12:11:27.478 - INFO: [epoch:  8, iter: 440,500, lr:(7.003e-06,)] l_pix: 1.0457e+01 
21-09-14 12:13:12.521 - INFO: [epoch:  8, iter: 440,600, lr:(6.981e-06,)] l_pix: 1.1953e+01 
21-09-14 12:14:57.579 - INFO: [epoch:  8, iter: 440,700, lr:(6.958e-06,)] l_pix: 1.1201e+01 
21-09-14 12:16:42.494 - INFO: [epoch:  8, iter: 440,800, lr:(6.935e-06,)] l_pix: 1.0874e+01 
21-09-14 12:18:27.364 - INFO: [epoch:  8, iter: 440,900, lr:(6.912e-06,)] l_pix: 1.1603e+01 
21-09-14 12:20:12.247 - INFO: [epoch:  8, iter: 441,000, lr:(6.889e-06,)] l_pix: 1.1073e+01 
21-09-14 12:21:57.017 - INFO: [epoch:  8, iter: 441,100, lr:(6.867e-06,)] l_pix: 1.1817e+01 
21-09-14 12:23:41.701 - INFO: [epoch:  8, iter: 441,200, lr:(6.844e-06,)] l_pix: 1.0129e+01 
21-09-14 12:25:26.002 - INFO: [epoch:  8, iter: 441,300, lr:(6.821e-06,)] l_pix: 1.2329e+01 
21-09-14 12:27:10.458 - INFO: [epoch:  8, iter: 441,400, lr:(6.799e-06,)] l_pix: 9.9559e+00 
21-09-14 12:28:55.060 - INFO: [epoch:  8, iter: 441,500, lr:(6.776e-06,)] l_pix: 1.0565e+01 
21-09-14 12:30:39.586 - INFO: [epoch:  8, iter: 441,600, lr:(6.753e-06,)] l_pix: 1.1011e+01 
21-09-14 12:32:24.042 - INFO: [epoch:  8, iter: 441,700, lr:(6.731e-06,)] l_pix: 1.1399e+01 
21-09-14 12:34:08.696 - INFO: [epoch:  8, iter: 441,800, lr:(6.708e-06,)] l_pix: 1.1756e+01 
21-09-14 12:35:53.805 - INFO: [epoch:  8, iter: 441,900, lr:(6.686e-06,)] l_pix: 1.1755e+01 
21-09-14 12:37:38.664 - INFO: [epoch:  8, iter: 442,000, lr:(6.664e-06,)] l_pix: 1.0637e+01 
21-09-14 12:39:23.536 - INFO: [epoch:  8, iter: 442,100, lr:(6.641e-06,)] l_pix: 1.0279e+01 
21-09-14 12:41:08.274 - INFO: [epoch:  8, iter: 442,200, lr:(6.619e-06,)] l_pix: 1.3457e+01 
21-09-14 12:42:52.901 - INFO: [epoch:  8, iter: 442,300, lr:(6.597e-06,)] l_pix: 1.1220e+01 
21-09-14 12:44:37.623 - INFO: [epoch:  8, iter: 442,400, lr:(6.574e-06,)] l_pix: 8.8060e+00 
21-09-14 12:46:22.277 - INFO: [epoch:  8, iter: 442,500, lr:(6.552e-06,)] l_pix: 1.1740e+01 
21-09-14 12:48:06.720 - INFO: [epoch:  8, iter: 442,600, lr:(6.530e-06,)] l_pix: 1.0005e+01 
21-09-14 12:49:51.432 - INFO: [epoch:  8, iter: 442,700, lr:(6.508e-06,)] l_pix: 1.2415e+01 
21-09-14 12:51:36.079 - INFO: [epoch:  8, iter: 442,800, lr:(6.486e-06,)] l_pix: 9.8232e+00 
21-09-14 12:53:20.489 - INFO: [epoch:  8, iter: 442,900, lr:(6.464e-06,)] l_pix: 1.0504e+01 
21-09-14 12:55:05.143 - INFO: [epoch:  8, iter: 443,000, lr:(6.442e-06,)] l_pix: 1.0205e+01 
21-09-14 12:56:49.485 - INFO: [epoch:  8, iter: 443,100, lr:(6.420e-06,)] l_pix: 1.4924e+01 
21-09-14 12:58:33.810 - INFO: [epoch:  8, iter: 443,200, lr:(6.398e-06,)] l_pix: 1.1577e+01 
21-09-14 13:00:18.270 - INFO: [epoch:  8, iter: 443,300, lr:(6.376e-06,)] l_pix: 9.6701e+00 
21-09-14 13:02:02.642 - INFO: [epoch:  8, iter: 443,400, lr:(6.354e-06,)] l_pix: 1.0866e+01 
21-09-14 13:03:47.173 - INFO: [epoch:  8, iter: 443,500, lr:(6.332e-06,)] l_pix: 9.8090e+00 
21-09-14 13:05:31.662 - INFO: [epoch:  8, iter: 443,600, lr:(6.310e-06,)] l_pix: 1.1770e+01 
21-09-14 13:07:15.848 - INFO: [epoch:  8, iter: 443,700, lr:(6.288e-06,)] l_pix: 1.0314e+01 
21-09-14 13:08:59.620 - INFO: [epoch:  8, iter: 443,800, lr:(6.267e-06,)] l_pix: 1.0991e+01 
21-09-14 13:10:44.100 - INFO: [epoch:  8, iter: 443,900, lr:(6.245e-06,)] l_pix: 1.0290e+01 
21-09-14 13:12:28.826 - INFO: [epoch:  8, iter: 444,000, lr:(6.223e-06,)] l_pix: 1.0681e+01 
21-09-14 13:14:13.740 - INFO: [epoch:  8, iter: 444,100, lr:(6.202e-06,)] l_pix: 9.5487e+00 
21-09-14 13:15:58.361 - INFO: [epoch:  8, iter: 444,200, lr:(6.180e-06,)] l_pix: 1.2592e+01 
21-09-14 13:17:43.153 - INFO: [epoch:  8, iter: 444,300, lr:(6.159e-06,)] l_pix: 1.0676e+01 
21-09-14 13:19:27.758 - INFO: [epoch:  8, iter: 444,400, lr:(6.137e-06,)] l_pix: 1.0562e+01 
21-09-14 13:21:12.582 - INFO: [epoch:  8, iter: 444,500, lr:(6.116e-06,)] l_pix: 1.0975e+01 
21-09-14 13:22:57.513 - INFO: [epoch:  8, iter: 444,600, lr:(6.094e-06,)] l_pix: 1.2477e+01 
21-09-14 13:24:42.111 - INFO: [epoch:  8, iter: 444,700, lr:(6.073e-06,)] l_pix: 1.0897e+01 
21-09-14 13:26:26.222 - INFO: [epoch:  8, iter: 444,800, lr:(6.051e-06,)] l_pix: 1.1629e+01 
21-09-14 13:28:10.472 - INFO: [epoch:  8, iter: 444,900, lr:(6.030e-06,)] l_pix: 1.1036e+01 
21-09-14 13:29:55.104 - INFO: [epoch:  8, iter: 445,000, lr:(6.009e-06,)] l_pix: 1.0329e+01 
21-09-14 13:32:00.052 - INFO: # Validation # PSNR: 2.8894e+01
21-09-14 13:32:00.053 - INFO: Saving models and training states.
21-09-14 13:33:45.322 - INFO: [epoch:  8, iter: 445,100, lr:(5.988e-06,)] l_pix: 9.6386e+00 
21-09-14 13:35:29.674 - INFO: [epoch:  8, iter: 445,200, lr:(5.966e-06,)] l_pix: 1.2312e+01 
21-09-14 13:37:13.852 - INFO: [epoch:  8, iter: 445,300, lr:(5.945e-06,)] l_pix: 1.1084e+01 
21-09-14 13:38:58.391 - INFO: [epoch:  8, iter: 445,400, lr:(5.924e-06,)] l_pix: 1.1470e+01 
21-09-14 13:40:43.431 - INFO: [epoch:  8, iter: 445,500, lr:(5.903e-06,)] l_pix: 1.0934e+01 
21-09-14 13:42:28.121 - INFO: [epoch:  8, iter: 445,600, lr:(5.882e-06,)] l_pix: 1.0378e+01 
21-09-14 13:44:12.732 - INFO: [epoch:  8, iter: 445,700, lr:(5.861e-06,)] l_pix: 1.2077e+01 
21-09-14 13:45:57.305 - INFO: [epoch:  8, iter: 445,800, lr:(5.840e-06,)] l_pix: 1.2774e+01 
21-09-14 13:47:42.304 - INFO: [epoch:  8, iter: 445,900, lr:(5.819e-06,)] l_pix: 1.0532e+01 
21-09-14 13:49:27.174 - INFO: [epoch:  8, iter: 446,000, lr:(5.798e-06,)] l_pix: 9.4060e+00 
21-09-14 13:51:11.869 - INFO: [epoch:  8, iter: 446,100, lr:(5.777e-06,)] l_pix: 1.2700e+01 
21-09-14 13:52:56.550 - INFO: [epoch:  8, iter: 446,200, lr:(5.756e-06,)] l_pix: 1.0034e+01 
21-09-14 13:54:41.352 - INFO: [epoch:  8, iter: 446,300, lr:(5.735e-06,)] l_pix: 1.0515e+01 
21-09-14 13:56:25.930 - INFO: [epoch:  8, iter: 446,400, lr:(5.715e-06,)] l_pix: 9.9089e+00 
21-09-14 13:58:10.512 - INFO: [epoch:  8, iter: 446,500, lr:(5.694e-06,)] l_pix: 1.0355e+01 
21-09-14 13:59:54.815 - INFO: [epoch:  8, iter: 446,600, lr:(5.673e-06,)] l_pix: 9.7326e+00 
21-09-14 14:01:39.138 - INFO: [epoch:  8, iter: 446,700, lr:(5.652e-06,)] l_pix: 9.7058e+00 
21-09-14 14:03:23.666 - INFO: [epoch:  8, iter: 446,800, lr:(5.632e-06,)] l_pix: 1.1928e+01 
21-09-14 14:05:08.195 - INFO: [epoch:  8, iter: 446,900, lr:(5.611e-06,)] l_pix: 1.2046e+01 
21-09-14 14:06:52.644 - INFO: [epoch:  8, iter: 447,000, lr:(5.591e-06,)] l_pix: 1.0834e+01 
21-09-14 14:08:37.816 - INFO: [epoch:  8, iter: 447,100, lr:(5.570e-06,)] l_pix: 1.2181e+01 
21-09-14 14:10:22.884 - INFO: [epoch:  8, iter: 447,200, lr:(5.550e-06,)] l_pix: 1.0025e+01 
21-09-14 14:12:07.749 - INFO: [epoch:  8, iter: 447,300, lr:(5.529e-06,)] l_pix: 1.0648e+01 
21-09-14 14:13:52.657 - INFO: [epoch:  8, iter: 447,400, lr:(5.509e-06,)] l_pix: 1.0239e+01 
21-09-14 14:15:37.474 - INFO: [epoch:  8, iter: 447,500, lr:(5.489e-06,)] l_pix: 1.2306e+01 
21-09-14 14:17:22.317 - INFO: [epoch:  8, iter: 447,600, lr:(5.468e-06,)] l_pix: 1.1149e+01 
21-09-14 14:19:07.082 - INFO: [epoch:  8, iter: 447,700, lr:(5.448e-06,)] l_pix: 1.1636e+01 
21-09-14 14:20:51.766 - INFO: [epoch:  8, iter: 447,800, lr:(5.428e-06,)] l_pix: 1.2081e+01 
21-09-14 14:22:36.175 - INFO: [epoch:  8, iter: 447,900, lr:(5.407e-06,)] l_pix: 1.2303e+01 
21-09-14 14:24:20.646 - INFO: [epoch:  8, iter: 448,000, lr:(5.387e-06,)] l_pix: 9.9267e+00 
21-09-14 14:26:05.288 - INFO: [epoch:  8, iter: 448,100, lr:(5.367e-06,)] l_pix: 1.0346e+01 
21-09-14 14:27:49.967 - INFO: [epoch:  8, iter: 448,200, lr:(5.347e-06,)] l_pix: 1.0796e+01 
21-09-14 14:29:34.595 - INFO: [epoch:  8, iter: 448,300, lr:(5.327e-06,)] l_pix: 9.6600e+00 
21-09-14 14:31:19.174 - INFO: [epoch:  8, iter: 448,400, lr:(5.307e-06,)] l_pix: 1.1799e+01 
21-09-14 14:33:04.252 - INFO: [epoch:  8, iter: 448,500, lr:(5.287e-06,)] l_pix: 1.0736e+01 
21-09-14 14:34:49.432 - INFO: [epoch:  8, iter: 448,600, lr:(5.267e-06,)] l_pix: 1.1767e+01 
21-09-14 14:36:34.240 - INFO: [epoch:  8, iter: 448,700, lr:(5.247e-06,)] l_pix: 1.1941e+01 
21-09-14 14:38:18.931 - INFO: [epoch:  8, iter: 448,800, lr:(5.227e-06,)] l_pix: 1.0681e+01 
21-09-14 14:40:03.909 - INFO: [epoch:  8, iter: 448,900, lr:(5.207e-06,)] l_pix: 1.1147e+01 
21-09-14 14:41:48.513 - INFO: [epoch:  8, iter: 449,000, lr:(5.188e-06,)] l_pix: 1.0850e+01 
21-09-14 14:43:33.169 - INFO: [epoch:  8, iter: 449,100, lr:(5.168e-06,)] l_pix: 1.3718e+01 
21-09-14 14:45:17.530 - INFO: [epoch:  8, iter: 449,200, lr:(5.148e-06,)] l_pix: 1.1432e+01 
21-09-14 14:47:01.877 - INFO: [epoch:  8, iter: 449,300, lr:(5.128e-06,)] l_pix: 1.0626e+01 
21-09-14 14:48:46.125 - INFO: [epoch:  8, iter: 449,400, lr:(5.109e-06,)] l_pix: 1.0825e+01 
21-09-14 14:50:30.439 - INFO: [epoch:  8, iter: 449,500, lr:(5.089e-06,)] l_pix: 9.7179e+00 
21-09-14 14:52:14.957 - INFO: [epoch:  8, iter: 449,600, lr:(5.070e-06,)] l_pix: 9.9397e+00 
21-09-14 14:53:59.365 - INFO: [epoch:  8, iter: 449,700, lr:(5.050e-06,)] l_pix: 1.2777e+01 
21-09-14 14:55:43.370 - INFO: [epoch:  8, iter: 449,800, lr:(5.031e-06,)] l_pix: 9.7835e+00 
21-09-14 14:57:27.557 - INFO: [epoch:  8, iter: 449,900, lr:(5.011e-06,)] l_pix: 1.0008e+01 
21-09-14 14:59:12.296 - INFO: [epoch:  8, iter: 450,000, lr:(4.992e-06,)] l_pix: 9.6389e+00 
21-09-14 15:01:18.308 - INFO: # Validation # PSNR: 2.8889e+01
21-09-14 15:01:18.308 - INFO: Saving models and training states.
21-09-14 15:03:03.704 - INFO: [epoch:  8, iter: 450,100, lr:(4.972e-06,)] l_pix: 1.1418e+01 
21-09-14 15:04:48.409 - INFO: [epoch:  8, iter: 450,200, lr:(4.953e-06,)] l_pix: 9.9161e+00 
21-09-14 15:06:32.702 - INFO: [epoch:  8, iter: 450,300, lr:(4.934e-06,)] l_pix: 1.1457e+01 
21-09-14 15:08:17.217 - INFO: [epoch:  8, iter: 450,400, lr:(4.914e-06,)] l_pix: 1.0956e+01 
21-09-14 15:10:01.696 - INFO: [epoch:  8, iter: 450,500, lr:(4.895e-06,)] l_pix: 1.1934e+01 
21-09-14 15:11:46.202 - INFO: [epoch:  8, iter: 450,600, lr:(4.876e-06,)] l_pix: 1.0950e+01 
21-09-14 15:13:30.323 - INFO: [epoch:  8, iter: 450,700, lr:(4.857e-06,)] l_pix: 1.0976e+01 
21-09-14 15:15:14.374 - INFO: [epoch:  8, iter: 450,800, lr:(4.838e-06,)] l_pix: 1.1719e+01 
21-09-14 15:16:58.551 - INFO: [epoch:  8, iter: 450,900, lr:(4.819e-06,)] l_pix: 1.2570e+01 
21-09-14 15:18:42.735 - INFO: [epoch:  8, iter: 451,000, lr:(4.800e-06,)] l_pix: 9.2751e+00 
21-09-14 15:20:27.113 - INFO: [epoch:  8, iter: 451,100, lr:(4.781e-06,)] l_pix: 1.2248e+01 
21-09-14 15:22:11.451 - INFO: [epoch:  8, iter: 451,200, lr:(4.762e-06,)] l_pix: 9.7975e+00 
21-09-14 15:23:55.423 - INFO: [epoch:  8, iter: 451,300, lr:(4.743e-06,)] l_pix: 1.2885e+01 
21-09-14 15:25:40.507 - INFO: [epoch:  8, iter: 451,400, lr:(4.724e-06,)] l_pix: 1.0407e+01 
21-09-14 15:27:25.670 - INFO: [epoch:  8, iter: 451,500, lr:(4.705e-06,)] l_pix: 1.0410e+01 
21-09-14 15:29:10.862 - INFO: [epoch:  8, iter: 451,600, lr:(4.686e-06,)] l_pix: 1.0444e+01 
21-09-14 15:30:55.379 - INFO: [epoch:  8, iter: 451,700, lr:(4.667e-06,)] l_pix: 9.6725e+00 
21-09-14 15:32:39.593 - INFO: [epoch:  8, iter: 451,800, lr:(4.648e-06,)] l_pix: 1.2152e+01 
21-09-14 15:34:23.674 - INFO: [epoch:  8, iter: 451,900, lr:(4.630e-06,)] l_pix: 1.2248e+01 
21-09-14 15:36:08.096 - INFO: [epoch:  8, iter: 452,000, lr:(4.611e-06,)] l_pix: 1.1099e+01 
21-09-14 15:37:52.850 - INFO: [epoch:  8, iter: 452,100, lr:(4.592e-06,)] l_pix: 9.4400e+00 
21-09-14 15:39:37.470 - INFO: [epoch:  8, iter: 452,200, lr:(4.574e-06,)] l_pix: 1.1212e+01 
21-09-14 15:41:21.768 - INFO: [epoch:  8, iter: 452,300, lr:(4.555e-06,)] l_pix: 1.1930e+01 
21-09-14 15:43:06.562 - INFO: [epoch:  8, iter: 452,400, lr:(4.537e-06,)] l_pix: 1.1397e+01 
21-09-14 15:44:51.646 - INFO: [epoch:  8, iter: 452,500, lr:(4.518e-06,)] l_pix: 9.9462e+00 
21-09-14 15:46:36.776 - INFO: [epoch:  8, iter: 452,600, lr:(4.500e-06,)] l_pix: 1.3452e+01 
21-09-14 15:48:21.627 - INFO: [epoch:  8, iter: 452,700, lr:(4.481e-06,)] l_pix: 1.0042e+01 
21-09-14 15:50:06.471 - INFO: [epoch:  8, iter: 452,800, lr:(4.463e-06,)] l_pix: 1.2719e+01 
21-09-14 15:51:51.345 - INFO: [epoch:  8, iter: 452,900, lr:(4.445e-06,)] l_pix: 1.1872e+01 
21-09-14 15:53:35.922 - INFO: [epoch:  8, iter: 453,000, lr:(4.426e-06,)] l_pix: 1.2326e+01 
21-09-14 15:55:20.561 - INFO: [epoch:  8, iter: 453,100, lr:(4.408e-06,)] l_pix: 1.0688e+01 
21-09-14 15:57:05.118 - INFO: [epoch:  8, iter: 453,200, lr:(4.390e-06,)] l_pix: 1.1075e+01 
21-09-14 15:58:49.672 - INFO: [epoch:  8, iter: 453,300, lr:(4.372e-06,)] l_pix: 1.0755e+01 
21-09-14 16:00:34.472 - INFO: [epoch:  8, iter: 453,400, lr:(4.354e-06,)] l_pix: 1.3693e+01 
21-09-14 16:02:19.065 - INFO: [epoch:  8, iter: 453,500, lr:(4.336e-06,)] l_pix: 1.1465e+01 
21-09-14 16:04:03.583 - INFO: [epoch:  8, iter: 453,600, lr:(4.317e-06,)] l_pix: 1.1646e+01 
21-09-14 16:05:48.354 - INFO: [epoch:  8, iter: 453,700, lr:(4.299e-06,)] l_pix: 1.2538e+01 
21-09-14 16:07:33.040 - INFO: [epoch:  8, iter: 453,800, lr:(4.281e-06,)] l_pix: 1.0501e+01 
21-09-14 16:09:16.962 - INFO: [epoch:  8, iter: 453,900, lr:(4.263e-06,)] l_pix: 1.1557e+01 
21-09-14 16:11:00.966 - INFO: [epoch:  8, iter: 454,000, lr:(4.246e-06,)] l_pix: 1.0507e+01 
21-09-14 16:12:44.988 - INFO: [epoch:  8, iter: 454,100, lr:(4.228e-06,)] l_pix: 1.4078e+01 
21-09-14 16:14:29.086 - INFO: [epoch:  8, iter: 454,200, lr:(4.210e-06,)] l_pix: 1.0150e+01 
21-09-14 16:16:13.302 - INFO: [epoch:  8, iter: 454,300, lr:(4.192e-06,)] l_pix: 1.1118e+01 
21-09-14 16:17:57.592 - INFO: [epoch:  8, iter: 454,400, lr:(4.174e-06,)] l_pix: 1.1813e+01 
21-09-14 16:19:41.565 - INFO: [epoch:  8, iter: 454,500, lr:(4.157e-06,)] l_pix: 1.2183e+01 
21-09-14 16:21:25.529 - INFO: [epoch:  8, iter: 454,600, lr:(4.139e-06,)] l_pix: 8.9229e+00 
21-09-14 16:23:09.836 - INFO: [epoch:  8, iter: 454,700, lr:(4.121e-06,)] l_pix: 1.3921e+01 
21-09-14 16:24:53.887 - INFO: [epoch:  8, iter: 454,800, lr:(4.104e-06,)] l_pix: 1.0234e+01 
21-09-14 16:26:38.019 - INFO: [epoch:  8, iter: 454,900, lr:(4.086e-06,)] l_pix: 1.1945e+01 
21-09-14 16:28:22.110 - INFO: [epoch:  8, iter: 455,000, lr:(4.068e-06,)] l_pix: 1.2048e+01 
21-09-14 16:30:27.571 - INFO: # Validation # PSNR: 2.8884e+01
21-09-14 16:30:27.571 - INFO: Saving models and training states.
21-09-14 16:32:13.143 - INFO: [epoch:  8, iter: 455,100, lr:(4.051e-06,)] l_pix: 1.1717e+01 
21-09-14 16:33:57.525 - INFO: [epoch:  8, iter: 455,200, lr:(4.034e-06,)] l_pix: 1.0551e+01 
21-09-14 16:35:41.745 - INFO: [epoch:  8, iter: 455,300, lr:(4.016e-06,)] l_pix: 8.7997e+00 
21-09-14 16:37:26.069 - INFO: [epoch:  8, iter: 455,400, lr:(3.999e-06,)] l_pix: 1.2431e+01 
21-09-14 16:39:10.269 - INFO: [epoch:  8, iter: 455,500, lr:(3.981e-06,)] l_pix: 9.8556e+00 
21-09-14 16:40:54.503 - INFO: [epoch:  8, iter: 455,600, lr:(3.964e-06,)] l_pix: 1.1031e+01 
21-09-14 16:42:38.805 - INFO: [epoch:  8, iter: 455,700, lr:(3.947e-06,)] l_pix: 1.1296e+01 
21-09-14 16:44:22.983 - INFO: [epoch:  8, iter: 455,800, lr:(3.930e-06,)] l_pix: 1.0043e+01 
21-09-14 16:46:07.118 - INFO: [epoch:  8, iter: 455,900, lr:(3.912e-06,)] l_pix: 1.0593e+01 
21-09-14 16:47:51.321 - INFO: [epoch:  8, iter: 456,000, lr:(3.895e-06,)] l_pix: 1.3137e+01 
21-09-14 16:49:35.389 - INFO: [epoch:  8, iter: 456,100, lr:(3.878e-06,)] l_pix: 1.0639e+01 
21-09-14 16:51:19.584 - INFO: [epoch:  8, iter: 456,200, lr:(3.861e-06,)] l_pix: 1.1084e+01 
21-09-14 16:53:04.088 - INFO: [epoch:  8, iter: 456,300, lr:(3.844e-06,)] l_pix: 9.3804e+00 
21-09-14 16:54:48.370 - INFO: [epoch:  8, iter: 456,400, lr:(3.827e-06,)] l_pix: 1.0300e+01 
21-09-14 16:56:32.524 - INFO: [epoch:  8, iter: 456,500, lr:(3.810e-06,)] l_pix: 1.2631e+01 
21-09-14 16:58:16.758 - INFO: [epoch:  8, iter: 456,600, lr:(3.793e-06,)] l_pix: 1.1613e+01 
21-09-14 17:00:01.064 - INFO: [epoch:  8, iter: 456,700, lr:(3.776e-06,)] l_pix: 8.9240e+00 
21-09-14 17:01:45.314 - INFO: [epoch:  8, iter: 456,800, lr:(3.759e-06,)] l_pix: 1.2557e+01 
21-09-14 17:03:29.634 - INFO: [epoch:  8, iter: 456,900, lr:(3.742e-06,)] l_pix: 9.2766e+00 
21-09-14 17:05:13.985 - INFO: [epoch:  8, iter: 457,000, lr:(3.726e-06,)] l_pix: 1.1248e+01 
21-09-14 17:06:58.220 - INFO: [epoch:  8, iter: 457,100, lr:(3.709e-06,)] l_pix: 1.3224e+01 
21-09-14 17:08:42.443 - INFO: [epoch:  8, iter: 457,200, lr:(3.692e-06,)] l_pix: 1.1862e+01 
21-09-14 17:10:26.749 - INFO: [epoch:  8, iter: 457,300, lr:(3.676e-06,)] l_pix: 1.0408e+01 
21-09-14 17:12:11.124 - INFO: [epoch:  8, iter: 457,400, lr:(3.659e-06,)] l_pix: 1.2109e+01 
21-09-14 17:13:55.485 - INFO: [epoch:  8, iter: 457,500, lr:(3.642e-06,)] l_pix: 1.2273e+01 
21-09-14 17:15:39.826 - INFO: [epoch:  8, iter: 457,600, lr:(3.626e-06,)] l_pix: 1.1754e+01 
21-09-14 17:17:24.176 - INFO: [epoch:  8, iter: 457,700, lr:(3.609e-06,)] l_pix: 1.0305e+01 
21-09-14 17:19:08.333 - INFO: [epoch:  8, iter: 457,800, lr:(3.593e-06,)] l_pix: 1.1762e+01 
21-09-14 17:20:52.544 - INFO: [epoch:  8, iter: 457,900, lr:(3.576e-06,)] l_pix: 9.4363e+00 
21-09-14 17:22:36.731 - INFO: [epoch:  8, iter: 458,000, lr:(3.560e-06,)] l_pix: 1.2300e+01 
21-09-14 17:24:21.038 - INFO: [epoch:  8, iter: 458,100, lr:(3.544e-06,)] l_pix: 1.0010e+01 
21-09-14 17:26:05.359 - INFO: [epoch:  8, iter: 458,200, lr:(3.527e-06,)] l_pix: 1.0704e+01 
21-09-14 17:27:49.646 - INFO: [epoch:  8, iter: 458,300, lr:(3.511e-06,)] l_pix: 1.1746e+01 
21-09-14 17:29:33.689 - INFO: [epoch:  8, iter: 458,400, lr:(3.495e-06,)] l_pix: 1.2932e+01 
21-09-14 17:31:17.958 - INFO: [epoch:  8, iter: 458,500, lr:(3.479e-06,)] l_pix: 1.0606e+01 
21-09-14 17:33:02.279 - INFO: [epoch:  8, iter: 458,600, lr:(3.462e-06,)] l_pix: 1.2575e+01 
21-09-14 17:34:46.323 - INFO: [epoch:  8, iter: 458,700, lr:(3.446e-06,)] l_pix: 1.1727e+01 
21-09-14 17:36:30.200 - INFO: [epoch:  8, iter: 458,800, lr:(3.430e-06,)] l_pix: 1.2534e+01 
21-09-14 17:38:14.584 - INFO: [epoch:  8, iter: 458,900, lr:(3.414e-06,)] l_pix: 1.1317e+01 
21-09-14 17:39:59.085 - INFO: [epoch:  8, iter: 459,000, lr:(3.398e-06,)] l_pix: 1.0358e+01 
21-09-14 17:41:43.134 - INFO: [epoch:  8, iter: 459,100, lr:(3.382e-06,)] l_pix: 1.2681e+01 
21-09-14 17:43:27.070 - INFO: [epoch:  8, iter: 459,200, lr:(3.366e-06,)] l_pix: 1.1805e+01 
21-09-14 17:45:11.328 - INFO: [epoch:  8, iter: 459,300, lr:(3.350e-06,)] l_pix: 1.0102e+01 
21-09-14 17:46:56.778 - INFO: [epoch:  8, iter: 459,400, lr:(3.334e-06,)] l_pix: 1.0902e+01 
21-09-14 17:48:41.252 - INFO: [epoch:  8, iter: 459,500, lr:(3.319e-06,)] l_pix: 1.2034e+01 
21-09-14 17:50:25.492 - INFO: [epoch:  8, iter: 459,600, lr:(3.303e-06,)] l_pix: 9.5730e+00 
21-09-14 17:52:09.684 - INFO: [epoch:  8, iter: 459,700, lr:(3.287e-06,)] l_pix: 1.0450e+01 
21-09-14 17:53:54.191 - INFO: [epoch:  8, iter: 459,800, lr:(3.271e-06,)] l_pix: 1.1321e+01 
21-09-14 17:55:38.968 - INFO: [epoch:  8, iter: 459,900, lr:(3.256e-06,)] l_pix: 9.9781e+00 
21-09-14 17:57:23.577 - INFO: [epoch:  8, iter: 460,000, lr:(3.240e-06,)] l_pix: 1.2503e+01 
21-09-14 17:59:29.258 - INFO: # Validation # PSNR: 2.8890e+01
21-09-14 17:59:29.258 - INFO: Saving models and training states.
21-09-14 18:01:14.361 - INFO: [epoch:  8, iter: 460,100, lr:(3.224e-06,)] l_pix: 1.0825e+01 
21-09-14 18:02:58.853 - INFO: [epoch:  8, iter: 460,200, lr:(3.209e-06,)] l_pix: 1.2200e+01 
21-09-14 18:04:43.369 - INFO: [epoch:  8, iter: 460,300, lr:(3.193e-06,)] l_pix: 1.0816e+01 
21-09-14 18:06:27.706 - INFO: [epoch:  8, iter: 460,400, lr:(3.178e-06,)] l_pix: 1.1487e+01 
21-09-14 18:08:11.976 - INFO: [epoch:  8, iter: 460,500, lr:(3.162e-06,)] l_pix: 9.9052e+00 
21-09-14 18:09:56.273 - INFO: [epoch:  8, iter: 460,600, lr:(3.147e-06,)] l_pix: 1.2861e+01 
21-09-14 18:11:40.796 - INFO: [epoch:  8, iter: 460,700, lr:(3.132e-06,)] l_pix: 1.0883e+01 
21-09-14 18:13:25.331 - INFO: [epoch:  8, iter: 460,800, lr:(3.116e-06,)] l_pix: 1.1234e+01 
21-09-14 18:15:09.379 - INFO: [epoch:  8, iter: 460,900, lr:(3.101e-06,)] l_pix: 1.2146e+01 
21-09-14 18:16:53.402 - INFO: [epoch:  8, iter: 461,000, lr:(3.086e-06,)] l_pix: 1.1044e+01 
21-09-14 18:18:37.803 - INFO: [epoch:  8, iter: 461,100, lr:(3.070e-06,)] l_pix: 1.0763e+01 
21-09-14 18:20:22.337 - INFO: [epoch:  8, iter: 461,200, lr:(3.055e-06,)] l_pix: 1.1882e+01 
21-09-14 18:22:06.553 - INFO: [epoch:  8, iter: 461,300, lr:(3.040e-06,)] l_pix: 1.2529e+01 
21-09-14 18:23:50.926 - INFO: [epoch:  8, iter: 461,400, lr:(3.025e-06,)] l_pix: 1.1892e+01 
21-09-14 18:25:35.360 - INFO: [epoch:  8, iter: 461,500, lr:(3.010e-06,)] l_pix: 1.2204e+01 
21-09-14 18:27:19.823 - INFO: [epoch:  8, iter: 461,600, lr:(2.995e-06,)] l_pix: 9.8880e+00 
21-09-14 18:29:04.227 - INFO: [epoch:  8, iter: 461,700, lr:(2.980e-06,)] l_pix: 1.2295e+01 
21-09-14 18:30:48.611 - INFO: [epoch:  8, iter: 461,800, lr:(2.965e-06,)] l_pix: 1.0818e+01 
21-09-14 18:32:33.129 - INFO: [epoch:  8, iter: 461,900, lr:(2.950e-06,)] l_pix: 1.1574e+01 
21-09-14 18:34:17.616 - INFO: [epoch:  8, iter: 462,000, lr:(2.935e-06,)] l_pix: 1.1746e+01 
21-09-14 18:36:02.134 - INFO: [epoch:  8, iter: 462,100, lr:(2.920e-06,)] l_pix: 1.1339e+01 
21-09-14 18:37:46.606 - INFO: [epoch:  8, iter: 462,200, lr:(2.906e-06,)] l_pix: 1.0623e+01 
21-09-14 18:39:30.926 - INFO: [epoch:  8, iter: 462,300, lr:(2.891e-06,)] l_pix: 1.1673e+01 
21-09-14 18:41:15.207 - INFO: [epoch:  8, iter: 462,400, lr:(2.876e-06,)] l_pix: 1.0285e+01 
21-09-14 18:42:59.355 - INFO: [epoch:  8, iter: 462,500, lr:(2.861e-06,)] l_pix: 1.2364e+01 
21-09-14 18:44:43.462 - INFO: [epoch:  8, iter: 462,600, lr:(2.847e-06,)] l_pix: 1.1463e+01 
21-09-14 18:46:27.782 - INFO: [epoch:  8, iter: 462,700, lr:(2.832e-06,)] l_pix: 1.0774e+01 
21-09-14 18:48:11.948 - INFO: [epoch:  8, iter: 462,800, lr:(2.818e-06,)] l_pix: 1.2299e+01 
21-09-14 18:49:56.147 - INFO: [epoch:  8, iter: 462,900, lr:(2.803e-06,)] l_pix: 1.1846e+01 
21-09-14 18:51:40.287 - INFO: [epoch:  8, iter: 463,000, lr:(2.789e-06,)] l_pix: 1.1719e+01 
21-09-14 18:53:24.335 - INFO: [epoch:  8, iter: 463,100, lr:(2.774e-06,)] l_pix: 1.0756e+01 
21-09-14 18:55:08.513 - INFO: [epoch:  8, iter: 463,200, lr:(2.760e-06,)] l_pix: 1.0745e+01 
21-09-14 18:56:52.864 - INFO: [epoch:  8, iter: 463,300, lr:(2.745e-06,)] l_pix: 1.1079e+01 
21-09-14 18:58:37.568 - INFO: [epoch:  8, iter: 463,400, lr:(2.731e-06,)] l_pix: 1.0887e+01 
21-09-14 19:00:22.134 - INFO: [epoch:  8, iter: 463,500, lr:(2.717e-06,)] l_pix: 1.0447e+01 
21-09-14 19:02:06.482 - INFO: [epoch:  8, iter: 463,600, lr:(2.703e-06,)] l_pix: 9.4196e+00 
21-09-14 19:03:50.816 - INFO: [epoch:  8, iter: 463,700, lr:(2.688e-06,)] l_pix: 1.2702e+01 
21-09-14 19:05:35.082 - INFO: [epoch:  8, iter: 463,800, lr:(2.674e-06,)] l_pix: 1.1221e+01 
21-09-14 19:07:19.411 - INFO: [epoch:  8, iter: 463,900, lr:(2.660e-06,)] l_pix: 1.1925e+01 
21-09-14 19:09:03.880 - INFO: [epoch:  8, iter: 464,000, lr:(2.646e-06,)] l_pix: 1.1816e+01 
21-09-14 19:10:49.201 - INFO: [epoch:  8, iter: 464,100, lr:(2.632e-06,)] l_pix: 1.1873e+01 
21-09-14 19:12:34.764 - INFO: [epoch:  8, iter: 464,200, lr:(2.618e-06,)] l_pix: 1.0006e+01 
21-09-14 19:14:18.610 - INFO: [epoch:  8, iter: 464,300, lr:(2.604e-06,)] l_pix: 1.0224e+01 
21-09-14 19:16:02.511 - INFO: [epoch:  8, iter: 464,400, lr:(2.590e-06,)] l_pix: 1.2621e+01 
21-09-14 19:17:46.346 - INFO: [epoch:  8, iter: 464,500, lr:(2.576e-06,)] l_pix: 1.0036e+01 
21-09-14 19:19:30.131 - INFO: [epoch:  8, iter: 464,600, lr:(2.562e-06,)] l_pix: 1.0050e+01 
21-09-14 19:21:14.479 - INFO: [epoch:  9, iter: 464,700, lr:(2.548e-06,)] l_pix: 1.1839e+01 
21-09-14 19:22:58.471 - INFO: [epoch:  9, iter: 464,800, lr:(2.534e-06,)] l_pix: 1.1670e+01 
21-09-14 19:24:42.435 - INFO: [epoch:  9, iter: 464,900, lr:(2.521e-06,)] l_pix: 1.1848e+01 
21-09-14 19:26:26.131 - INFO: [epoch:  9, iter: 465,000, lr:(2.507e-06,)] l_pix: 1.2191e+01 
21-09-14 19:28:31.244 - INFO: # Validation # PSNR: 2.8887e+01
21-09-14 19:28:31.244 - INFO: Saving models and training states.
21-09-14 19:30:16.072 - INFO: [epoch:  9, iter: 465,100, lr:(2.493e-06,)] l_pix: 1.0700e+01 
21-09-14 19:31:59.803 - INFO: [epoch:  9, iter: 465,200, lr:(2.480e-06,)] l_pix: 1.2122e+01 
21-09-14 19:33:43.626 - INFO: [epoch:  9, iter: 465,300, lr:(2.466e-06,)] l_pix: 1.1001e+01 
21-09-14 19:35:27.786 - INFO: [epoch:  9, iter: 465,400, lr:(2.452e-06,)] l_pix: 1.2226e+01 
21-09-14 19:37:11.877 - INFO: [epoch:  9, iter: 465,500, lr:(2.439e-06,)] l_pix: 1.0481e+01 
21-09-14 19:38:55.809 - INFO: [epoch:  9, iter: 465,600, lr:(2.425e-06,)] l_pix: 1.0139e+01 
21-09-14 19:40:39.740 - INFO: [epoch:  9, iter: 465,700, lr:(2.412e-06,)] l_pix: 9.9675e+00 
21-09-14 19:42:23.766 - INFO: [epoch:  9, iter: 465,800, lr:(2.399e-06,)] l_pix: 1.1958e+01 
21-09-14 19:44:07.720 - INFO: [epoch:  9, iter: 465,900, lr:(2.385e-06,)] l_pix: 1.0567e+01 
21-09-14 19:45:51.577 - INFO: [epoch:  9, iter: 466,000, lr:(2.372e-06,)] l_pix: 1.3209e+01 
21-09-14 19:47:35.385 - INFO: [epoch:  9, iter: 466,100, lr:(2.359e-06,)] l_pix: 1.2649e+01 
21-09-14 19:49:19.139 - INFO: [epoch:  9, iter: 466,200, lr:(2.345e-06,)] l_pix: 9.8592e+00 
21-09-14 19:51:02.833 - INFO: [epoch:  9, iter: 466,300, lr:(2.332e-06,)] l_pix: 1.2149e+01 
21-09-14 19:52:46.727 - INFO: [epoch:  9, iter: 466,400, lr:(2.319e-06,)] l_pix: 1.0165e+01 
21-09-14 19:54:30.626 - INFO: [epoch:  9, iter: 466,500, lr:(2.306e-06,)] l_pix: 1.0466e+01 
21-09-14 19:56:14.378 - INFO: [epoch:  9, iter: 466,600, lr:(2.293e-06,)] l_pix: 1.0857e+01 
21-09-14 19:57:58.369 - INFO: [epoch:  9, iter: 466,700, lr:(2.280e-06,)] l_pix: 1.2747e+01 
21-09-14 19:59:42.761 - INFO: [epoch:  9, iter: 466,800, lr:(2.267e-06,)] l_pix: 9.8263e+00 
21-09-14 20:01:26.905 - INFO: [epoch:  9, iter: 466,900, lr:(2.254e-06,)] l_pix: 1.0652e+01 
21-09-14 20:03:10.601 - INFO: [epoch:  9, iter: 467,000, lr:(2.241e-06,)] l_pix: 1.1729e+01 
21-09-14 20:04:54.458 - INFO: [epoch:  9, iter: 467,100, lr:(2.228e-06,)] l_pix: 1.0298e+01 
21-09-14 20:06:38.424 - INFO: [epoch:  9, iter: 467,200, lr:(2.215e-06,)] l_pix: 1.0584e+01 
21-09-14 20:08:22.182 - INFO: [epoch:  9, iter: 467,300, lr:(2.202e-06,)] l_pix: 1.0467e+01 
21-09-14 20:10:05.963 - INFO: [epoch:  9, iter: 467,400, lr:(2.189e-06,)] l_pix: 1.1012e+01 
21-09-14 20:11:49.812 - INFO: [epoch:  9, iter: 467,500, lr:(2.177e-06,)] l_pix: 9.8133e+00 
21-09-14 20:13:33.439 - INFO: [epoch:  9, iter: 467,600, lr:(2.164e-06,)] l_pix: 1.1501e+01 
21-09-14 20:15:17.125 - INFO: [epoch:  9, iter: 467,700, lr:(2.151e-06,)] l_pix: 9.8176e+00 
21-09-14 20:17:00.996 - INFO: [epoch:  9, iter: 467,800, lr:(2.139e-06,)] l_pix: 1.1605e+01 
21-09-14 20:18:44.741 - INFO: [epoch:  9, iter: 467,900, lr:(2.126e-06,)] l_pix: 1.0029e+01 
21-09-14 20:20:28.393 - INFO: [epoch:  9, iter: 468,000, lr:(2.113e-06,)] l_pix: 1.0163e+01 
21-09-14 20:22:12.453 - INFO: [epoch:  9, iter: 468,100, lr:(2.101e-06,)] l_pix: 1.4330e+01 
21-09-14 20:23:56.455 - INFO: [epoch:  9, iter: 468,200, lr:(2.088e-06,)] l_pix: 1.3286e+01 
21-09-14 20:25:40.235 - INFO: [epoch:  9, iter: 468,300, lr:(2.076e-06,)] l_pix: 1.1641e+01 
21-09-14 20:27:23.960 - INFO: [epoch:  9, iter: 468,400, lr:(2.064e-06,)] l_pix: 9.2599e+00 
21-09-14 20:29:07.741 - INFO: [epoch:  9, iter: 468,500, lr:(2.051e-06,)] l_pix: 1.1261e+01 
21-09-14 20:30:51.761 - INFO: [epoch:  9, iter: 468,600, lr:(2.039e-06,)] l_pix: 1.1234e+01 
21-09-14 20:32:35.526 - INFO: [epoch:  9, iter: 468,700, lr:(2.027e-06,)] l_pix: 1.0627e+01 
21-09-14 20:34:19.450 - INFO: [epoch:  9, iter: 468,800, lr:(2.014e-06,)] l_pix: 1.0968e+01 
21-09-14 20:36:03.145 - INFO: [epoch:  9, iter: 468,900, lr:(2.002e-06,)] l_pix: 1.1497e+01 
21-09-14 20:37:46.797 - INFO: [epoch:  9, iter: 469,000, lr:(1.990e-06,)] l_pix: 1.0596e+01 
21-09-14 20:39:30.559 - INFO: [epoch:  9, iter: 469,100, lr:(1.978e-06,)] l_pix: 1.0416e+01 
21-09-14 20:41:14.143 - INFO: [epoch:  9, iter: 469,200, lr:(1.966e-06,)] l_pix: 1.0549e+01 
21-09-14 20:42:57.496 - INFO: [epoch:  9, iter: 469,300, lr:(1.954e-06,)] l_pix: 1.1394e+01 
21-09-14 20:44:40.973 - INFO: [epoch:  9, iter: 469,400, lr:(1.942e-06,)] l_pix: 1.1313e+01 
21-09-14 20:46:25.149 - INFO: [epoch:  9, iter: 469,500, lr:(1.930e-06,)] l_pix: 1.1688e+01 
21-09-14 20:48:09.209 - INFO: [epoch:  9, iter: 469,600, lr:(1.918e-06,)] l_pix: 1.2905e+01 
21-09-14 20:49:52.955 - INFO: [epoch:  9, iter: 469,700, lr:(1.906e-06,)] l_pix: 1.2628e+01 
21-09-14 20:51:36.675 - INFO: [epoch:  9, iter: 469,800, lr:(1.894e-06,)] l_pix: 9.7782e+00 
21-09-14 20:53:20.132 - INFO: [epoch:  9, iter: 469,900, lr:(1.882e-06,)] l_pix: 1.2921e+01 
21-09-14 20:55:03.925 - INFO: [epoch:  9, iter: 470,000, lr:(1.870e-06,)] l_pix: 1.3728e+01 
21-09-14 20:57:08.987 - INFO: # Validation # PSNR: 2.8891e+01
21-09-14 20:57:08.987 - INFO: Saving models and training states.
21-09-14 20:58:53.745 - INFO: [epoch:  9, iter: 470,100, lr:(1.859e-06,)] l_pix: 9.7138e+00 
21-09-14 21:00:37.364 - INFO: [epoch:  9, iter: 470,200, lr:(1.847e-06,)] l_pix: 1.1310e+01 
21-09-14 21:02:20.933 - INFO: [epoch:  9, iter: 470,300, lr:(1.835e-06,)] l_pix: 1.0217e+01 
21-09-14 21:04:04.683 - INFO: [epoch:  9, iter: 470,400, lr:(1.824e-06,)] l_pix: 1.0337e+01 
21-09-14 21:05:48.430 - INFO: [epoch:  9, iter: 470,500, lr:(1.812e-06,)] l_pix: 1.3842e+01 
21-09-14 21:07:32.031 - INFO: [epoch:  9, iter: 470,600, lr:(1.800e-06,)] l_pix: 1.0454e+01 
21-09-14 21:09:15.710 - INFO: [epoch:  9, iter: 470,700, lr:(1.789e-06,)] l_pix: 1.1785e+01 
21-09-14 21:10:59.167 - INFO: [epoch:  9, iter: 470,800, lr:(1.777e-06,)] l_pix: 1.0798e+01 
21-09-14 21:12:42.801 - INFO: [epoch:  9, iter: 470,900, lr:(1.766e-06,)] l_pix: 9.3718e+00 
21-09-14 21:14:26.940 - INFO: [epoch:  9, iter: 471,000, lr:(1.755e-06,)] l_pix: 1.2187e+01 
21-09-14 21:16:10.896 - INFO: [epoch:  9, iter: 471,100, lr:(1.743e-06,)] l_pix: 1.0053e+01 
21-09-14 21:17:54.603 - INFO: [epoch:  9, iter: 471,200, lr:(1.732e-06,)] l_pix: 1.1054e+01 
21-09-14 21:19:38.359 - INFO: [epoch:  9, iter: 471,300, lr:(1.721e-06,)] l_pix: 1.1152e+01 
21-09-14 21:21:21.920 - INFO: [epoch:  9, iter: 471,400, lr:(1.709e-06,)] l_pix: 9.7702e+00 
21-09-14 21:23:05.745 - INFO: [epoch:  9, iter: 471,500, lr:(1.698e-06,)] l_pix: 1.1964e+01 
21-09-14 21:24:49.484 - INFO: [epoch:  9, iter: 471,600, lr:(1.687e-06,)] l_pix: 9.0840e+00 
21-09-14 21:26:33.282 - INFO: [epoch:  9, iter: 471,700, lr:(1.676e-06,)] l_pix: 1.0416e+01 
21-09-14 21:28:16.990 - INFO: [epoch:  9, iter: 471,800, lr:(1.665e-06,)] l_pix: 1.1332e+01 
21-09-14 21:30:00.682 - INFO: [epoch:  9, iter: 471,900, lr:(1.654e-06,)] l_pix: 9.4172e+00 
21-09-14 21:31:44.159 - INFO: [epoch:  9, iter: 472,000, lr:(1.643e-06,)] l_pix: 1.0397e+01 
21-09-14 21:33:27.638 - INFO: [epoch:  9, iter: 472,100, lr:(1.632e-06,)] l_pix: 1.0975e+01 
21-09-14 21:35:11.340 - INFO: [epoch:  9, iter: 472,200, lr:(1.621e-06,)] l_pix: 9.9658e+00 
21-09-14 21:36:54.988 - INFO: [epoch:  9, iter: 472,300, lr:(1.610e-06,)] l_pix: 1.0954e+01 
21-09-14 21:38:38.752 - INFO: [epoch:  9, iter: 472,400, lr:(1.599e-06,)] l_pix: 1.1436e+01 
21-09-14 21:40:22.192 - INFO: [epoch:  9, iter: 472,500, lr:(1.588e-06,)] l_pix: 9.9242e+00 
21-09-14 21:42:06.107 - INFO: [epoch:  9, iter: 472,600, lr:(1.577e-06,)] l_pix: 1.0515e+01 
21-09-14 21:43:50.020 - INFO: [epoch:  9, iter: 472,700, lr:(1.567e-06,)] l_pix: 1.3132e+01 
21-09-14 21:45:33.742 - INFO: [epoch:  9, iter: 472,800, lr:(1.556e-06,)] l_pix: 1.2091e+01 
21-09-14 21:47:17.595 - INFO: [epoch:  9, iter: 472,900, lr:(1.545e-06,)] l_pix: 9.7799e+00 
21-09-14 21:49:01.907 - INFO: [epoch:  9, iter: 473,000, lr:(1.535e-06,)] l_pix: 1.0996e+01 
21-09-14 21:50:45.817 - INFO: [epoch:  9, iter: 473,100, lr:(1.524e-06,)] l_pix: 1.0828e+01 
21-09-14 21:52:29.702 - INFO: [epoch:  9, iter: 473,200, lr:(1.514e-06,)] l_pix: 1.0362e+01 
21-09-14 21:54:14.574 - INFO: [epoch:  9, iter: 473,300, lr:(1.503e-06,)] l_pix: 1.2076e+01 
21-09-14 21:55:58.546 - INFO: [epoch:  9, iter: 473,400, lr:(1.493e-06,)] l_pix: 1.0278e+01 
21-09-14 21:57:42.506 - INFO: [epoch:  9, iter: 473,500, lr:(1.482e-06,)] l_pix: 1.0819e+01 
21-09-14 21:59:26.884 - INFO: [epoch:  9, iter: 473,600, lr:(1.472e-06,)] l_pix: 1.0676e+01 
21-09-14 22:01:11.193 - INFO: [epoch:  9, iter: 473,700, lr:(1.461e-06,)] l_pix: 1.0117e+01 
21-09-14 22:02:55.369 - INFO: [epoch:  9, iter: 473,800, lr:(1.451e-06,)] l_pix: 9.9664e+00 
21-09-14 22:04:39.454 - INFO: [epoch:  9, iter: 473,900, lr:(1.441e-06,)] l_pix: 9.3210e+00 
21-09-14 22:06:23.724 - INFO: [epoch:  9, iter: 474,000, lr:(1.431e-06,)] l_pix: 1.0299e+01 
21-09-14 22:08:07.927 - INFO: [epoch:  9, iter: 474,100, lr:(1.420e-06,)] l_pix: 1.0434e+01 
21-09-14 22:09:52.159 - INFO: [epoch:  9, iter: 474,200, lr:(1.410e-06,)] l_pix: 9.0559e+00 
21-09-14 22:11:36.257 - INFO: [epoch:  9, iter: 474,300, lr:(1.400e-06,)] l_pix: 1.0515e+01 
21-09-14 22:13:20.392 - INFO: [epoch:  9, iter: 474,400, lr:(1.390e-06,)] l_pix: 1.0338e+01 
21-09-14 22:15:04.646 - INFO: [epoch:  9, iter: 474,500, lr:(1.380e-06,)] l_pix: 1.3160e+01 
21-09-14 22:16:48.625 - INFO: [epoch:  9, iter: 474,600, lr:(1.370e-06,)] l_pix: 1.0872e+01 
21-09-14 22:18:32.813 - INFO: [epoch:  9, iter: 474,700, lr:(1.360e-06,)] l_pix: 1.0449e+01 
21-09-14 22:20:17.072 - INFO: [epoch:  9, iter: 474,800, lr:(1.350e-06,)] l_pix: 1.0682e+01 
21-09-14 22:22:01.622 - INFO: [epoch:  9, iter: 474,900, lr:(1.340e-06,)] l_pix: 1.1817e+01 
21-09-14 22:23:45.909 - INFO: [epoch:  9, iter: 475,000, lr:(1.330e-06,)] l_pix: 1.0672e+01 
21-09-14 22:25:51.415 - INFO: # Validation # PSNR: 2.8898e+01
21-09-14 22:25:51.415 - INFO: Saving models and training states.
21-09-14 22:27:36.599 - INFO: [epoch:  9, iter: 475,100, lr:(1.321e-06,)] l_pix: 1.1437e+01 
21-09-14 22:29:21.034 - INFO: [epoch:  9, iter: 475,200, lr:(1.311e-06,)] l_pix: 1.1507e+01 
21-09-14 22:31:05.318 - INFO: [epoch:  9, iter: 475,300, lr:(1.301e-06,)] l_pix: 1.3708e+01 
21-09-14 22:32:49.668 - INFO: [epoch:  9, iter: 475,400, lr:(1.291e-06,)] l_pix: 1.1382e+01 
21-09-14 22:34:33.928 - INFO: [epoch:  9, iter: 475,500, lr:(1.282e-06,)] l_pix: 1.0436e+01 
21-09-14 22:36:18.171 - INFO: [epoch:  9, iter: 475,600, lr:(1.272e-06,)] l_pix: 9.6768e+00 
21-09-14 22:38:02.413 - INFO: [epoch:  9, iter: 475,700, lr:(1.263e-06,)] l_pix: 1.0185e+01 
21-09-14 22:39:46.610 - INFO: [epoch:  9, iter: 475,800, lr:(1.253e-06,)] l_pix: 1.1141e+01 
21-09-14 22:41:30.979 - INFO: [epoch:  9, iter: 475,900, lr:(1.244e-06,)] l_pix: 1.0250e+01 
21-09-14 22:43:15.277 - INFO: [epoch:  9, iter: 476,000, lr:(1.234e-06,)] l_pix: 1.1982e+01 
21-09-14 22:44:59.681 - INFO: [epoch:  9, iter: 476,100, lr:(1.225e-06,)] l_pix: 1.1893e+01 
21-09-14 22:46:44.059 - INFO: [epoch:  9, iter: 476,200, lr:(1.215e-06,)] l_pix: 1.1172e+01 
21-09-14 22:48:28.518 - INFO: [epoch:  9, iter: 476,300, lr:(1.206e-06,)] l_pix: 1.1256e+01 
21-09-14 22:50:14.586 - INFO: [epoch:  9, iter: 476,400, lr:(1.197e-06,)] l_pix: 1.0929e+01 
21-09-14 22:52:01.301 - INFO: [epoch:  9, iter: 476,500, lr:(1.187e-06,)] l_pix: 1.1676e+01 
21-09-14 22:53:45.701 - INFO: [epoch:  9, iter: 476,600, lr:(1.178e-06,)] l_pix: 1.0920e+01 
21-09-14 22:55:29.783 - INFO: [epoch:  9, iter: 476,700, lr:(1.169e-06,)] l_pix: 1.1815e+01 
21-09-14 22:57:13.457 - INFO: [epoch:  9, iter: 476,800, lr:(1.160e-06,)] l_pix: 1.2612e+01 
21-09-14 22:58:57.467 - INFO: [epoch:  9, iter: 476,900, lr:(1.151e-06,)] l_pix: 1.0220e+01 
21-09-14 23:00:42.161 - INFO: [epoch:  9, iter: 477,000, lr:(1.142e-06,)] l_pix: 1.2298e+01 
21-09-14 23:02:25.811 - INFO: [epoch:  9, iter: 477,100, lr:(1.133e-06,)] l_pix: 1.2472e+01 
21-09-14 23:04:09.476 - INFO: [epoch:  9, iter: 477,200, lr:(1.124e-06,)] l_pix: 1.2953e+01 
21-09-14 23:05:53.348 - INFO: [epoch:  9, iter: 477,300, lr:(1.115e-06,)] l_pix: 1.1029e+01 
21-09-14 23:07:37.697 - INFO: [epoch:  9, iter: 477,400, lr:(1.106e-06,)] l_pix: 1.1134e+01 
21-09-14 23:09:21.571 - INFO: [epoch:  9, iter: 477,500, lr:(1.097e-06,)] l_pix: 1.2714e+01 
21-09-14 23:11:05.256 - INFO: [epoch:  9, iter: 477,600, lr:(1.088e-06,)] l_pix: 1.0562e+01 
21-09-14 23:12:49.304 - INFO: [epoch:  9, iter: 477,700, lr:(1.079e-06,)] l_pix: 1.3103e+01 
21-09-14 23:14:35.551 - INFO: [epoch:  9, iter: 477,800, lr:(1.071e-06,)] l_pix: 1.2411e+01 
21-09-14 23:16:19.869 - INFO: [epoch:  9, iter: 477,900, lr:(1.062e-06,)] l_pix: 1.1581e+01 
21-09-14 23:18:04.915 - INFO: [epoch:  9, iter: 478,000, lr:(1.053e-06,)] l_pix: 1.1215e+01 
21-09-14 23:19:48.561 - INFO: [epoch:  9, iter: 478,100, lr:(1.045e-06,)] l_pix: 1.0622e+01 
21-09-14 23:21:32.188 - INFO: [epoch:  9, iter: 478,200, lr:(1.036e-06,)] l_pix: 1.1235e+01 
21-09-14 23:23:16.086 - INFO: [epoch:  9, iter: 478,300, lr:(1.028e-06,)] l_pix: 1.1572e+01 
21-09-14 23:24:59.792 - INFO: [epoch:  9, iter: 478,400, lr:(1.019e-06,)] l_pix: 1.0815e+01 
21-09-14 23:26:43.433 - INFO: [epoch:  9, iter: 478,500, lr:(1.011e-06,)] l_pix: 1.1417e+01 
21-09-14 23:28:27.291 - INFO: [epoch:  9, iter: 478,600, lr:(1.002e-06,)] l_pix: 9.8569e+00 
21-09-14 23:30:11.140 - INFO: [epoch:  9, iter: 478,700, lr:(9.937e-07,)] l_pix: 9.8284e+00 
21-09-14 23:31:55.294 - INFO: [epoch:  9, iter: 478,800, lr:(9.853e-07,)] l_pix: 1.0682e+01 
21-09-14 23:33:39.010 - INFO: [epoch:  9, iter: 478,900, lr:(9.770e-07,)] l_pix: 1.1636e+01 
21-09-14 23:35:22.673 - INFO: [epoch:  9, iter: 479,000, lr:(9.687e-07,)] l_pix: 1.1688e+01 
21-09-14 23:37:06.388 - INFO: [epoch:  9, iter: 479,100, lr:(9.605e-07,)] l_pix: 1.2264e+01 
21-09-14 23:38:50.004 - INFO: [epoch:  9, iter: 479,200, lr:(9.523e-07,)] l_pix: 9.9342e+00 
21-09-14 23:40:33.551 - INFO: [epoch:  9, iter: 479,300, lr:(9.441e-07,)] l_pix: 1.1801e+01 
21-09-14 23:42:17.200 - INFO: [epoch:  9, iter: 479,400, lr:(9.360e-07,)] l_pix: 1.1898e+01 
21-09-14 23:44:01.762 - INFO: [epoch:  9, iter: 479,500, lr:(9.279e-07,)] l_pix: 1.1095e+01 
21-09-14 23:45:46.105 - INFO: [epoch:  9, iter: 479,600, lr:(9.199e-07,)] l_pix: 1.0944e+01 
21-09-14 23:47:30.871 - INFO: [epoch:  9, iter: 479,700, lr:(9.118e-07,)] l_pix: 1.0548e+01 
21-09-14 23:49:14.364 - INFO: [epoch:  9, iter: 479,800, lr:(9.039e-07,)] l_pix: 1.1585e+01 
21-09-14 23:50:58.068 - INFO: [epoch:  9, iter: 479,900, lr:(8.959e-07,)] l_pix: 1.0259e+01 
21-09-14 23:52:42.586 - INFO: [epoch:  9, iter: 480,000, lr:(8.881e-07,)] l_pix: 9.8938e+00 
21-09-14 23:54:47.661 - INFO: # Validation # PSNR: 2.8900e+01
21-09-14 23:54:47.662 - INFO: Saving models and training states.
21-09-14 23:56:32.119 - INFO: [epoch:  9, iter: 480,100, lr:(8.802e-07,)] l_pix: 1.0135e+01 
21-09-14 23:58:15.721 - INFO: [epoch:  9, iter: 480,200, lr:(8.724e-07,)] l_pix: 1.0641e+01 
21-09-14 23:59:59.785 - INFO: [epoch:  9, iter: 480,300, lr:(8.646e-07,)] l_pix: 9.7093e+00 
21-09-15 00:01:43.717 - INFO: [epoch:  9, iter: 480,400, lr:(8.569e-07,)] l_pix: 1.2730e+01 
21-09-15 00:03:27.997 - INFO: [epoch:  9, iter: 480,500, lr:(8.492e-07,)] l_pix: 1.2153e+01 
21-09-15 00:05:09.567 - INFO: [epoch:  9, iter: 480,600, lr:(8.415e-07,)] l_pix: 1.0018e+01 
21-09-15 00:06:51.771 - INFO: [epoch:  9, iter: 480,700, lr:(8.339e-07,)] l_pix: 1.1103e+01 
21-09-15 00:08:33.330 - INFO: [epoch:  9, iter: 480,800, lr:(8.263e-07,)] l_pix: 1.1333e+01 
21-09-15 00:10:14.783 - INFO: [epoch:  9, iter: 480,900, lr:(8.188e-07,)] l_pix: 1.2006e+01 
21-09-15 00:11:56.968 - INFO: [epoch:  9, iter: 481,000, lr:(8.113e-07,)] l_pix: 1.0548e+01 
21-09-15 00:13:38.834 - INFO: [epoch:  9, iter: 481,100, lr:(8.038e-07,)] l_pix: 1.2217e+01 
21-09-15 00:15:20.778 - INFO: [epoch:  9, iter: 481,200, lr:(7.964e-07,)] l_pix: 1.0330e+01 
21-09-15 00:17:02.240 - INFO: [epoch:  9, iter: 481,300, lr:(7.890e-07,)] l_pix: 1.1066e+01 
21-09-15 00:18:43.501 - INFO: [epoch:  9, iter: 481,400, lr:(7.817e-07,)] l_pix: 1.0192e+01 
21-09-15 00:20:27.563 - INFO: [epoch:  9, iter: 481,500, lr:(7.744e-07,)] l_pix: 9.6707e+00 
21-09-15 00:22:11.358 - INFO: [epoch:  9, iter: 481,600, lr:(7.671e-07,)] l_pix: 1.0981e+01 
21-09-15 00:23:54.776 - INFO: [epoch:  9, iter: 481,700, lr:(7.599e-07,)] l_pix: 1.2861e+01 
21-09-15 00:25:38.367 - INFO: [epoch:  9, iter: 481,800, lr:(7.527e-07,)] l_pix: 1.2414e+01 
21-09-15 00:27:21.680 - INFO: [epoch:  9, iter: 481,900, lr:(7.456e-07,)] l_pix: 1.2850e+01 
21-09-15 00:29:05.195 - INFO: [epoch:  9, iter: 482,000, lr:(7.385e-07,)] l_pix: 1.1350e+01 
21-09-15 00:30:48.482 - INFO: [epoch:  9, iter: 482,100, lr:(7.314e-07,)] l_pix: 1.1304e+01 
21-09-15 00:32:32.534 - INFO: [epoch:  9, iter: 482,200, lr:(7.244e-07,)] l_pix: 1.0998e+01 
21-09-15 00:34:17.043 - INFO: [epoch:  9, iter: 482,300, lr:(7.174e-07,)] l_pix: 1.0838e+01 
21-09-15 00:36:01.399 - INFO: [epoch:  9, iter: 482,400, lr:(7.104e-07,)] l_pix: 1.1302e+01 
21-09-15 00:37:45.257 - INFO: [epoch:  9, iter: 482,500, lr:(7.035e-07,)] l_pix: 1.3025e+01 
21-09-15 00:39:28.514 - INFO: [epoch:  9, iter: 482,600, lr:(6.967e-07,)] l_pix: 1.0418e+01 
21-09-15 00:41:11.792 - INFO: [epoch:  9, iter: 482,700, lr:(6.898e-07,)] l_pix: 1.1437e+01 
21-09-15 00:42:55.653 - INFO: [epoch:  9, iter: 482,800, lr:(6.830e-07,)] l_pix: 1.3499e+01 
21-09-15 00:44:39.380 - INFO: [epoch:  9, iter: 482,900, lr:(6.763e-07,)] l_pix: 1.2476e+01 
21-09-15 00:46:22.877 - INFO: [epoch:  9, iter: 483,000, lr:(6.696e-07,)] l_pix: 1.2513e+01 
21-09-15 00:48:06.190 - INFO: [epoch:  9, iter: 483,100, lr:(6.629e-07,)] l_pix: 1.0362e+01 
21-09-15 00:49:50.438 - INFO: [epoch:  9, iter: 483,200, lr:(6.563e-07,)] l_pix: 1.2066e+01 
21-09-15 00:51:34.883 - INFO: [epoch:  9, iter: 483,300, lr:(6.497e-07,)] l_pix: 1.1514e+01 
21-09-15 00:53:18.635 - INFO: [epoch:  9, iter: 483,400, lr:(6.431e-07,)] l_pix: 1.0063e+01 
21-09-15 00:55:02.658 - INFO: [epoch:  9, iter: 483,500, lr:(6.366e-07,)] l_pix: 1.1150e+01 
21-09-15 00:56:46.565 - INFO: [epoch:  9, iter: 483,600, lr:(6.301e-07,)] l_pix: 9.6384e+00 
21-09-15 00:58:30.246 - INFO: [epoch:  9, iter: 483,700, lr:(6.237e-07,)] l_pix: 1.2179e+01 
21-09-15 01:00:14.110 - INFO: [epoch:  9, iter: 483,800, lr:(6.173e-07,)] l_pix: 1.1995e+01 
21-09-15 01:01:57.679 - INFO: [epoch:  9, iter: 483,900, lr:(6.109e-07,)] l_pix: 1.1722e+01 
21-09-15 01:03:41.055 - INFO: [epoch:  9, iter: 484,000, lr:(6.046e-07,)] l_pix: 1.2004e+01 
21-09-15 01:05:24.763 - INFO: [epoch:  9, iter: 484,100, lr:(5.983e-07,)] l_pix: 1.1999e+01 
21-09-15 01:07:08.525 - INFO: [epoch:  9, iter: 484,200, lr:(5.921e-07,)] l_pix: 1.0479e+01 
21-09-15 01:08:52.223 - INFO: [epoch:  9, iter: 484,300, lr:(5.859e-07,)] l_pix: 1.1617e+01 
21-09-15 01:10:36.274 - INFO: [epoch:  9, iter: 484,400, lr:(5.797e-07,)] l_pix: 9.9267e+00 
21-09-15 01:12:20.404 - INFO: [epoch:  9, iter: 484,500, lr:(5.736e-07,)] l_pix: 1.1514e+01 
21-09-15 01:14:04.338 - INFO: [epoch:  9, iter: 484,600, lr:(5.675e-07,)] l_pix: 1.1229e+01 
21-09-15 01:15:47.986 - INFO: [epoch:  9, iter: 484,700, lr:(5.614e-07,)] l_pix: 1.0053e+01 
21-09-15 01:17:31.347 - INFO: [epoch:  9, iter: 484,800, lr:(5.554e-07,)] l_pix: 1.1410e+01 
21-09-15 01:19:13.908 - INFO: [epoch:  9, iter: 484,900, lr:(5.495e-07,)] l_pix: 9.7229e+00 
21-09-15 01:20:55.090 - INFO: [epoch:  9, iter: 485,000, lr:(5.435e-07,)] l_pix: 1.2427e+01 
21-09-15 01:22:57.553 - INFO: # Validation # PSNR: 2.8892e+01
21-09-15 01:22:57.553 - INFO: Saving models and training states.
21-09-15 01:24:39.255 - INFO: [epoch:  9, iter: 485,100, lr:(5.376e-07,)] l_pix: 1.1419e+01 
21-09-15 01:26:20.447 - INFO: [epoch:  9, iter: 485,200, lr:(5.318e-07,)] l_pix: 1.0816e+01 
21-09-15 01:28:02.058 - INFO: [epoch:  9, iter: 485,300, lr:(5.260e-07,)] l_pix: 1.3283e+01 
21-09-15 01:29:43.904 - INFO: [epoch:  9, iter: 485,400, lr:(5.202e-07,)] l_pix: 1.1727e+01 
21-09-15 01:31:25.452 - INFO: [epoch:  9, iter: 485,500, lr:(5.145e-07,)] l_pix: 1.1120e+01 
21-09-15 01:33:07.017 - INFO: [epoch:  9, iter: 485,600, lr:(5.088e-07,)] l_pix: 1.2884e+01 
21-09-15 01:34:48.344 - INFO: [epoch:  9, iter: 485,700, lr:(5.031e-07,)] l_pix: 1.0668e+01 
21-09-15 01:36:29.254 - INFO: [epoch:  9, iter: 485,800, lr:(4.975e-07,)] l_pix: 1.4128e+01 
21-09-15 01:38:10.414 - INFO: [epoch:  9, iter: 485,900, lr:(4.919e-07,)] l_pix: 1.1270e+01 
21-09-15 01:39:51.679 - INFO: [epoch:  9, iter: 486,000, lr:(4.864e-07,)] l_pix: 1.0581e+01 
21-09-15 01:41:33.034 - INFO: [epoch:  9, iter: 486,100, lr:(4.809e-07,)] l_pix: 1.0372e+01 
21-09-15 01:43:13.870 - INFO: [epoch:  9, iter: 486,200, lr:(4.754e-07,)] l_pix: 1.1199e+01 
21-09-15 01:44:54.696 - INFO: [epoch:  9, iter: 486,300, lr:(4.700e-07,)] l_pix: 1.0902e+01 
21-09-15 01:46:37.238 - INFO: [epoch:  9, iter: 486,400, lr:(4.646e-07,)] l_pix: 1.1019e+01 
21-09-15 01:48:20.784 - INFO: [epoch:  9, iter: 486,500, lr:(4.593e-07,)] l_pix: 1.3145e+01 
21-09-15 01:50:04.319 - INFO: [epoch:  9, iter: 486,600, lr:(4.540e-07,)] l_pix: 1.2292e+01 
21-09-15 01:51:47.704 - INFO: [epoch:  9, iter: 486,700, lr:(4.487e-07,)] l_pix: 1.2390e+01 
21-09-15 01:53:31.669 - INFO: [epoch:  9, iter: 486,800, lr:(4.435e-07,)] l_pix: 9.6083e+00 
21-09-15 01:55:15.261 - INFO: [epoch:  9, iter: 486,900, lr:(4.383e-07,)] l_pix: 9.7555e+00 
21-09-15 01:56:58.417 - INFO: [epoch:  9, iter: 487,000, lr:(4.332e-07,)] l_pix: 1.1481e+01 
21-09-15 01:58:41.684 - INFO: [epoch:  9, iter: 487,100, lr:(4.281e-07,)] l_pix: 1.2045e+01 
21-09-15 02:00:24.957 - INFO: [epoch:  9, iter: 487,200, lr:(4.230e-07,)] l_pix: 1.0087e+01 
21-09-15 02:02:08.074 - INFO: [epoch:  9, iter: 487,300, lr:(4.180e-07,)] l_pix: 1.1220e+01 
21-09-15 02:03:50.958 - INFO: [epoch:  9, iter: 487,400, lr:(4.130e-07,)] l_pix: 1.1617e+01 
21-09-15 02:05:33.921 - INFO: [epoch:  9, iter: 487,500, lr:(4.081e-07,)] l_pix: 1.0360e+01 
21-09-15 02:07:17.457 - INFO: [epoch:  9, iter: 487,600, lr:(4.032e-07,)] l_pix: 1.0935e+01 
21-09-15 02:09:01.247 - INFO: [epoch:  9, iter: 487,700, lr:(3.983e-07,)] l_pix: 1.1227e+01 
21-09-15 02:10:45.233 - INFO: [epoch:  9, iter: 487,800, lr:(3.935e-07,)] l_pix: 1.2094e+01 
21-09-15 02:12:28.868 - INFO: [epoch:  9, iter: 487,900, lr:(3.887e-07,)] l_pix: 9.8138e+00 
21-09-15 02:14:12.271 - INFO: [epoch:  9, iter: 488,000, lr:(3.839e-07,)] l_pix: 1.1226e+01 
21-09-15 02:15:55.488 - INFO: [epoch:  9, iter: 488,100, lr:(3.792e-07,)] l_pix: 1.0825e+01 
21-09-15 02:17:38.969 - INFO: [epoch:  9, iter: 488,200, lr:(3.745e-07,)] l_pix: 1.1930e+01 
21-09-15 02:19:22.308 - INFO: [epoch:  9, iter: 488,300, lr:(3.699e-07,)] l_pix: 1.1004e+01 
21-09-15 02:21:05.542 - INFO: [epoch:  9, iter: 488,400, lr:(3.653e-07,)] l_pix: 1.1934e+01 
21-09-15 02:22:48.718 - INFO: [epoch:  9, iter: 488,500, lr:(3.608e-07,)] l_pix: 1.1830e+01 
21-09-15 02:24:32.485 - INFO: [epoch:  9, iter: 488,600, lr:(3.562e-07,)] l_pix: 1.1951e+01 
21-09-15 02:26:16.007 - INFO: [epoch:  9, iter: 488,700, lr:(3.518e-07,)] l_pix: 9.1317e+00 
21-09-15 02:27:59.455 - INFO: [epoch:  9, iter: 488,800, lr:(3.473e-07,)] l_pix: 1.1627e+01 
21-09-15 02:29:43.222 - INFO: [epoch:  9, iter: 488,900, lr:(3.429e-07,)] l_pix: 1.0028e+01 
21-09-15 02:31:26.972 - INFO: [epoch:  9, iter: 489,000, lr:(3.386e-07,)] l_pix: 1.0703e+01 
21-09-15 02:33:10.453 - INFO: [epoch:  9, iter: 489,100, lr:(3.343e-07,)] l_pix: 1.0613e+01 
21-09-15 02:34:53.137 - INFO: [epoch:  9, iter: 489,200, lr:(3.300e-07,)] l_pix: 1.0375e+01 
21-09-15 02:36:36.263 - INFO: [epoch:  9, iter: 489,300, lr:(3.258e-07,)] l_pix: 1.2343e+01 
21-09-15 02:38:19.720 - INFO: [epoch:  9, iter: 489,400, lr:(3.216e-07,)] l_pix: 1.1743e+01 
21-09-15 02:40:03.405 - INFO: [epoch:  9, iter: 489,500, lr:(3.174e-07,)] l_pix: 1.0068e+01 
21-09-15 02:41:47.238 - INFO: [epoch:  9, iter: 489,600, lr:(3.133e-07,)] l_pix: 1.1132e+01 
21-09-15 02:43:30.967 - INFO: [epoch:  9, iter: 489,700, lr:(3.092e-07,)] l_pix: 1.1031e+01 
21-09-15 02:45:15.200 - INFO: [epoch:  9, iter: 489,800, lr:(3.052e-07,)] l_pix: 1.1047e+01 
21-09-15 02:46:57.882 - INFO: [epoch:  9, iter: 489,900, lr:(3.012e-07,)] l_pix: 1.0884e+01 
21-09-15 02:48:40.031 - INFO: [epoch:  9, iter: 490,000, lr:(2.972e-07,)] l_pix: 1.1575e+01 
21-09-15 02:50:42.218 - INFO: # Validation # PSNR: 2.8895e+01
21-09-15 02:50:42.218 - INFO: Saving models and training states.
21-09-15 02:52:23.926 - INFO: [epoch:  9, iter: 490,100, lr:(2.933e-07,)] l_pix: 1.0076e+01 
21-09-15 02:54:05.051 - INFO: [epoch:  9, iter: 490,200, lr:(2.894e-07,)] l_pix: 1.1130e+01 
21-09-15 02:55:46.188 - INFO: [epoch:  9, iter: 490,300, lr:(2.855e-07,)] l_pix: 1.0990e+01 
21-09-15 02:57:27.275 - INFO: [epoch:  9, iter: 490,400, lr:(2.817e-07,)] l_pix: 1.2528e+01 
21-09-15 02:59:08.282 - INFO: [epoch:  9, iter: 490,500, lr:(2.780e-07,)] l_pix: 1.0462e+01 
21-09-15 03:00:49.780 - INFO: [epoch:  9, iter: 490,600, lr:(2.742e-07,)] l_pix: 1.2659e+01 
21-09-15 03:02:31.306 - INFO: [epoch:  9, iter: 490,700, lr:(2.706e-07,)] l_pix: 1.0237e+01 
21-09-15 03:04:13.147 - INFO: [epoch:  9, iter: 490,800, lr:(2.669e-07,)] l_pix: 1.1537e+01 
21-09-15 03:05:54.567 - INFO: [epoch:  9, iter: 490,900, lr:(2.633e-07,)] l_pix: 1.3457e+01 
21-09-15 03:07:35.826 - INFO: [epoch:  9, iter: 491,000, lr:(2.597e-07,)] l_pix: 1.1632e+01 
21-09-15 03:09:17.020 - INFO: [epoch:  9, iter: 491,100, lr:(2.562e-07,)] l_pix: 1.2777e+01 
21-09-15 03:10:58.209 - INFO: [epoch:  9, iter: 491,200, lr:(2.527e-07,)] l_pix: 1.1420e+01 
21-09-15 03:12:39.250 - INFO: [epoch:  9, iter: 491,300, lr:(2.493e-07,)] l_pix: 1.2317e+01 
21-09-15 03:14:20.477 - INFO: [epoch:  9, iter: 491,400, lr:(2.458e-07,)] l_pix: 1.0194e+01 
21-09-15 03:16:01.805 - INFO: [epoch:  9, iter: 491,500, lr:(2.425e-07,)] l_pix: 8.9395e+00 
21-09-15 03:17:42.685 - INFO: [epoch:  9, iter: 491,600, lr:(2.391e-07,)] l_pix: 1.1029e+01 
21-09-15 03:19:24.193 - INFO: [epoch:  9, iter: 491,700, lr:(2.359e-07,)] l_pix: 1.1545e+01 
21-09-15 03:21:06.260 - INFO: [epoch:  9, iter: 491,800, lr:(2.326e-07,)] l_pix: 9.7309e+00 
21-09-15 03:22:47.777 - INFO: [epoch:  9, iter: 491,900, lr:(2.294e-07,)] l_pix: 1.2038e+01 
21-09-15 03:24:29.123 - INFO: [epoch:  9, iter: 492,000, lr:(2.262e-07,)] l_pix: 9.8826e+00 
21-09-15 03:26:10.589 - INFO: [epoch:  9, iter: 492,100, lr:(2.231e-07,)] l_pix: 1.1485e+01 
21-09-15 03:27:52.035 - INFO: [epoch:  9, iter: 492,200, lr:(2.200e-07,)] l_pix: 1.1201e+01 
21-09-15 03:29:33.291 - INFO: [epoch:  9, iter: 492,300, lr:(2.169e-07,)] l_pix: 1.1946e+01 
21-09-15 03:31:14.439 - INFO: [epoch:  9, iter: 492,400, lr:(2.139e-07,)] l_pix: 9.6173e+00 
21-09-15 03:32:55.506 - INFO: [epoch:  9, iter: 492,500, lr:(2.109e-07,)] l_pix: 9.3796e+00 
21-09-15 03:34:36.563 - INFO: [epoch:  9, iter: 492,600, lr:(2.080e-07,)] l_pix: 8.7182e+00 
21-09-15 03:36:17.664 - INFO: [epoch:  9, iter: 492,700, lr:(2.051e-07,)] l_pix: 1.0631e+01 
21-09-15 03:37:59.116 - INFO: [epoch:  9, iter: 492,800, lr:(2.022e-07,)] l_pix: 1.2796e+01 
21-09-15 03:39:40.562 - INFO: [epoch:  9, iter: 492,900, lr:(1.994e-07,)] l_pix: 9.6006e+00 
21-09-15 03:41:22.115 - INFO: [epoch:  9, iter: 493,000, lr:(1.966e-07,)] l_pix: 1.1585e+01 
21-09-15 03:43:03.732 - INFO: [epoch:  9, iter: 493,100, lr:(1.939e-07,)] l_pix: 1.0523e+01 
21-09-15 03:44:45.253 - INFO: [epoch:  9, iter: 493,200, lr:(1.912e-07,)] l_pix: 1.1847e+01 
21-09-15 03:46:27.726 - INFO: [epoch:  9, iter: 493,300, lr:(1.885e-07,)] l_pix: 1.1567e+01 
21-09-15 03:48:11.130 - INFO: [epoch:  9, iter: 493,400, lr:(1.859e-07,)] l_pix: 9.7985e+00 
21-09-15 03:49:54.687 - INFO: [epoch:  9, iter: 493,500, lr:(1.833e-07,)] l_pix: 9.9089e+00 
21-09-15 03:51:38.774 - INFO: [epoch:  9, iter: 493,600, lr:(1.808e-07,)] l_pix: 1.0748e+01 
21-09-15 03:53:22.169 - INFO: [epoch:  9, iter: 493,700, lr:(1.783e-07,)] l_pix: 1.1087e+01 
21-09-15 03:55:05.386 - INFO: [epoch:  9, iter: 493,800, lr:(1.758e-07,)] l_pix: 1.1622e+01 
21-09-15 03:56:48.694 - INFO: [epoch:  9, iter: 493,900, lr:(1.734e-07,)] l_pix: 1.1726e+01 
21-09-15 03:58:33.129 - INFO: [epoch:  9, iter: 494,000, lr:(1.710e-07,)] l_pix: 1.0270e+01 
21-09-15 04:00:16.186 - INFO: [epoch:  9, iter: 494,100, lr:(1.686e-07,)] l_pix: 9.2680e+00 
21-09-15 04:01:59.790 - INFO: [epoch:  9, iter: 494,200, lr:(1.663e-07,)] l_pix: 1.0808e+01 
21-09-15 04:03:43.343 - INFO: [epoch:  9, iter: 494,300, lr:(1.641e-07,)] l_pix: 1.0933e+01 
21-09-15 04:05:27.075 - INFO: [epoch:  9, iter: 494,400, lr:(1.618e-07,)] l_pix: 1.0735e+01 
21-09-15 04:07:10.451 - INFO: [epoch:  9, iter: 494,500, lr:(1.597e-07,)] l_pix: 1.1267e+01 
21-09-15 04:08:53.890 - INFO: [epoch:  9, iter: 494,600, lr:(1.575e-07,)] l_pix: 1.0899e+01 
21-09-15 04:10:37.705 - INFO: [epoch:  9, iter: 494,700, lr:(1.554e-07,)] l_pix: 1.2554e+01 
21-09-15 04:12:21.249 - INFO: [epoch:  9, iter: 494,800, lr:(1.533e-07,)] l_pix: 9.7367e+00 
21-09-15 04:14:04.990 - INFO: [epoch:  9, iter: 494,900, lr:(1.513e-07,)] l_pix: 1.2229e+01 
21-09-15 04:15:48.960 - INFO: [epoch:  9, iter: 495,000, lr:(1.493e-07,)] l_pix: 1.1826e+01 
21-09-15 04:17:54.322 - INFO: # Validation # PSNR: 2.8896e+01
21-09-15 04:17:54.322 - INFO: Saving models and training states.
21-09-15 04:19:38.823 - INFO: [epoch:  9, iter: 495,100, lr:(1.473e-07,)] l_pix: 1.1500e+01 
21-09-15 04:21:22.183 - INFO: [epoch:  9, iter: 495,200, lr:(1.454e-07,)] l_pix: 1.1939e+01 
21-09-15 04:23:05.355 - INFO: [epoch:  9, iter: 495,300, lr:(1.436e-07,)] l_pix: 1.0199e+01 
21-09-15 04:24:49.337 - INFO: [epoch:  9, iter: 495,400, lr:(1.417e-07,)] l_pix: 1.0835e+01 
21-09-15 04:26:32.702 - INFO: [epoch:  9, iter: 495,500, lr:(1.399e-07,)] l_pix: 1.0023e+01 
21-09-15 04:28:17.220 - INFO: [epoch:  9, iter: 495,600, lr:(1.382e-07,)] l_pix: 1.1312e+01 
21-09-15 04:30:01.325 - INFO: [epoch:  9, iter: 495,700, lr:(1.365e-07,)] l_pix: 1.0553e+01 
21-09-15 04:31:45.078 - INFO: [epoch:  9, iter: 495,800, lr:(1.348e-07,)] l_pix: 1.0408e+01 
21-09-15 04:33:28.789 - INFO: [epoch:  9, iter: 495,900, lr:(1.331e-07,)] l_pix: 1.3166e+01 
21-09-15 04:35:12.641 - INFO: [epoch:  9, iter: 496,000, lr:(1.315e-07,)] l_pix: 1.3383e+01 
21-09-15 04:36:56.436 - INFO: [epoch:  9, iter: 496,100, lr:(1.300e-07,)] l_pix: 1.0462e+01 
21-09-15 04:38:40.219 - INFO: [epoch:  9, iter: 496,200, lr:(1.285e-07,)] l_pix: 1.1744e+01 
21-09-15 04:40:23.906 - INFO: [epoch:  9, iter: 496,300, lr:(1.270e-07,)] l_pix: 1.2437e+01 
21-09-15 04:42:07.215 - INFO: [epoch:  9, iter: 496,400, lr:(1.256e-07,)] l_pix: 1.0905e+01 
21-09-15 04:43:50.833 - INFO: [epoch:  9, iter: 496,500, lr:(1.242e-07,)] l_pix: 1.3268e+01 
21-09-15 04:45:34.124 - INFO: [epoch:  9, iter: 496,600, lr:(1.228e-07,)] l_pix: 1.0826e+01 
21-09-15 04:47:15.450 - INFO: [epoch:  9, iter: 496,700, lr:(1.215e-07,)] l_pix: 1.3245e+01 
21-09-15 04:48:56.993 - INFO: [epoch:  9, iter: 496,800, lr:(1.202e-07,)] l_pix: 1.1390e+01 
21-09-15 04:50:38.217 - INFO: [epoch:  9, iter: 496,900, lr:(1.189e-07,)] l_pix: 1.1170e+01 
21-09-15 04:52:19.510 - INFO: [epoch:  9, iter: 497,000, lr:(1.177e-07,)] l_pix: 1.0612e+01 
21-09-15 04:54:01.214 - INFO: [epoch:  9, iter: 497,100, lr:(1.166e-07,)] l_pix: 1.0977e+01 
21-09-15 04:55:43.053 - INFO: [epoch:  9, iter: 497,200, lr:(1.155e-07,)] l_pix: 1.0787e+01 
21-09-15 04:57:24.529 - INFO: [epoch:  9, iter: 497,300, lr:(1.144e-07,)] l_pix: 1.2531e+01 
21-09-15 04:59:06.145 - INFO: [epoch:  9, iter: 497,400, lr:(1.133e-07,)] l_pix: 1.0685e+01 
21-09-15 05:00:47.712 - INFO: [epoch:  9, iter: 497,500, lr:(1.123e-07,)] l_pix: 1.1146e+01 
21-09-15 05:02:29.094 - INFO: [epoch:  9, iter: 497,600, lr:(1.114e-07,)] l_pix: 1.2277e+01 
21-09-15 05:04:10.455 - INFO: [epoch:  9, iter: 497,700, lr:(1.104e-07,)] l_pix: 1.2204e+01 
21-09-15 05:05:51.902 - INFO: [epoch:  9, iter: 497,800, lr:(1.095e-07,)] l_pix: 1.2582e+01 
21-09-15 05:07:33.395 - INFO: [epoch: 10, iter: 497,900, lr:(1.087e-07,)] l_pix: 1.1738e+01 
21-09-15 05:09:14.449 - INFO: [epoch: 10, iter: 498,000, lr:(1.079e-07,)] l_pix: 1.0648e+01 
21-09-15 05:10:55.702 - INFO: [epoch: 10, iter: 498,100, lr:(1.071e-07,)] l_pix: 1.1388e+01 
21-09-15 05:12:37.516 - INFO: [epoch: 10, iter: 498,200, lr:(1.064e-07,)] l_pix: 1.1235e+01 
21-09-15 05:14:19.094 - INFO: [epoch: 10, iter: 498,300, lr:(1.057e-07,)] l_pix: 1.3081e+01 
21-09-15 05:16:00.749 - INFO: [epoch: 10, iter: 498,400, lr:(1.050e-07,)] l_pix: 9.8854e+00 
21-09-15 05:17:42.207 - INFO: [epoch: 10, iter: 498,500, lr:(1.044e-07,)] l_pix: 1.0654e+01 
21-09-15 05:19:23.939 - INFO: [epoch: 10, iter: 498,600, lr:(1.039e-07,)] l_pix: 1.2209e+01 
21-09-15 05:21:05.169 - INFO: [epoch: 10, iter: 498,700, lr:(1.033e-07,)] l_pix: 1.1286e+01 
21-09-15 05:22:46.413 - INFO: [epoch: 10, iter: 498,800, lr:(1.028e-07,)] l_pix: 9.8960e+00 
21-09-15 05:24:27.566 - INFO: [epoch: 10, iter: 498,900, lr:(1.024e-07,)] l_pix: 1.0110e+01 
21-09-15 05:26:08.756 - INFO: [epoch: 10, iter: 499,000, lr:(1.020e-07,)] l_pix: 1.0805e+01 
21-09-15 05:27:50.025 - INFO: [epoch: 10, iter: 499,100, lr:(1.016e-07,)] l_pix: 9.5047e+00 
21-09-15 05:29:31.127 - INFO: [epoch: 10, iter: 499,200, lr:(1.013e-07,)] l_pix: 1.2084e+01 
21-09-15 05:31:12.838 - INFO: [epoch: 10, iter: 499,300, lr:(1.010e-07,)] l_pix: 1.3625e+01 
21-09-15 05:32:54.872 - INFO: [epoch: 10, iter: 499,400, lr:(1.007e-07,)] l_pix: 1.1681e+01 
21-09-15 05:34:37.016 - INFO: [epoch: 10, iter: 499,500, lr:(1.005e-07,)] l_pix: 1.1705e+01 
21-09-15 05:36:18.947 - INFO: [epoch: 10, iter: 499,600, lr:(1.003e-07,)] l_pix: 1.4091e+01 
21-09-15 05:38:00.485 - INFO: [epoch: 10, iter: 499,700, lr:(1.002e-07,)] l_pix: 1.1020e+01 
21-09-15 05:39:42.024 - INFO: [epoch: 10, iter: 499,800, lr:(1.001e-07,)] l_pix: 1.2825e+01 
21-09-15 05:41:23.405 - INFO: [epoch: 10, iter: 499,900, lr:(1.000e-07,)] l_pix: 1.0798e+01 
21-09-15 05:43:04.870 - INFO: [epoch: 10, iter: 500,000, lr:(1.000e-07,)] l_pix: 1.2402e+01 
21-09-15 05:45:07.062 - INFO: # Validation # PSNR: 2.8896e+01
21-09-15 05:45:07.063 - INFO: Saving models and training states.
21-09-15 05:45:08.350 - INFO: Saving the final model.
21-09-15 05:45:08.729 - INFO: End of training.
