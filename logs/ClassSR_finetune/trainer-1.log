[INFO]: current net device: eth0, ip: 172.28.1.68
[INFO]: paddle job envs:
POD_IP=job-9c10f6503a57670cebebef58bbc57d9d-trainer-0.job-9c10f6503a57670cebebef58bbc57d9d
PADDLE_PORT=12345
PADDLE_TRAINER_ID=0
PADDLE_TRAINERS_NUM=1
PADDLE_USE_CUDA=1
NCCL_SOCKET_IFNAME=eth0
PADDLE_IS_LOCAL=1
OUTPUT_PATH=/root/paddlejob/workspace/output
LOCAL_LOG_PATH=/root/paddlejob/workspace/log
LOCAL_MOUNT_PATH=/mnt/code_20210920101911,/mnt/datasets_20210920101911
JOB_ID=job-9c10f6503a57670cebebef58bbc57d9d
TRAINING_ROLE=TRAINER
[INFO]: user command: bash classSR_resume.sh
[INFO]: start trainer
~/paddlejob/workspace/code /mnt
mkdir: cannot create directory `/root/paddlejob/workspace/output/tb_logger': File exists
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv
WARNING: You are using pip version 21.2.3; however, version 21.2.4 is available.
You should consider upgrading via the '/opt/_internal/cpython-3.7.0/bin/python -m pip install --upgrade pip' command.
dataset: /root/paddlejob/workspace/train_data/datasets/data106261/class.zip
WARNING 2021-09-20 10:41:37,068 launch.py:359] Not found distinct arguments and compiled with cuda or xpu. Default use collective mode
INFO 2021-09-20 10:41:37,070 launch_utils.py:510] Local start 4 processes. First process distributed environment info (Only For Debug): 
    +=======================================================================================+
    |                        Distributed Envs                      Value                    |
    +---------------------------------------------------------------------------------------+
    |                       PADDLE_TRAINER_ID                        0                      |
    |                 PADDLE_CURRENT_ENDPOINT                 127.0.0.1:55216               |
    |                     PADDLE_TRAINERS_NUM                        4                      |
    |                PADDLE_TRAINER_ENDPOINTS  ... 0.1:33282,127.0.0.1:50044,127.0.0.1:44990|
    |                     PADDLE_RANK_IN_NODE                        0                      |
    |                 PADDLE_LOCAL_DEVICE_IDS                        0                      |
    |                 PADDLE_WORLD_DEVICE_IDS                     0,1,2,3                   |
    |                     FLAGS_selected_gpus                        0                      |
    |             FLAGS_selected_accelerators                        0                      |
    +=======================================================================================+

INFO 2021-09-20 10:41:37,071 launch_utils.py:514] details abouts PADDLE_TRAINER_ENDPOINTS can be found in log/endpoints.log, and detail running logs maybe found in log/workerlog.0
-----------  Configuration Arguments -----------
gpus: 0,1,2,3
heter_worker_num: None
heter_workers: 
http_port: None
ips: 127.0.0.1
log_dir: log
nproc_per_node: None
run_mode: None
server_num: None
servers: 
training_script: train_ClassSR.py
training_script_args: ['--launcher', 'fleet', '-opt', 'config/train/train_ClassSR_RCAN_resume.yml']
worker_num: None
workers: 
------------------------------------------------
launch train in GPU mode!
launch proc_id:8423 idx:0
launch proc_id:8426 idx:1
launch proc_id:8429 idx:2
launch proc_id:8432 idx:3
export CUDA_VISIBLE_DEVICES=0,1,2,3
W0920 10:41:38.698294  8423 gen_comm_id_helper.cc:120] connect addr=127.0.0.1:44990 failed 1 times with reason: Connection refused retry after 0.5 seconds
I0920 10:41:39.207862  8423 nccl_context.cc:74] init nccl context nranks: 4 local rank: 0 gpu id: 0 ring id: 0
W0920 10:41:40.384282  8423 device_context.cc:404] Please NOTE: device: 0, GPU Compute Capability: 7.0, Driver API Version: 10.1, Runtime API Version: 10.1
W0920 10:41:40.390004  8423 device_context.cc:422] device: 0, cuDNN Version: 7.6.
I0920 10:41:51.188632  8423 nccl_context.cc:107] init nccl context nranks: 4 local rank: 0 gpu id: 0 ring id: 10
2021-09-20 10:41:51,318-INFO: [topology.py:152:__init__] HybridParallelInfo: rank_id: 0, dp_degree: 4, mp_degree: 1, pp_degree: 1, dp_group: [0, 1, 2, 3], mp_group: [0], pp_group: [0], check/clip group: [0]
pretrain_model path will be ignored when resuming training.
21-09-20 10:41:54.185 - INFO:   name: ClassSR_RCAN_ft_resume
  use_tb_logger: True
  model: ClassSR
  distortion: sr
  scale: 4
  gpu_ids: [0, 1, 2, 3]
  patch_size: 32
  step: 28
  fix_SR_module: False
  datasets:[
    train:[
      name: DIV2K
      mode: LQGT_rcan
      dataroot_GT: dataset/DIV2K_scale_sub/GT
      dataroot_LQ: dataset/DIV2K_scale_sub/LR
      use_shuffle: True
      n_workers: 6
      batch_size: 96
      GT_size: 128
      use_flip: True
      use_rot: True
      color: RGB
      phase: train
      scale: 4
      data_type: img
    ]
    val:[
      name: DIV2K10
      mode: LQGT_rcan
      dataroot_GT: dataset/val_10/HR
      dataroot_LQ: dataset/val_10/LR
      phase: val
      scale: 4
      data_type: img
    ]
  ]
  network_G:[
    which_model_G: classSR_3class_rcan
    in_nc: 3
    out_nc: 3
    scale: 4
  ]
  path:[
    pretrain_model_G: dataset/resume.pth
    pretrain_model_classifier: None
    pretrain_model_G_branch1: None
    pretrain_model_G_branch2: None
    pretrain_model_G_branch3: None
    resume_state: dataset/resume.state
    strict_load: True
    root: /root/paddlejob/workspace/code/ClassSR_paddle-develop
    experiments_root: /root/paddlejob/workspace/code/ClassSR_paddle-develop/experiments/ClassSR_RCAN_ft_resume
    models: /root/paddlejob/workspace/code/ClassSR_paddle-develop/experiments/ClassSR_RCAN_ft_resume/models
    training_state: /root/paddlejob/workspace/code/ClassSR_paddle-develop/experiments/ClassSR_RCAN_ft_resume/training_state
    log: /root/paddlejob/workspace/code/ClassSR_paddle-develop/experiments/ClassSR_RCAN_ft_resume
    val_images: /root/paddlejob/workspace/code/ClassSR_paddle-develop/experiments/ClassSR_RCAN_ft_resume/val_images
  ]
  train:[
    lr_G: 3e-05
    lr_scheme: CosineAnnealingLR_Restart
    beta1: 0.9
    beta2: 0.99
    niter: 200000
    warmup_iter: -1
    T_period: [500000, 20000]
    restarts: [500000]
    restart_weights: [0.5]
    eta_min: 2e-05
    pixel_criterion: ClassSR_loss
    l1w: 4
    class_loss_w: 0.5
    average_loss_w: 3
    manual_seed: 10
    val_freq: 5000.0
  ]
  logger:[
    print_freq: 100
    save_checkpoint_freq: 2000.0
  ]
  is_train: True
  dist: True

21-09-20 10:41:54.190 - INFO: Random seed: 10
21-09-20 10:42:13.570 - INFO: Dataset [LQGTDataset_rcan - DIV2K] is created.
21-09-20 10:42:13.570 - INFO: Number of train images: 1,594,077, iters: 16,605
21-09-20 10:42:13.571 - INFO: Total epochs needed: 13 for iters 200,000
21-09-20 10:42:13.571 - INFO: Dataset [LQGTDataset_rcan - DIV2K10] is created.
21-09-20 10:42:13.571 - INFO: Number of val images in [DIV2K10]: 10
21-09-20 10:42:17.494 - INFO: Loading model for G [dataset/resume.pth] ...
21-09-20 10:42:26.870 - INFO: Network G structure: DataParallel, with parameters: 30,114,948
21-09-20 10:42:26.870 - INFO: DataParallel(
  (_layers): classSR_3class_rcan(
    (classifier): Classifier(
      (lastOut): Linear(in_features=32, out_features=3, dtype=float32)
      (CondNet): Sequential(
        (0): Conv2D(3, 128, kernel_size=[4, 4], stride=[4, 4], data_format=NCHW)
        (1): LeakyReLU(negative_slope=0.1, name=True)
        (2): Conv2D(128, 128, kernel_size=[1, 1], data_format=NCHW)
        (3): LeakyReLU(negative_slope=0.1, name=True)
        (4): Conv2D(128, 128, kernel_size=[1, 1], data_format=NCHW)
        (5): LeakyReLU(negative_slope=0.1, name=True)
        (6): Conv2D(128, 128, kernel_size=[1, 1], data_format=NCHW)
        (7): LeakyReLU(negative_slope=0.1, name=True)
        (8): Conv2D(128, 32, kernel_size=[1, 1], data_format=NCHW)
      )
    )
    (net1): RCAN(
      (sub_mean): MeanShift(3, 3, kernel_size=[1, 1], data_format=NCHW)
      (add_mean): MeanShift(3, 3, kernel_size=[1, 1], data_format=NCHW)
      (head): Sequential(
        (0): Conv2D(3, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
      )
      (body): Sequential(
        (0): ResidualGroup(
          (body): Sequential(
            (0): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (1): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (2): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (3): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (4): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (5): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (6): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (7): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (8): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (9): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (10): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (11): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (12): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (13): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (14): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (15): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (16): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (17): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (18): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (19): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (20): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
          )
        )
        (1): ResidualGroup(
          (body): Sequential(
            (0): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (1): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (2): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (3): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (4): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (5): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (6): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (7): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (8): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (9): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (10): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (11): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (12): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (13): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (14): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (15): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (16): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (17): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (18): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (19): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (20): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
          )
        )
        (2): ResidualGroup(
          (body): Sequential(
            (0): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (1): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (2): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (3): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (4): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (5): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (6): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (7): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (8): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (9): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (10): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (11): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (12): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (13): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (14): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (15): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (16): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (17): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (18): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (19): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (20): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
          )
        )
        (3): ResidualGroup(
          (body): Sequential(
            (0): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (1): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (2): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (3): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (4): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (5): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (6): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (7): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (8): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (9): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (10): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (11): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (12): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (13): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (14): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (15): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (16): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (17): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (18): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (19): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (20): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
          )
        )
        (4): ResidualGroup(
          (body): Sequential(
            (0): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (1): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (2): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (3): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (4): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (5): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (6): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (7): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (8): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (9): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (10): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (11): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (12): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (13): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (14): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (15): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (16): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (17): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (18): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (19): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (20): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
          )
        )
        (5): ResidualGroup(
          (body): Sequential(
            (0): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (1): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (2): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (3): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (4): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (5): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (6): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (7): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (8): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (9): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (10): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (11): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (12): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (13): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (14): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (15): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (16): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (17): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (18): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (19): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (20): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
          )
        )
        (6): ResidualGroup(
          (body): Sequential(
            (0): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (1): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (2): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (3): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (4): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (5): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (6): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (7): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (8): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (9): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (10): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (11): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (12): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (13): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (14): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (15): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (16): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (17): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (18): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (19): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (20): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
          )
        )
        (7): ResidualGroup(
          (body): Sequential(
            (0): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (1): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (2): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (3): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (4): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (5): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (6): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (7): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (8): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (9): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (10): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (11): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (12): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (13): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (14): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (15): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (16): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (17): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (18): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (19): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (20): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
          )
        )
        (8): ResidualGroup(
          (body): Sequential(
            (0): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (1): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (2): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (3): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (4): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (5): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (6): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (7): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (8): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (9): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (10): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (11): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (12): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (13): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (14): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (15): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (16): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (17): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (18): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (19): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (20): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
          )
        )
        (9): ResidualGroup(
          (body): Sequential(
            (0): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (1): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (2): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (3): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (4): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (5): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (6): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (7): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (8): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (9): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (10): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (11): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (12): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (13): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (14): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (15): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (16): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (17): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (18): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (19): RCAB(
              (body): Sequential(
                (0): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(36, 2, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(2, 36, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (20): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
          )
        )
        (10): Conv2D(36, 36, kernel_size=[3, 3], padding=1, data_format=NCHW)
      )
      (tail): Sequential(
        (0): Upsampler(
          (0): Conv2D(36, 144, kernel_size=[3, 3], padding=1, data_format=NCHW)
          (1): PixelShuffle(upscale_factor=2)
          (2): Conv2D(36, 144, kernel_size=[3, 3], padding=1, data_format=NCHW)
          (3): PixelShuffle(upscale_factor=2)
        )
        (1): Conv2D(36, 3, kernel_size=[3, 3], padding=1, data_format=NCHW)
      )
    )
    (net2): RCAN(
      (sub_mean): MeanShift(3, 3, kernel_size=[1, 1], data_format=NCHW)
      (add_mean): MeanShift(3, 3, kernel_size=[1, 1], data_format=NCHW)
      (head): Sequential(
        (0): Conv2D(3, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
      )
      (body): Sequential(
        (0): ResidualGroup(
          (body): Sequential(
            (0): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (1): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (2): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (3): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (4): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (5): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (6): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (7): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (8): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (9): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (10): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (11): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (12): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (13): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (14): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (15): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (16): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (17): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (18): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (19): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (20): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
          )
        )
        (1): ResidualGroup(
          (body): Sequential(
            (0): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (1): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (2): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (3): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (4): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (5): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (6): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (7): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (8): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (9): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (10): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (11): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (12): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (13): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (14): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (15): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (16): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (17): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (18): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (19): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (20): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
          )
        )
        (2): ResidualGroup(
          (body): Sequential(
            (0): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (1): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (2): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (3): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (4): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (5): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (6): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (7): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (8): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (9): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (10): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (11): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (12): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (13): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (14): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (15): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (16): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (17): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (18): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (19): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (20): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
          )
        )
        (3): ResidualGroup(
          (body): Sequential(
            (0): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (1): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (2): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (3): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (4): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (5): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (6): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (7): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (8): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (9): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (10): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (11): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (12): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (13): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (14): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (15): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (16): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (17): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (18): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (19): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (20): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
          )
        )
        (4): ResidualGroup(
          (body): Sequential(
            (0): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (1): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (2): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (3): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (4): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (5): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (6): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (7): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (8): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (9): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (10): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (11): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (12): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (13): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (14): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (15): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (16): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (17): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (18): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (19): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (20): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
          )
        )
        (5): ResidualGroup(
          (body): Sequential(
            (0): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (1): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (2): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (3): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (4): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (5): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (6): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (7): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (8): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (9): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (10): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (11): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (12): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (13): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (14): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (15): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (16): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (17): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (18): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (19): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (20): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
          )
        )
        (6): ResidualGroup(
          (body): Sequential(
            (0): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (1): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (2): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (3): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (4): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (5): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (6): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (7): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (8): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (9): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (10): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (11): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (12): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (13): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (14): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (15): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (16): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (17): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (18): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (19): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (20): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
          )
        )
        (7): ResidualGroup(
          (body): Sequential(
            (0): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (1): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (2): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (3): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (4): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (5): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (6): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (7): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (8): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (9): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (10): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (11): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (12): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (13): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (14): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (15): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (16): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (17): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (18): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (19): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (20): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
          )
        )
        (8): ResidualGroup(
          (body): Sequential(
            (0): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (1): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (2): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (3): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (4): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (5): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (6): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (7): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (8): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (9): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (10): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (11): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (12): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (13): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (14): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (15): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (16): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (17): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (18): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (19): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (20): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
          )
        )
        (9): ResidualGroup(
          (body): Sequential(
            (0): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (1): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (2): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (3): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (4): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (5): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (6): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (7): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (8): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (9): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (10): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (11): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (12): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (13): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (14): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (15): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (16): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (17): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (18): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (19): RCAB(
              (body): Sequential(
                (0): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(50, 3, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(3, 50, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (20): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
          )
        )
        (10): Conv2D(50, 50, kernel_size=[3, 3], padding=1, data_format=NCHW)
      )
      (tail): Sequential(
        (0): Upsampler(
          (0): Conv2D(50, 200, kernel_size=[3, 3], padding=1, data_format=NCHW)
          (1): PixelShuffle(upscale_factor=2)
          (2): Conv2D(50, 200, kernel_size=[3, 3], padding=1, data_format=NCHW)
          (3): PixelShuffle(upscale_factor=2)
        )
        (1): Conv2D(50, 3, kernel_size=[3, 3], padding=1, data_format=NCHW)
      )
    )
    (net3): RCAN(
      (sub_mean): MeanShift(3, 3, kernel_size=[1, 1], data_format=NCHW)
      (add_mean): MeanShift(3, 3, kernel_size=[1, 1], data_format=NCHW)
      (head): Sequential(
        (0): Conv2D(3, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
      )
      (body): Sequential(
        (0): ResidualGroup(
          (body): Sequential(
            (0): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (1): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (2): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (3): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (4): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (5): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (6): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (7): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (8): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (9): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (10): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (11): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (12): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (13): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (14): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (15): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (16): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (17): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (18): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (19): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (20): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
          )
        )
        (1): ResidualGroup(
          (body): Sequential(
            (0): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (1): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (2): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (3): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (4): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (5): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (6): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (7): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (8): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (9): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (10): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (11): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (12): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (13): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (14): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (15): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (16): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (17): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (18): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (19): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (20): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
          )
        )
        (2): ResidualGroup(
          (body): Sequential(
            (0): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (1): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (2): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (3): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (4): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (5): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (6): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (7): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (8): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (9): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (10): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (11): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (12): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (13): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (14): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (15): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (16): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (17): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (18): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (19): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (20): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
          )
        )
        (3): ResidualGroup(
          (body): Sequential(
            (0): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (1): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (2): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (3): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (4): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (5): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (6): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (7): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (8): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (9): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (10): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (11): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (12): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (13): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (14): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (15): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (16): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (17): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (18): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (19): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (20): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
          )
        )
        (4): ResidualGroup(
          (body): Sequential(
            (0): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (1): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (2): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (3): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (4): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (5): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (6): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (7): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (8): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (9): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (10): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (11): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (12): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (13): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (14): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (15): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (16): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (17): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (18): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (19): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (20): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
          )
        )
        (5): ResidualGroup(
          (body): Sequential(
            (0): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (1): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (2): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (3): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (4): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (5): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (6): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (7): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (8): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (9): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (10): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (11): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (12): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (13): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (14): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (15): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (16): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (17): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (18): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (19): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (20): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
          )
        )
        (6): ResidualGroup(
          (body): Sequential(
            (0): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (1): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (2): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (3): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (4): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (5): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (6): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (7): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (8): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (9): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (10): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (11): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (12): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (13): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (14): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (15): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (16): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (17): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (18): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (19): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (20): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
          )
        )
        (7): ResidualGroup(
          (body): Sequential(
            (0): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (1): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (2): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (3): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (4): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (5): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (6): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (7): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (8): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (9): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (10): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (11): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (12): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (13): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (14): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (15): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (16): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (17): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (18): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (19): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (20): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
          )
        )
        (8): ResidualGroup(
          (body): Sequential(
            (0): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (1): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (2): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (3): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (4): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (5): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (6): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (7): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (8): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (9): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (10): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (11): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (12): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (13): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (14): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (15): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (16): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (17): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (18): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (19): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (20): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
          )
        )
        (9): ResidualGroup(
          (body): Sequential(
            (0): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (1): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (2): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (3): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (4): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (5): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (6): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (7): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (8): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (9): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (10): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (11): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (12): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (13): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (14): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (15): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (16): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (17): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (18): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (19): RCAB(
              (body): Sequential(
                (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (1): ReLU(name=True)
                (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
                (3): CALayer(
                  (avg_pool): AdaptiveAvgPool2D(output_size=1)
                  (conv_du): Sequential(
                    (0): Conv2D(64, 4, kernel_size=[1, 1], data_format=NCHW)
                    (1): ReLU()
                    (2): Conv2D(4, 64, kernel_size=[1, 1], data_format=NCHW)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (20): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
          )
        )
        (10): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
      )
      (tail): Sequential(
        (0): Upsampler(
          (0): Conv2D(64, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
          (1): PixelShuffle(upscale_factor=2)
          (2): Conv2D(64, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
          (3): PixelShuffle(upscale_factor=2)
        )
        (1): Conv2D(64, 3, kernel_size=[3, 3], padding=1, data_format=NCHW)
      )
    )
  )
)
21-09-20 10:42:26.995 - INFO: Model [ClassSR_Model] is created.
21-09-20 10:42:26.995 - INFO: Resuming training from epoch: 0, iter: 8000.
21-09-20 10:42:26.995 - INFO: Start training from epoch: 0, iter: 8000
21-09-20 10:47:15.531 - INFO: [epoch:  0, iter:   8,100, lr:(2.999e-05,)] l_pix: 1.1752e+01 class_loss: 5.3644e-06 average_loss: 5.0000e-01 loss: 4.8510e+01 
21-09-20 10:51:52.501 - INFO: [epoch:  0, iter:   8,200, lr:(2.999e-05,)] l_pix: 3.5720e+00 class_loss: 0.0000e+00 average_loss: 5.0000e-01 loss: 1.5788e+01 
21-09-20 10:56:29.024 - INFO: [epoch:  0, iter:   8,300, lr:(2.999e-05,)] l_pix: 7.8781e+00 class_loss: 0.0000e+00 average_loss: 1.8750e-01 loss: 3.2075e+01 
21-09-20 11:01:08.269 - INFO: [epoch:  0, iter:   8,400, lr:(2.999e-05,)] l_pix: 2.6526e+00 class_loss: 4.6290e-02 average_loss: 4.7222e-01 loss: 1.2050e+01 
21-09-20 11:05:44.276 - INFO: [epoch:  0, iter:   8,500, lr:(2.999e-05,)] l_pix: 3.7881e+00 class_loss: 0.0000e+00 average_loss: 1.0000e+00 loss: 1.8152e+01 
21-09-20 11:10:32.689 - INFO: [epoch:  0, iter:   8,600, lr:(2.999e-05,)] l_pix: 1.9171e+01 class_loss: 0.0000e+00 average_loss: 5.0000e-01 loss: 7.8183e+01 
21-09-20 11:15:12.428 - INFO: [epoch:  0, iter:   8,700, lr:(2.999e-05,)] l_pix: 1.2189e+01 class_loss: 4.5300e-06 average_loss: 8.1250e-01 loss: 5.1192e+01 
21-09-20 11:19:47.570 - INFO: [epoch:  0, iter:   8,800, lr:(2.999e-05,)] l_pix: 7.8108e+00 class_loss: 0.0000e+00 average_loss: 6.8750e-01 loss: 3.3306e+01 
21-09-20 11:24:24.523 - INFO: [epoch:  0, iter:   8,900, lr:(2.999e-05,)] l_pix: 1.2649e+01 class_loss: 3.8147e-06 average_loss: 8.7500e-01 loss: 5.3220e+01 
21-09-20 11:29:05.824 - INFO: [epoch:  0, iter:   9,000, lr:(2.999e-05,)] l_pix: 3.1194e+00 class_loss: 0.0000e+00 average_loss: 3.7500e-01 loss: 1.3603e+01 
21-09-20 11:33:40.618 - INFO: [epoch:  0, iter:   9,100, lr:(2.999e-05,)] l_pix: 1.6131e+00 class_loss: 7.3671e-05 average_loss: 5.6250e-01 loss: 8.1400e+00 
21-09-20 11:38:18.196 - INFO: [epoch:  0, iter:   9,200, lr:(2.999e-05,)] l_pix: 1.1101e+01 class_loss: 0.0000e+00 average_loss: 5.0000e-01 loss: 4.5902e+01 
21-09-20 11:43:02.661 - INFO: [epoch:  0, iter:   9,300, lr:(2.999e-05,)] l_pix: 1.5974e+00 class_loss: 0.0000e+00 average_loss: 8.1250e-01 loss: 8.8272e+00 
21-09-20 11:47:38.117 - INFO: [epoch:  0, iter:   9,400, lr:(2.999e-05,)] l_pix: 3.6006e+00 class_loss: 1.1921e-07 average_loss: 6.2500e-02 loss: 1.4590e+01 
21-09-20 11:52:16.373 - INFO: [epoch:  0, iter:   9,500, lr:(2.999e-05,)] l_pix: 1.7738e+00 class_loss: 2.3842e-07 average_loss: 5.0000e-01 loss: 8.5950e+00 
21-09-20 11:56:53.784 - INFO: [epoch:  0, iter:   9,600, lr:(2.999e-05,)] l_pix: 2.4513e+01 class_loss: 3.9339e-04 average_loss: 8.1280e-01 loss: 1.0049e+02 
21-09-20 12:01:30.194 - INFO: [epoch:  0, iter:   9,700, lr:(2.999e-05,)] l_pix: 1.0265e+01 class_loss: 0.0000e+00 average_loss: 4.3750e-01 loss: 4.2371e+01 
21-09-20 12:06:10.411 - INFO: [epoch:  0, iter:   9,800, lr:(2.999e-05,)] l_pix: 8.3441e+00 class_loss: 0.0000e+00 average_loss: 1.8750e-01 loss: 3.3939e+01 
21-09-20 12:10:47.261 - INFO: [epoch:  0, iter:   9,900, lr:(2.999e-05,)] l_pix: 4.3051e+00 class_loss: 1.1921e-07 average_loss: 3.1250e-01 loss: 1.8158e+01 
21-09-20 12:15:28.044 - INFO: [epoch:  0, iter:  10,000, lr:(2.999e-05,)] l_pix: 8.5068e+00 class_loss: 5.5313e-05 average_loss: 6.8754e-01 loss: 3.6090e+01 
[                              ] 0/10, elapsed: 0s, ETA:
Start...
[2F[J[>>>---------------------------] 1/10, 0.0 task/s, elapsed: 63s, ETA:   570s
Test 0801x4
[2F[J[>>>>>>------------------------] 2/10, 0.0 task/s, elapsed: 124s, ETA:   497s
Test 0802x4
[2F[J[>>>>>>>>>---------------------] 3/10, 0.0 task/s, elapsed: 197s, ETA:   459s
Test 0803x4
[2F[J[>>>>>>>>>>>>------------------] 4/10, 0.0 task/s, elapsed: 252s, ETA:   378s
Test 0804x4
[2F[J[>>>>>>>>>>>>>>>---------------] 5/10, 0.0 task/s, elapsed: 324s, ETA:   324s
Test 0805x4
[2F[J[>>>>>>>>>>>>>>>>>>------------] 6/10, 0.0 task/s, elapsed: 385s, ETA:   257s
Test 0806x4
[2F[J[>>>>>>>>>>>>>>>>>>>>>---------] 7/10, 0.0 task/s, elapsed: 434s, ETA:   186s
Test 0807x4
[2F[J[>>>>>>>>>>>>>>>>>>>>>>>>------] 8/10, 0.0 task/s, elapsed: 495s, ETA:   124s
Test 0808x4
[2F[J[>>>>>>>>>>>>>>>>>>>>>>>>>>>---] 9/10, 0.0 task/s, elapsed: 556s, ETA:    62s
Test 0809x4
[2F[J[>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>] 10/10, 0.0 task/s, elapsed: 628s, ETA:     0s
Test 0810x4
21-09-20 12:25:56.503 - INFO: # Validation # PSNR: 2.9617e+01
21-09-20 12:25:56.504 - INFO: # Validation # FLOPs: 2.1146e+01
21-09-20 12:25:56.504 - INFO: # Validation # Percent: 6.4865e-01
21-09-20 12:25:56.504 - INFO: # Validation # TYPE num: 838 365 831 
21-09-20 12:25:56.504 - INFO: # Validation # PSNR Class: 35.93749018692855 32.67667766133459 30.13588252957044
21-09-20 12:25:56.504 - INFO: Saving models and training states.
21-09-20 12:30:49.945 - INFO: [epoch:  0, iter:  10,100, lr:(2.999e-05,)] l_pix: 8.6306e+00 class_loss: 0.0000e+00 average_loss: 5.0000e-01 loss: 3.6022e+01 
21-09-20 12:35:29.139 - INFO: [epoch:  0, iter:  10,200, lr:(2.999e-05,)] l_pix: 2.7339e+00 class_loss: 0.0000e+00 average_loss: 6.2500e-01 loss: 1.2810e+01 
21-09-20 12:40:13.242 - INFO: [epoch:  0, iter:  10,300, lr:(2.999e-05,)] l_pix: 2.5291e+00 class_loss: 0.0000e+00 average_loss: 5.0000e-01 loss: 1.1616e+01 
21-09-20 12:45:12.867 - INFO: [epoch:  0, iter:  10,400, lr:(2.999e-05,)] l_pix: 4.9657e+00 class_loss: 0.0000e+00 average_loss: 8.1250e-01 loss: 2.2300e+01 
21-09-20 12:49:54.183 - INFO: [epoch:  0, iter:  10,500, lr:(2.999e-05,)] l_pix: 6.9266e+00 class_loss: 0.0000e+00 average_loss: 9.3750e-01 loss: 3.0519e+01 
21-09-20 12:54:43.451 - INFO: [epoch:  0, iter:  10,600, lr:(2.999e-05,)] l_pix: 1.1272e+00 class_loss: 0.0000e+00 average_loss: 6.8750e-01 loss: 6.5713e+00 
21-09-20 12:59:19.725 - INFO: [epoch:  0, iter:  10,700, lr:(2.999e-05,)] l_pix: 2.8442e+00 class_loss: 0.0000e+00 average_loss: 5.6250e-01 loss: 1.3064e+01 
21-09-20 13:03:56.244 - INFO: [epoch:  0, iter:  10,800, lr:(2.999e-05,)] l_pix: 1.3278e+01 class_loss: 0.0000e+00 average_loss: 3.7500e-01 loss: 5.4235e+01 
21-09-20 13:08:44.832 - INFO: [epoch:  0, iter:  10,900, lr:(2.999e-05,)] l_pix: 1.1467e+01 class_loss: 0.0000e+00 average_loss: 5.0000e-01 loss: 4.7370e+01 
21-09-20 13:13:26.893 - INFO: [epoch:  0, iter:  11,000, lr:(2.999e-05,)] l_pix: 8.8436e+00 class_loss: 0.0000e+00 average_loss: 5.0000e-01 loss: 3.6874e+01 
21-09-20 13:18:04.607 - INFO: [epoch:  0, iter:  11,100, lr:(2.999e-05,)] l_pix: 5.6933e+00 class_loss: 0.0000e+00 average_loss: 1.0000e+00 loss: 2.5773e+01 
21-09-20 13:22:47.298 - INFO: [epoch:  0, iter:  11,200, lr:(2.999e-05,)] l_pix: 8.9351e+00 class_loss: 0.0000e+00 average_loss: 6.2500e-01 loss: 3.7616e+01 
21-09-20 13:27:25.071 - INFO: [epoch:  0, iter:  11,300, lr:(2.999e-05,)] l_pix: 6.9929e+00 class_loss: 2.0627e-02 average_loss: 3.1250e-01 loss: 2.8919e+01 
21-09-20 13:32:04.783 - INFO: [epoch:  0, iter:  11,400, lr:(2.999e-05,)] l_pix: 8.0325e+00 class_loss: 0.0000e+00 average_loss: 5.0000e-01 loss: 3.3630e+01 
21-09-20 13:36:42.418 - INFO: [epoch:  0, iter:  11,500, lr:(2.999e-05,)] l_pix: 2.4833e+00 class_loss: 8.1596e-03 average_loss: 3.1862e-01 loss: 1.0893e+01 
21-09-20 13:41:19.593 - INFO: [epoch:  0, iter:  11,600, lr:(2.999e-05,)] l_pix: 1.5051e+00 class_loss: 0.0000e+00 average_loss: 5.6250e-01 loss: 7.7078e+00 
21-09-20 13:45:55.512 - INFO: [epoch:  0, iter:  11,700, lr:(2.999e-05,)] l_pix: 5.7674e+00 class_loss: 0.0000e+00 average_loss: 9.3750e-01 loss: 2.5882e+01 
21-09-20 13:50:32.423 - INFO: [epoch:  0, iter:  11,800, lr:(2.999e-05,)] l_pix: 7.6079e+00 class_loss: 0.0000e+00 average_loss: 5.6250e-01 loss: 3.2119e+01 
21-09-20 13:55:09.141 - INFO: [epoch:  0, iter:  11,900, lr:(2.999e-05,)] l_pix: 1.8719e+01 class_loss: 0.0000e+00 average_loss: 8.1250e-01 loss: 7.7313e+01 
21-09-20 13:59:48.862 - INFO: [epoch:  0, iter:  12,000, lr:(2.999e-05,)] l_pix: 3.6472e+00 class_loss: 0.0000e+00 average_loss: 5.6250e-01 loss: 1.6276e+01 
21-09-20 13:59:48.867 - INFO: Saving models and training states.
21-09-20 14:04:33.645 - INFO: [epoch:  0, iter:  12,100, lr:(2.999e-05,)] l_pix: 3.5714e+00 class_loss: 0.0000e+00 average_loss: 8.1250e-01 loss: 1.6723e+01 
21-09-20 14:09:13.498 - INFO: [epoch:  0, iter:  12,200, lr:(2.999e-05,)] l_pix: 6.3424e+00 class_loss: 0.0000e+00 average_loss: 3.1250e-01 loss: 2.6307e+01 
21-09-20 14:13:50.545 - INFO: [epoch:  0, iter:  12,300, lr:(2.999e-05,)] l_pix: 5.6210e+00 class_loss: 0.0000e+00 average_loss: 6.8750e-01 loss: 2.4547e+01 
21-09-20 14:18:30.720 - INFO: [epoch:  0, iter:  12,400, lr:(2.998e-05,)] l_pix: 2.3345e+00 class_loss: 4.9829e-05 average_loss: 6.8746e-01 loss: 1.1400e+01 
21-09-20 14:23:09.184 - INFO: [epoch:  0, iter:  12,500, lr:(2.998e-05,)] l_pix: 3.3692e+00 class_loss: 0.0000e+00 average_loss: 5.0000e-01 loss: 1.4977e+01 
21-09-20 14:27:47.855 - INFO: [epoch:  0, iter:  12,600, lr:(2.998e-05,)] l_pix: 1.5423e+01 class_loss: 0.0000e+00 average_loss: 3.7500e-01 loss: 6.2817e+01 
21-09-20 14:32:25.902 - INFO: [epoch:  0, iter:  12,700, lr:(2.998e-05,)] l_pix: 3.3867e+00 class_loss: 0.0000e+00 average_loss: 3.1250e-01 loss: 1.4484e+01 
21-09-20 14:37:03.411 - INFO: [epoch:  0, iter:  12,800, lr:(2.998e-05,)] l_pix: 7.9992e+00 class_loss: 0.0000e+00 average_loss: 4.3750e-01 loss: 3.3309e+01 
21-09-20 14:41:52.369 - INFO: [epoch:  0, iter:  12,900, lr:(2.998e-05,)] l_pix: 2.4816e+00 class_loss: 0.0000e+00 average_loss: 1.8750e-01 loss: 1.0489e+01 
21-09-20 14:46:30.342 - INFO: [epoch:  0, iter:  13,000, lr:(2.998e-05,)] l_pix: 9.6413e+00 class_loss: 0.0000e+00 average_loss: 7.5000e-01 loss: 4.0815e+01 
21-09-20 14:51:11.152 - INFO: [epoch:  0, iter:  13,100, lr:(2.998e-05,)] l_pix: 6.9809e+00 class_loss: 0.0000e+00 average_loss: 5.0000e-01 loss: 2.9423e+01 
21-09-20 14:55:50.296 - INFO: [epoch:  0, iter:  13,200, lr:(2.998e-05,)] l_pix: 6.2782e+00 class_loss: 3.9858e-03 average_loss: 9.9701e-01 loss: 2.8106e+01 
21-09-20 15:00:30.087 - INFO: [epoch:  0, iter:  13,300, lr:(2.998e-05,)] l_pix: 3.9668e+00 class_loss: 0.0000e+00 average_loss: 7.5000e-01 loss: 1.8117e+01 
21-09-20 15:05:11.115 - INFO: [epoch:  0, iter:  13,400, lr:(2.998e-05,)] l_pix: 5.9425e+00 class_loss: 6.2201e-03 average_loss: 4.4216e-01 loss: 2.5100e+01 
21-09-20 15:09:51.455 - INFO: [epoch:  0, iter:  13,500, lr:(2.998e-05,)] l_pix: 6.0024e+00 class_loss: 0.0000e+00 average_loss: 5.0000e-01 loss: 2.5510e+01 
21-09-20 15:14:33.285 - INFO: [epoch:  0, iter:  13,600, lr:(2.998e-05,)] l_pix: 3.4656e+00 class_loss: 0.0000e+00 average_loss: 8.1250e-01 loss: 1.6300e+01 
21-09-20 15:19:12.332 - INFO: [epoch:  0, iter:  13,700, lr:(2.998e-05,)] l_pix: 2.6251e+00 class_loss: 0.0000e+00 average_loss: 7.5000e-01 loss: 1.2750e+01 
21-09-20 15:23:58.112 - INFO: [epoch:  0, iter:  13,800, lr:(2.998e-05,)] l_pix: 8.9139e+00 class_loss: 0.0000e+00 average_loss: 3.7500e-01 loss: 3.6781e+01 
21-09-20 15:28:35.137 - INFO: [epoch:  0, iter:  13,900, lr:(2.998e-05,)] l_pix: 1.3109e+00 class_loss: 0.0000e+00 average_loss: 9.3750e-01 loss: 8.0563e+00 
21-09-20 15:33:13.932 - INFO: [epoch:  0, iter:  14,000, lr:(2.998e-05,)] l_pix: 8.9447e+00 class_loss: 0.0000e+00 average_loss: 9.3750e-01 loss: 3.8591e+01 
21-09-20 15:33:13.939 - INFO: Saving models and training states.
21-09-20 15:37:56.131 - INFO: [epoch:  0, iter:  14,100, lr:(2.998e-05,)] l_pix: 5.1992e+00 class_loss: 3.8147e-06 average_loss: 3.7500e-01 loss: 2.1922e+01 
21-09-20 15:42:34.004 - INFO: [epoch:  0, iter:  14,200, lr:(2.998e-05,)] l_pix: 2.1213e+00 class_loss: 0.0000e+00 average_loss: 3.7500e-01 loss: 9.6102e+00 
21-09-20 15:47:13.918 - INFO: [epoch:  0, iter:  14,300, lr:(2.998e-05,)] l_pix: 7.9417e+00 class_loss: 0.0000e+00 average_loss: 1.0000e+00 loss: 3.4767e+01 
21-09-20 15:51:56.339 - INFO: [epoch:  0, iter:  14,400, lr:(2.998e-05,)] l_pix: 7.8449e+00 class_loss: 3.8748e-03 average_loss: 6.2209e-01 loss: 3.3248e+01 
21-09-20 15:56:43.991 - INFO: [epoch:  0, iter:  14,500, lr:(2.998e-05,)] l_pix: 2.0693e+00 class_loss: 0.0000e+00 average_loss: 9.3750e-01 loss: 1.1090e+01 
21-09-20 16:01:21.173 - INFO: [epoch:  0, iter:  14,600, lr:(2.998e-05,)] l_pix: 6.8699e+00 class_loss: 1.2878e-03 average_loss: 8.1347e-01 loss: 2.9920e+01 
21-09-20 16:06:00.781 - INFO: [epoch:  0, iter:  14,700, lr:(2.998e-05,)] l_pix: 4.1357e+00 class_loss: 0.0000e+00 average_loss: 5.0000e-01 loss: 1.8043e+01 
21-09-20 16:10:43.446 - INFO: [epoch:  0, iter:  14,800, lr:(2.998e-05,)] l_pix: 8.3950e+00 class_loss: 0.0000e+00 average_loss: 1.8750e-01 loss: 3.4142e+01 
21-09-20 16:15:22.605 - INFO: [epoch:  0, iter:  14,900, lr:(2.998e-05,)] l_pix: 6.6482e+00 class_loss: 1.1206e-05 average_loss: 5.6249e-01 loss: 2.8280e+01 
21-09-20 16:20:08.684 - INFO: [epoch:  0, iter:  15,000, lr:(2.998e-05,)] l_pix: 6.7036e+00 class_loss: 0.0000e+00 average_loss: 5.0000e-01 loss: 2.8314e+01 
[                              ] 0/10, elapsed: 0s, ETA:
Start...
[2F[J[>>>---------------------------] 1/10, 0.0 task/s, elapsed: 61s, ETA:   551s
Test 0801x4
[2F[J[>>>>>>------------------------] 2/10, 0.0 task/s, elapsed: 121s, ETA:   485s
Test 0802x4
[2F[J[>>>>>>>>>---------------------] 3/10, 0.0 task/s, elapsed: 193s, ETA:   449s
Test 0803x4
[2F[J[>>>>>>>>>>>>------------------] 4/10, 0.0 task/s, elapsed: 248s, ETA:   372s
Test 0804x4
[2F[J[>>>>>>>>>>>>>>>---------------] 5/10, 0.0 task/s, elapsed: 320s, ETA:   320s
Test 0805x4
[2F[J[>>>>>>>>>>>>>>>>>>------------] 6/10, 0.0 task/s, elapsed: 381s, ETA:   254s
Test 0806x4
[2F[J[>>>>>>>>>>>>>>>>>>>>>---------] 7/10, 0.0 task/s, elapsed: 431s, ETA:   185s
Test 0807x4
[2F[J[>>>>>>>>>>>>>>>>>>>>>>>>------] 8/10, 0.0 task/s, elapsed: 492s, ETA:   123s
Test 0808x4
[2F[J[>>>>>>>>>>>>>>>>>>>>>>>>>>>---] 9/10, 0.0 task/s, elapsed: 551s, ETA:    61s
Test 0809x4
[2F[J[>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>] 10/10, 0.0 task/s, elapsed: 623s, ETA:     0s
Test 0810x4
21-09-20 16:30:31.572 - INFO: # Validation # PSNR: 2.9686e+01
21-09-20 16:30:31.572 - INFO: # Validation # FLOPs: 2.1122e+01
21-09-20 16:30:31.572 - INFO: # Validation # Percent: 6.4790e-01
21-09-20 16:30:31.572 - INFO: # Validation # TYPE num: 806 425 803 
21-09-20 16:30:31.573 - INFO: # Validation # PSNR Class: 36.63078191033201 32.083688459218415 30.35308647564285
21-09-20 16:35:11.433 - INFO: [epoch:  0, iter:  15,100, lr:(2.998e-05,)] l_pix: 5.8257e+00 class_loss: 0.0000e+00 average_loss: 3.7500e-01 loss: 2.4428e+01 
21-09-20 16:39:48.935 - INFO: [epoch:  0, iter:  15,200, lr:(2.998e-05,)] l_pix: 4.1914e+00 class_loss: 0.0000e+00 average_loss: 2.5000e-01 loss: 1.7515e+01 
21-09-20 16:44:25.804 - INFO: [epoch:  0, iter:  15,300, lr:(2.998e-05,)] l_pix: 2.1639e+00 class_loss: 2.3842e-07 average_loss: 2.5000e-01 loss: 9.4057e+00 
21-09-20 16:49:05.503 - INFO: [epoch:  0, iter:  15,400, lr:(2.998e-05,)] l_pix: 7.6759e+00 class_loss: 1.3523e-03 average_loss: 5.0019e-01 loss: 3.2205e+01 
21-09-20 16:53:46.961 - INFO: [epoch:  0, iter:  15,500, lr:(2.998e-05,)] l_pix: 3.9089e+00 class_loss: 0.0000e+00 average_loss: 6.8750e-01 loss: 1.7698e+01 
21-09-20 16:58:39.841 - INFO: [epoch:  0, iter:  15,600, lr:(2.998e-05,)] l_pix: 1.7508e+00 class_loss: 0.0000e+00 average_loss: 3.7500e-01 loss: 8.1280e+00 
21-09-20 17:03:30.171 - INFO: [epoch:  0, iter:  15,700, lr:(2.998e-05,)] l_pix: 6.6427e+00 class_loss: 5.9440e-03 average_loss: 3.7500e-01 loss: 2.7699e+01 
21-09-20 17:08:14.585 - INFO: [epoch:  0, iter:  15,800, lr:(2.998e-05,)] l_pix: 8.4363e+00 class_loss: 0.0000e+00 average_loss: 5.6250e-01 loss: 3.5433e+01 
21-09-20 17:12:48.292 - INFO: [epoch:  0, iter:  15,900, lr:(2.998e-05,)] l_pix: 7.2057e+00 class_loss: 0.0000e+00 average_loss: 6.2500e-02 loss: 2.9010e+01 
21-09-20 17:17:27.152 - INFO: [epoch:  0, iter:  16,000, lr:(2.997e-05,)] l_pix: 1.3401e+00 class_loss: 0.0000e+00 average_loss: 1.0000e+00 loss: 8.3606e+00 
21-09-20 17:17:27.158 - INFO: Saving models and training states.
21-09-20 17:22:17.105 - INFO: [epoch:  0, iter:  16,100, lr:(2.997e-05,)] l_pix: 2.0116e+00 class_loss: 0.0000e+00 average_loss: 1.0000e+00 loss: 1.1046e+01 
21-09-20 17:27:02.950 - INFO: [epoch:  0, iter:  16,200, lr:(2.997e-05,)] l_pix: 1.0221e+01 class_loss: 0.0000e+00 average_loss: 5.6250e-01 loss: 4.2570e+01 
21-09-20 17:31:49.745 - INFO: [epoch:  0, iter:  16,300, lr:(2.997e-05,)] l_pix: 4.3284e+00 class_loss: 2.5861e-03 average_loss: 6.2694e-01 loss: 1.9196e+01 
21-09-20 17:36:27.407 - INFO: [epoch:  0, iter:  16,400, lr:(2.997e-05,)] l_pix: 2.0748e+00 class_loss: 0.0000e+00 average_loss: 7.5000e-01 loss: 1.0549e+01 
21-09-20 17:41:22.307 - INFO: [epoch:  0, iter:  16,500, lr:(2.997e-05,)] l_pix: 1.3427e+01 class_loss: 0.0000e+00 average_loss: 7.5000e-01 loss: 5.5957e+01 
21-09-20 17:46:08.108 - INFO: [epoch:  0, iter:  16,600, lr:(2.997e-05,)] l_pix: 1.0839e+01 class_loss: 0.0000e+00 average_loss: 9.3750e-01 loss: 4.6168e+01 
21-09-20 17:50:51.895 - INFO: [epoch:  0, iter:  16,700, lr:(2.997e-05,)] l_pix: 1.2524e+01 class_loss: 4.0531e-06 average_loss: 6.8750e-01 loss: 5.2158e+01 
21-09-20 17:55:31.335 - INFO: [epoch:  0, iter:  16,800, lr:(2.997e-05,)] l_pix: 3.8383e-01 class_loss: 0.0000e+00 average_loss: 1.0000e+00 loss: 4.5353e+00 
21-09-20 18:00:10.535 - INFO: [epoch:  0, iter:  16,900, lr:(2.997e-05,)] l_pix: 6.1700e+00 class_loss: 0.0000e+00 average_loss: 9.3750e-01 loss: 2.7492e+01 
21-09-20 18:04:48.001 - INFO: [epoch:  0, iter:  17,000, lr:(2.997e-05,)] l_pix: 7.3532e+00 class_loss: 0.0000e+00 average_loss: 1.0000e+00 loss: 3.2413e+01 
21-09-20 18:09:27.160 - INFO: [epoch:  0, iter:  17,100, lr:(2.997e-05,)] l_pix: 6.9714e+00 class_loss: 0.0000e+00 average_loss: 7.5000e-01 loss: 3.0136e+01 
21-09-20 18:14:04.432 - INFO: [epoch:  0, iter:  17,200, lr:(2.997e-05,)] l_pix: 2.1489e+00 class_loss: 2.9508e-02 average_loss: 6.0287e-01 loss: 1.0419e+01 
21-09-20 18:18:52.638 - INFO: [epoch:  0, iter:  17,300, lr:(2.997e-05,)] l_pix: 7.9313e+00 class_loss: 0.0000e+00 average_loss: 3.1250e-01 loss: 3.2663e+01 
21-09-20 18:23:29.891 - INFO: [epoch:  0, iter:  17,400, lr:(2.997e-05,)] l_pix: 6.8638e+00 class_loss: 3.8211e-02 average_loss: 3.1250e-01 loss: 2.8412e+01 
21-09-20 18:28:06.838 - INFO: [epoch:  0, iter:  17,500, lr:(2.997e-05,)] l_pix: 2.6527e+00 class_loss: 0.0000e+00 average_loss: 5.0000e-01 loss: 1.2111e+01 
21-09-20 18:32:53.948 - INFO: [epoch:  0, iter:  17,600, lr:(2.997e-05,)] l_pix: 6.6140e+00 class_loss: 0.0000e+00 average_loss: 9.3750e-01 loss: 2.9268e+01 
21-09-20 18:37:38.216 - INFO: [epoch:  0, iter:  17,700, lr:(2.997e-05,)] l_pix: 7.3834e+00 class_loss: 3.7773e-03 average_loss: 5.0000e-01 loss: 3.1035e+01 
21-09-20 18:42:19.925 - INFO: [epoch:  0, iter:  17,800, lr:(2.997e-05,)] l_pix: 5.8564e+00 class_loss: 2.2304e-04 average_loss: 6.8764e-01 loss: 2.5489e+01 
21-09-20 18:46:56.994 - INFO: [epoch:  0, iter:  17,900, lr:(2.997e-05,)] l_pix: 7.5084e+00 class_loss: 0.0000e+00 average_loss: 6.2500e-01 loss: 3.1908e+01 
21-09-20 18:51:34.215 - INFO: [epoch:  0, iter:  18,000, lr:(2.997e-05,)] l_pix: 4.4682e+00 class_loss: 1.1921e-07 average_loss: 6.2500e-01 loss: 1.9748e+01 
21-09-20 18:51:34.220 - INFO: Saving models and training states.
21-09-20 18:56:17.365 - INFO: [epoch:  0, iter:  18,100, lr:(2.997e-05,)] l_pix: 4.7097e+00 class_loss: 5.8413e-05 average_loss: 6.8754e-01 loss: 2.0901e+01 
21-09-20 19:00:58.782 - INFO: [epoch:  0, iter:  18,200, lr:(2.997e-05,)] l_pix: 3.2752e+00 class_loss: 0.0000e+00 average_loss: 3.1250e-01 loss: 1.4038e+01 
21-09-20 19:05:40.041 - INFO: [epoch:  0, iter:  18,300, lr:(2.997e-05,)] l_pix: 7.2791e+00 class_loss: 0.0000e+00 average_loss: 6.8750e-01 loss: 3.1179e+01 
21-09-20 19:10:17.103 - INFO: [epoch:  0, iter:  18,400, lr:(2.997e-05,)] l_pix: 1.1717e+00 class_loss: 0.0000e+00 average_loss: 1.0000e+00 loss: 7.6866e+00 
21-09-20 19:14:55.417 - INFO: [epoch:  0, iter:  18,500, lr:(2.997e-05,)] l_pix: 2.9242e+00 class_loss: 0.0000e+00 average_loss: 5.6250e-01 loss: 1.3384e+01 
21-09-20 19:19:34.930 - INFO: [epoch:  0, iter:  18,600, lr:(2.997e-05,)] l_pix: 7.1746e+00 class_loss: 0.0000e+00 average_loss: 6.2500e-02 loss: 2.8886e+01 
21-09-20 19:24:24.010 - INFO: [epoch:  0, iter:  18,700, lr:(2.997e-05,)] l_pix: 8.4799e+00 class_loss: 1.0995e-02 average_loss: 5.5522e-01 loss: 3.5591e+01 
21-09-20 19:29:01.081 - INFO: [epoch:  0, iter:  18,800, lr:(2.997e-05,)] l_pix: 1.6819e+01 class_loss: 0.0000e+00 average_loss: 3.7500e-01 loss: 6.8399e+01 
21-09-20 19:33:37.374 - INFO: [epoch:  0, iter:  18,900, lr:(2.996e-05,)] l_pix: 5.5625e+00 class_loss: 0.0000e+00 average_loss: 1.8750e-01 loss: 2.2812e+01 
21-09-20 19:38:13.938 - INFO: [epoch:  0, iter:  19,000, lr:(2.996e-05,)] l_pix: 3.6287e+00 class_loss: 0.0000e+00 average_loss: 5.0000e-01 loss: 1.6015e+01 
21-09-20 19:43:00.814 - INFO: [epoch:  0, iter:  19,100, lr:(2.996e-05,)] l_pix: 1.9665e+00 class_loss: 7.4506e-04 average_loss: 2.5056e-01 loss: 8.6181e+00 
21-09-20 19:47:39.856 - INFO: [epoch:  0, iter:  19,200, lr:(2.996e-05,)] l_pix: 5.0490e+00 class_loss: 0.0000e+00 average_loss: 5.6250e-01 loss: 2.1884e+01 
21-09-20 19:52:16.910 - INFO: [epoch:  0, iter:  19,300, lr:(2.996e-05,)] l_pix: 2.2904e+00 class_loss: 0.0000e+00 average_loss: 3.7500e-01 loss: 1.0287e+01 
21-09-20 19:56:54.081 - INFO: [epoch:  0, iter:  19,400, lr:(2.996e-05,)] l_pix: 7.3839e+00 class_loss: 0.0000e+00 average_loss: 8.7500e-01 loss: 3.2161e+01 
21-09-20 20:01:43.454 - INFO: [epoch:  0, iter:  19,500, lr:(2.996e-05,)] l_pix: 4.0730e+00 class_loss: 0.0000e+00 average_loss: 3.7500e-01 loss: 1.7417e+01 
21-09-20 20:06:20.283 - INFO: [epoch:  0, iter:  19,600, lr:(2.996e-05,)] l_pix: 8.0917e+00 class_loss: 0.0000e+00 average_loss: 3.1250e-01 loss: 3.3304e+01 
21-09-20 20:10:57.915 - INFO: [epoch:  0, iter:  19,700, lr:(2.996e-05,)] l_pix: 1.7499e+00 class_loss: 0.0000e+00 average_loss: 1.8750e-01 loss: 7.5621e+00 
21-09-20 20:15:35.100 - INFO: [epoch:  0, iter:  19,800, lr:(2.996e-05,)] l_pix: 3.1263e+00 class_loss: 0.0000e+00 average_loss: 3.7500e-01 loss: 1.3630e+01 
21-09-20 20:20:20.795 - INFO: [epoch:  0, iter:  19,900, lr:(2.996e-05,)] l_pix: 1.2431e+00 class_loss: 2.9325e-05 average_loss: 6.2522e-02 loss: 5.1600e+00 
21-09-20 20:25:00.948 - INFO: [epoch:  0, iter:  20,000, lr:(2.996e-05,)] l_pix: 3.8218e+00 class_loss: 0.0000e+00 average_loss: 9.3750e-01 loss: 1.8100e+01 
[                              ] 0/10, elapsed: 0s, ETA:
Start...
[2F[J[>>>---------------------------] 1/10, 0.0 task/s, elapsed: 62s, ETA:   562s
Test 0801x4
[2F[J[>>>>>>------------------------] 2/10, 0.0 task/s, elapsed: 124s, ETA:   496s
Test 0802x4
[2F[J[>>>>>>>>>---------------------] 3/10, 0.0 task/s, elapsed: 196s, ETA:   457s
Test 0803x4
[2F[J[>>>>>>>>>>>>------------------] 4/10, 0.0 task/s, elapsed: 252s, ETA:   378s
Test 0804x4
[2F[J[>>>>>>>>>>>>>>>---------------] 5/10, 0.0 task/s, elapsed: 324s, ETA:   324s
Test 0805x4
[2F[J[>>>>>>>>>>>>>>>>>>------------] 6/10, 0.0 task/s, elapsed: 386s, ETA:   257s
Test 0806x4
[2F[J[>>>>>>>>>>>>>>>>>>>>>---------] 7/10, 0.0 task/s, elapsed: 436s, ETA:   187s
Test 0807x4
[2F[J[>>>>>>>>>>>>>>>>>>>>>>>>------] 8/10, 0.0 task/s, elapsed: 497s, ETA:   124s
Test 0808x4
[2F[J[>>>>>>>>>>>>>>>>>>>>>>>>>>>---] 9/10, 0.0 task/s, elapsed: 557s, ETA:    62s
Test 0809x4
[2F[J[>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>] 10/10, 0.0 task/s, elapsed: 629s, ETA:     0s
Test 0810x4
21-09-20 20:35:29.851 - INFO: # Validation # PSNR: 2.9714e+01
21-09-20 20:35:29.851 - INFO: # Validation # FLOPs: 2.1535e+01
21-09-20 20:35:29.851 - INFO: # Validation # Percent: 6.6060e-01
21-09-20 20:35:29.851 - INFO: # Validation # TYPE num: 726 499 809 
21-09-20 20:35:29.851 - INFO: # Validation # PSNR Class: 37.253426497440884 31.698943615097562 30.626004659787547
21-09-20 20:35:29.852 - INFO: Saving models and training states.
21-09-20 20:40:10.984 - INFO: [epoch:  0, iter:  20,100, lr:(2.996e-05,)] l_pix: 1.1355e+01 class_loss: 0.0000e+00 average_loss: 6.2500e-01 loss: 4.7297e+01 
21-09-20 20:44:49.927 - INFO: [epoch:  0, iter:  20,200, lr:(2.996e-05,)] l_pix: 9.1502e+00 class_loss: 0.0000e+00 average_loss: 2.5000e-01 loss: 3.7351e+01 
21-09-20 20:49:26.084 - INFO: [epoch:  0, iter:  20,300, lr:(2.996e-05,)] l_pix: 4.4179e+00 class_loss: 0.0000e+00 average_loss: 5.6250e-01 loss: 1.9359e+01 
21-09-20 20:54:04.298 - INFO: [epoch:  0, iter:  20,400, lr:(2.996e-05,)] l_pix: 1.3778e+01 class_loss: 1.7111e-02 average_loss: 6.1217e-01 loss: 5.6956e+01 
21-09-20 20:58:57.721 - INFO: [epoch:  0, iter:  20,500, lr:(2.996e-05,)] l_pix: 9.1387e+00 class_loss: 0.0000e+00 average_loss: 3.1250e-01 loss: 3.7492e+01 
21-09-20 21:03:36.906 - INFO: [epoch:  0, iter:  20,600, lr:(2.996e-05,)] l_pix: 1.6493e+00 class_loss: 0.0000e+00 average_loss: 6.2500e-01 loss: 8.4720e+00 
21-09-20 21:08:18.339 - INFO: [epoch:  0, iter:  20,700, lr:(2.996e-05,)] l_pix: 1.6539e+01 class_loss: 0.0000e+00 average_loss: 1.0000e+00 loss: 6.9155e+01 
21-09-20 21:13:09.656 - INFO: [epoch:  0, iter:  20,800, lr:(2.996e-05,)] l_pix: 7.2891e+00 class_loss: 2.3842e-07 average_loss: 3.1250e-01 loss: 3.0094e+01 
21-09-20 21:17:51.711 - INFO: [epoch:  0, iter:  20,900, lr:(2.996e-05,)] l_pix: 5.5248e+00 class_loss: 1.9073e-06 average_loss: 5.0000e-01 loss: 2.3599e+01 
21-09-20 21:22:39.264 - INFO: [epoch:  0, iter:  21,000, lr:(2.996e-05,)] l_pix: 8.9210e+00 class_loss: 0.0000e+00 average_loss: 5.0000e-01 loss: 3.7184e+01 
21-09-20 21:27:17.443 - INFO: [epoch:  0, iter:  21,100, lr:(2.996e-05,)] l_pix: 3.3142e+00 class_loss: 0.0000e+00 average_loss: 4.3750e-01 loss: 1.4569e+01 
21-09-20 21:32:08.236 - INFO: [epoch:  0, iter:  21,200, lr:(2.996e-05,)] l_pix: 3.7812e+00 class_loss: 0.0000e+00 average_loss: 3.7500e-01 loss: 1.6250e+01 
21-09-20 21:36:51.850 - INFO: [epoch:  0, iter:  21,300, lr:(2.996e-05,)] l_pix: 9.3699e+00 class_loss: 8.0395e-04 average_loss: 7.5060e-01 loss: 3.9732e+01 
21-09-20 21:41:32.195 - INFO: [epoch:  0, iter:  21,400, lr:(2.995e-05,)] l_pix: 1.3436e+01 class_loss: 0.0000e+00 average_loss: 6.8750e-01 loss: 5.5808e+01 
21-09-20 21:46:12.752 - INFO: [epoch:  0, iter:  21,500, lr:(2.995e-05,)] l_pix: 7.1107e+00 class_loss: 0.0000e+00 average_loss: 1.2500e-01 loss: 2.8818e+01 
21-09-20 21:51:05.988 - INFO: [epoch:  0, iter:  21,600, lr:(2.995e-05,)] l_pix: 1.6958e+01 class_loss: 0.0000e+00 average_loss: 9.3750e-01 loss: 7.0643e+01 
21-09-20 21:55:49.633 - INFO: [epoch:  0, iter:  21,700, lr:(2.995e-05,)] l_pix: 6.4544e+00 class_loss: 0.0000e+00 average_loss: 9.3750e-01 loss: 2.8630e+01 
21-09-20 22:00:33.240 - INFO: [epoch:  0, iter:  21,800, lr:(2.995e-05,)] l_pix: 5.6948e+00 class_loss: 3.2815e-02 average_loss: 5.0000e-01 loss: 2.4296e+01 
21-09-20 22:05:13.728 - INFO: [epoch:  0, iter:  21,900, lr:(2.995e-05,)] l_pix: 8.4675e+00 class_loss: 0.0000e+00 average_loss: 8.1250e-01 loss: 3.6307e+01 
21-09-20 22:09:52.359 - INFO: [epoch:  0, iter:  22,000, lr:(2.995e-05,)] l_pix: 2.7427e+00 class_loss: 0.0000e+00 average_loss: 6.8750e-01 loss: 1.3033e+01 
21-09-20 22:09:52.364 - INFO: Saving models and training states.
21-09-20 22:14:35.507 - INFO: [epoch:  0, iter:  22,100, lr:(2.995e-05,)] l_pix: 3.7768e+00 class_loss: 0.0000e+00 average_loss: 4.3750e-01 loss: 1.6420e+01 
21-09-20 22:19:27.224 - INFO: [epoch:  0, iter:  22,200, lr:(2.995e-05,)] l_pix: 4.2880e+00 class_loss: 3.5763e-07 average_loss: 5.6250e-01 loss: 1.8840e+01 
21-09-20 22:24:08.024 - INFO: [epoch:  0, iter:  22,300, lr:(2.995e-05,)] l_pix: 6.4109e+00 class_loss: 0.0000e+00 average_loss: 5.0000e-01 loss: 2.7144e+01 
21-09-20 22:28:44.409 - INFO: [epoch:  0, iter:  22,400, lr:(2.995e-05,)] l_pix: 8.9862e+00 class_loss: 3.2594e-03 average_loss: 9.9756e-01 loss: 3.8939e+01 
21-09-20 22:33:29.804 - INFO: [epoch:  0, iter:  22,500, lr:(2.995e-05,)] l_pix: 3.0365e+00 class_loss: 0.0000e+00 average_loss: 1.0000e+00 loss: 1.5146e+01 
21-09-20 22:38:08.578 - INFO: [epoch:  0, iter:  22,600, lr:(2.995e-05,)] l_pix: 3.8699e+00 class_loss: 3.7865e-02 average_loss: 5.0000e-01 loss: 1.6998e+01 
21-09-20 22:42:45.222 - INFO: [epoch:  0, iter:  22,700, lr:(2.995e-05,)] l_pix: 3.9693e+00 class_loss: 7.3910e-06 average_loss: 6.2499e-01 loss: 1.7752e+01 
21-09-20 22:47:23.038 - INFO: [epoch:  0, iter:  22,800, lr:(2.995e-05,)] l_pix: 1.0594e+01 class_loss: 7.1526e-07 average_loss: 5.6250e-01 loss: 4.4062e+01 
21-09-20 22:52:05.393 - INFO: [epoch:  0, iter:  22,900, lr:(2.995e-05,)] l_pix: 1.2960e+01 class_loss: 0.0000e+00 average_loss: 5.0000e-01 loss: 5.3338e+01 
21-09-20 22:56:51.430 - INFO: [epoch:  0, iter:  23,000, lr:(2.995e-05,)] l_pix: 7.1614e-01 class_loss: 4.2915e-03 average_loss: 9.9678e-01 loss: 5.8570e+00 
21-09-20 23:01:34.922 - INFO: [epoch:  0, iter:  23,100, lr:(2.995e-05,)] l_pix: 7.1321e+00 class_loss: 2.8157e-02 average_loss: 5.2112e-01 loss: 3.0106e+01 
21-09-20 23:06:11.955 - INFO: [epoch:  0, iter:  23,200, lr:(2.995e-05,)] l_pix: 4.4534e+00 class_loss: 0.0000e+00 average_loss: 5.0000e-01 loss: 1.9314e+01 
21-09-20 23:10:49.210 - INFO: [epoch:  0, iter:  23,300, lr:(2.995e-05,)] l_pix: 1.8786e+01 class_loss: 8.1255e-03 average_loss: 7.5609e-01 loss: 7.7415e+01 
21-09-20 23:15:25.599 - INFO: [epoch:  0, iter:  23,400, lr:(2.995e-05,)] l_pix: 3.1130e+00 class_loss: 0.0000e+00 average_loss: 8.7500e-01 loss: 1.5077e+01 
21-09-20 23:20:02.680 - INFO: [epoch:  0, iter:  23,500, lr:(2.995e-05,)] l_pix: 5.6638e+00 class_loss: 0.0000e+00 average_loss: 5.6250e-01 loss: 2.4343e+01 
21-09-20 23:24:42.508 - INFO: [epoch:  0, iter:  23,600, lr:(2.995e-05,)] l_pix: 8.3977e+00 class_loss: 3.3259e-04 average_loss: 6.2750e-02 loss: 3.3779e+01 
21-09-20 23:29:38.014 - INFO: [epoch:  0, iter:  23,700, lr:(2.994e-05,)] l_pix: 4.8424e+00 class_loss: 2.9825e-03 average_loss: 2.5000e-01 loss: 2.0121e+01 
21-09-20 23:34:14.059 - INFO: [epoch:  0, iter:  23,800, lr:(2.994e-05,)] l_pix: 6.5338e+00 class_loss: 2.0001e-03 average_loss: 1.2647e-01 loss: 2.6516e+01 
21-09-20 23:38:51.120 - INFO: [epoch:  0, iter:  23,900, lr:(2.994e-05,)] l_pix: 1.5563e+01 class_loss: 8.2493e-05 average_loss: 4.3756e-01 loss: 6.3563e+01 
21-09-20 23:43:28.310 - INFO: [epoch:  0, iter:  24,000, lr:(2.994e-05,)] l_pix: 8.0359e+00 class_loss: 0.0000e+00 average_loss: 6.2500e-01 loss: 3.4018e+01 
21-09-20 23:43:28.315 - INFO: Saving models and training states.
21-09-20 23:48:11.291 - INFO: [epoch:  0, iter:  24,100, lr:(2.994e-05,)] l_pix: 1.6014e+00 class_loss: 3.4342e-02 average_loss: 9.9244e-02 loss: 6.7206e+00 
21-09-20 23:52:51.995 - INFO: [epoch:  0, iter:  24,200, lr:(2.994e-05,)] l_pix: 1.2879e+01 class_loss: 3.6841e-02 average_loss: 5.0000e-01 loss: 5.3036e+01 
21-09-20 23:57:28.164 - INFO: [epoch:  0, iter:  24,300, lr:(2.994e-05,)] l_pix: 4.5057e+00 class_loss: 0.0000e+00 average_loss: 1.0000e+00 loss: 2.1023e+01 
21-09-21 00:02:06.254 - INFO: [epoch:  0, iter:  24,400, lr:(2.994e-05,)] l_pix: 9.2368e+00 class_loss: 0.0000e+00 average_loss: 3.7500e-01 loss: 3.8072e+01 
21-09-21 00:06:43.146 - INFO: [epoch:  0, iter:  24,500, lr:(2.994e-05,)] l_pix: 8.8899e+00 class_loss: 0.0000e+00 average_loss: 5.0000e-01 loss: 3.7060e+01 
21-09-21 00:11:23.741 - INFO: [epoch:  0, iter:  24,600, lr:(2.994e-05,)] l_pix: 5.1461e+00 class_loss: 0.0000e+00 average_loss: 5.0000e-01 loss: 2.2085e+01 
21-09-21 00:16:13.414 - INFO: [epoch:  0, iter:  24,700, lr:(2.994e-05,)] l_pix: 6.9723e+00 class_loss: 0.0000e+00 average_loss: 5.0000e-01 loss: 2.9389e+01 
21-09-21 00:21:04.656 - INFO: [epoch:  0, iter:  24,800, lr:(2.994e-05,)] l_pix: 6.9020e+00 class_loss: 0.0000e+00 average_loss: 8.1250e-01 loss: 3.0045e+01 
21-09-21 00:25:40.799 - INFO: [epoch:  0, iter:  24,900, lr:(2.994e-05,)] l_pix: 1.1238e+01 class_loss: 2.0504e-05 average_loss: 4.3750e-01 loss: 4.6265e+01 
21-09-21 00:30:18.145 - INFO: [epoch:  0, iter:  25,000, lr:(2.994e-05,)] l_pix: 3.4595e+00 class_loss: 0.0000e+00 average_loss: 4.3750e-01 loss: 1.5150e+01 
[                              ] 0/10, elapsed: 0s, ETA:
Start...
[2F[J[>>>---------------------------] 1/10, 0.0 task/s, elapsed: 63s, ETA:   565s
Test 0801x4
[2F[J[>>>>>>------------------------] 2/10, 0.0 task/s, elapsed: 123s, ETA:   491s
Test 0802x4
[2F[J[>>>>>>>>>---------------------] 3/10, 0.0 task/s, elapsed: 194s, ETA:   454s
Test 0803x4
[2F[J[>>>>>>>>>>>>------------------] 4/10, 0.0 task/s, elapsed: 250s, ETA:   375s
Test 0804x4
[2F[J[>>>>>>>>>>>>>>>---------------] 5/10, 0.0 task/s, elapsed: 323s, ETA:   323s
Test 0805x4
[2F[J[>>>>>>>>>>>>>>>>>>------------] 6/10, 0.0 task/s, elapsed: 383s, ETA:   255s
Test 0806x4
[2F[J[>>>>>>>>>>>>>>>>>>>>>---------] 7/10, 0.0 task/s, elapsed: 433s, ETA:   186s
Test 0807x4
[2F[J[>>>>>>>>>>>>>>>>>>>>>>>>------] 8/10, 0.0 task/s, elapsed: 496s, ETA:   124s
Test 0808x4
[2F[J[>>>>>>>>>>>>>>>>>>>>>>>>>>>---] 9/10, 0.0 task/s, elapsed: 558s, ETA:    62s
Test 0809x4
[2F[J[>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>] 10/10, 0.0 task/s, elapsed: 631s, ETA:     0s
Test 0810x4
21-09-21 00:40:48.943 - INFO: # Validation # PSNR: 2.9683e+01
21-09-21 00:40:48.943 - INFO: # Validation # FLOPs: 2.2278e+01
21-09-21 00:40:48.943 - INFO: # Validation # Percent: 6.8338e-01
21-09-21 00:40:48.943 - INFO: # Validation # TYPE num: 673 473 888 
21-09-21 00:40:48.943 - INFO: # Validation # PSNR Class: 37.69481176533146 31.802809523620372 30.660167692923785
21-09-21 00:45:26.638 - INFO: [epoch:  0, iter:  25,100, lr:(2.994e-05,)] l_pix: 7.9814e+00 class_loss: 0.0000e+00 average_loss: 6.8750e-01 loss: 3.3988e+01 
21-09-21 00:50:04.590 - INFO: [epoch:  0, iter:  25,200, lr:(2.994e-05,)] l_pix: 1.3008e+01 class_loss: 1.3709e-05 average_loss: 9.3749e-01 loss: 5.4844e+01 
21-09-21 00:54:44.069 - INFO: [epoch:  0, iter:  25,300, lr:(2.994e-05,)] l_pix: 2.1197e+00 class_loss: 0.0000e+00 average_loss: 4.3750e-01 loss: 9.7913e+00 
21-09-21 00:59:21.262 - INFO: [epoch:  0, iter:  25,400, lr:(2.994e-05,)] l_pix: 5.9550e+00 class_loss: 2.3842e-07 average_loss: 5.0000e-01 loss: 2.5320e+01 
21-09-21 01:04:01.381 - INFO: [epoch:  0, iter:  25,500, lr:(2.994e-05,)] l_pix: 3.1222e+00 class_loss: 0.0000e+00 average_loss: 8.7500e-01 loss: 1.5114e+01 
21-09-21 01:08:40.925 - INFO: [epoch:  0, iter:  25,600, lr:(2.994e-05,)] l_pix: 8.2123e+00 class_loss: 0.0000e+00 average_loss: 1.0000e+00 loss: 3.5849e+01 
21-09-21 01:13:24.764 - INFO: [epoch:  0, iter:  25,700, lr:(2.993e-05,)] l_pix: 6.5601e+00 class_loss: 1.1330e-02 average_loss: 3.7500e-01 loss: 2.7371e+01 
21-09-21 01:18:06.160 - INFO: [epoch:  0, iter:  25,800, lr:(2.993e-05,)] l_pix: 9.6918e+00 class_loss: 0.0000e+00 average_loss: 4.3750e-01 loss: 4.0080e+01 
21-09-21 01:22:44.032 - INFO: [epoch:  0, iter:  25,900, lr:(2.993e-05,)] l_pix: 1.4811e+00 class_loss: 3.5763e-07 average_loss: 5.0000e-01 loss: 7.4245e+00 
21-09-21 01:27:21.247 - INFO: [epoch:  0, iter:  26,000, lr:(2.993e-05,)] l_pix: 1.6031e+00 class_loss: 5.0068e-05 average_loss: 9.9996e-01 loss: 9.4123e+00 
21-09-21 01:27:21.254 - INFO: Saving models and training states.
21-09-21 01:32:11.200 - INFO: [epoch:  0, iter:  26,100, lr:(2.993e-05,)] l_pix: 3.3769e+00 class_loss: 0.0000e+00 average_loss: 5.0000e-01 loss: 1.5008e+01 
21-09-21 01:37:06.824 - INFO: [epoch:  0, iter:  26,200, lr:(2.993e-05,)] l_pix: 5.2667e+00 class_loss: 0.0000e+00 average_loss: 1.0000e+00 loss: 2.4067e+01 
21-09-21 01:41:48.860 - INFO: [epoch:  0, iter:  26,300, lr:(2.993e-05,)] l_pix: 2.5868e+00 class_loss: 0.0000e+00 average_loss: 5.0000e-01 loss: 1.1847e+01 
21-09-21 01:46:34.008 - INFO: [epoch:  0, iter:  26,400, lr:(2.993e-05,)] l_pix: 2.7398e+00 class_loss: 0.0000e+00 average_loss: 3.7500e-01 loss: 1.2084e+01 
21-09-21 01:51:15.106 - INFO: [epoch:  0, iter:  26,500, lr:(2.993e-05,)] l_pix: 3.4031e+00 class_loss: 1.4721e-03 average_loss: 5.0000e-01 loss: 1.5113e+01 
21-09-21 01:55:52.957 - INFO: [epoch:  0, iter:  26,600, lr:(2.993e-05,)] l_pix: 1.6055e+01 class_loss: 0.0000e+00 average_loss: 8.1250e-01 loss: 6.6657e+01 
21-09-21 02:00:30.506 - INFO: [epoch:  0, iter:  26,700, lr:(2.993e-05,)] l_pix: 8.4117e+00 class_loss: 0.0000e+00 average_loss: 3.1250e-01 loss: 3.4584e+01 
21-09-21 02:05:22.145 - INFO: [epoch:  0, iter:  26,800, lr:(2.993e-05,)] l_pix: 4.5854e+00 class_loss: 3.7336e-04 average_loss: 5.6222e-01 loss: 2.0028e+01 
21-09-21 02:10:06.947 - INFO: [epoch:  0, iter:  26,900, lr:(2.993e-05,)] l_pix: 4.7474e+00 class_loss: 2.3842e-06 average_loss: 3.7500e-01 loss: 2.0114e+01 
21-09-21 02:14:45.128 - INFO: [epoch:  0, iter:  27,000, lr:(2.993e-05,)] l_pix: 5.8051e+00 class_loss: 1.5998e-04 average_loss: 1.8761e-01 loss: 2.3783e+01 
21-09-21 02:19:30.040 - INFO: [epoch:  0, iter:  27,100, lr:(2.993e-05,)] l_pix: 9.1513e+00 class_loss: 0.0000e+00 average_loss: 8.1250e-01 loss: 3.9043e+01 
21-09-21 02:24:11.000 - INFO: [epoch:  0, iter:  27,200, lr:(2.993e-05,)] l_pix: 1.6741e+01 class_loss: 0.0000e+00 average_loss: 3.7500e-01 loss: 6.8090e+01 
21-09-21 02:28:53.932 - INFO: [epoch:  0, iter:  27,300, lr:(2.993e-05,)] l_pix: 5.9140e+00 class_loss: 0.0000e+00 average_loss: 3.7500e-01 loss: 2.4781e+01 
21-09-21 02:33:29.459 - INFO: [epoch:  0, iter:  27,400, lr:(2.993e-05,)] l_pix: 4.2084e+00 class_loss: 0.0000e+00 average_loss: 3.7500e-01 loss: 1.7958e+01 
21-09-21 02:38:14.420 - INFO: [epoch:  0, iter:  27,500, lr:(2.993e-05,)] l_pix: 5.0760e-01 class_loss: 0.0000e+00 average_loss: 1.0000e+00 loss: 5.0304e+00 
21-09-21 02:42:54.372 - INFO: [epoch:  0, iter:  27,600, lr:(2.993e-05,)] l_pix: 4.8206e+00 class_loss: 3.1107e-02 average_loss: 7.8917e-01 loss: 2.1666e+01 
21-09-21 02:47:30.727 - INFO: [epoch:  0, iter:  27,700, lr:(2.992e-05,)] l_pix: 4.3947e+00 class_loss: 0.0000e+00 average_loss: 8.7500e-01 loss: 2.0204e+01 
21-09-21 02:52:11.479 - INFO: [epoch:  0, iter:  27,800, lr:(2.992e-05,)] l_pix: 3.6272e+00 class_loss: 0.0000e+00 average_loss: 3.1250e-01 loss: 1.5446e+01 
21-09-21 02:56:50.599 - INFO: [epoch:  0, iter:  27,900, lr:(2.992e-05,)] l_pix: 9.5347e+00 class_loss: 3.4682e-02 average_loss: 5.0000e-01 loss: 3.9656e+01 
21-09-21 03:01:33.487 - INFO: [epoch:  0, iter:  28,000, lr:(2.992e-05,)] l_pix: 1.2907e+00 class_loss: 0.0000e+00 average_loss: 8.7500e-01 loss: 7.7876e+00 
21-09-21 03:01:33.491 - INFO: Saving models and training states.
21-09-21 03:06:16.068 - INFO: [epoch:  0, iter:  28,100, lr:(2.992e-05,)] l_pix: 7.7914e+00 class_loss: 0.0000e+00 average_loss: 3.1250e-01 loss: 3.2103e+01 
21-09-21 03:10:53.576 - INFO: [epoch:  0, iter:  28,200, lr:(2.992e-05,)] l_pix: 1.3050e+00 class_loss: 0.0000e+00 average_loss: 6.8750e-01 loss: 7.2825e+00 
21-09-21 03:15:30.093 - INFO: [epoch:  0, iter:  28,300, lr:(2.992e-05,)] l_pix: 6.8114e+00 class_loss: 0.0000e+00 average_loss: 3.7500e-01 loss: 2.8370e+01 
21-09-21 03:20:06.509 - INFO: [epoch:  0, iter:  28,400, lr:(2.992e-05,)] l_pix: 5.7885e-01 class_loss: 0.0000e+00 average_loss: 8.1250e-01 loss: 4.7529e+00 
21-09-21 03:24:48.683 - INFO: [epoch:  0, iter:  28,500, lr:(2.992e-05,)] l_pix: 5.9804e+00 class_loss: 4.3905e-03 average_loss: 5.6579e-01 loss: 2.5621e+01 
21-09-21 03:29:28.789 - INFO: [epoch:  0, iter:  28,600, lr:(2.992e-05,)] l_pix: 7.8445e+00 class_loss: 0.0000e+00 average_loss: 5.0000e-01 loss: 3.2878e+01 
21-09-21 03:34:04.088 - INFO: [epoch:  0, iter:  28,700, lr:(2.992e-05,)] l_pix: 1.2589e+01 class_loss: 0.0000e+00 average_loss: 5.0000e-01 loss: 5.1855e+01 
21-09-21 03:38:43.967 - INFO: [epoch:  0, iter:  28,800, lr:(2.992e-05,)] l_pix: 2.8602e+00 class_loss: 0.0000e+00 average_loss: 2.5000e-01 loss: 1.2191e+01 
21-09-21 03:43:47.603 - INFO: [epoch:  0, iter:  28,900, lr:(2.992e-05,)] l_pix: 4.3953e+00 class_loss: 2.1887e-04 average_loss: 6.8734e-01 loss: 1.9643e+01 
21-09-21 03:48:25.962 - INFO: [epoch:  0, iter:  29,000, lr:(2.992e-05,)] l_pix: 2.7327e+00 class_loss: 0.0000e+00 average_loss: 2.5000e-01 loss: 1.1681e+01 
21-09-21 03:53:11.357 - INFO: [epoch:  0, iter:  29,100, lr:(2.992e-05,)] l_pix: 8.3928e+00 class_loss: 3.2187e-05 average_loss: 5.0000e-01 loss: 3.5071e+01 
21-09-21 03:57:47.177 - INFO: [epoch:  0, iter:  29,200, lr:(2.992e-05,)] l_pix: 1.0898e+01 class_loss: 0.0000e+00 average_loss: 9.3750e-01 loss: 4.6405e+01 
21-09-21 04:02:29.370 - INFO: [epoch:  0, iter:  29,300, lr:(2.992e-05,)] l_pix: 3.2261e+00 class_loss: 0.0000e+00 average_loss: 1.0000e+00 loss: 1.5904e+01 
21-09-21 04:07:19.612 - INFO: [epoch:  0, iter:  29,400, lr:(2.991e-05,)] l_pix: 8.3926e+00 class_loss: 1.6689e-06 average_loss: 5.0000e-01 loss: 3.5071e+01 
21-09-21 04:11:55.398 - INFO: [epoch:  0, iter:  29,500, lr:(2.991e-05,)] l_pix: 2.7771e+00 class_loss: 0.0000e+00 average_loss: 8.1250e-01 loss: 1.3546e+01 
21-09-21 04:16:34.440 - INFO: [epoch:  0, iter:  29,600, lr:(2.991e-05,)] l_pix: 3.1827e+00 class_loss: 0.0000e+00 average_loss: 8.7500e-01 loss: 1.5356e+01 
21-09-21 04:21:13.749 - INFO: [epoch:  0, iter:  29,700, lr:(2.991e-05,)] l_pix: 1.0963e+01 class_loss: 0.0000e+00 average_loss: 9.3750e-01 loss: 4.6666e+01 
21-09-21 04:25:50.321 - INFO: [epoch:  0, iter:  29,800, lr:(2.991e-05,)] l_pix: 4.9912e+00 class_loss: 0.0000e+00 average_loss: 6.2500e-02 loss: 2.0152e+01 
21-09-21 04:30:31.380 - INFO: [epoch:  0, iter:  29,900, lr:(2.991e-05,)] l_pix: 3.5712e+00 class_loss: 0.0000e+00 average_loss: 6.8750e-01 loss: 1.6347e+01 
21-09-21 04:35:10.746 - INFO: [epoch:  0, iter:  30,000, lr:(2.991e-05,)] l_pix: 5.6385e+00 class_loss: 1.5425e-02 average_loss: 8.0093e-01 loss: 2.4964e+01 
[                              ] 0/10, elapsed: 0s, ETA:
Start...
[2F[J[>>>---------------------------] 1/10, 0.0 task/s, elapsed: 62s, ETA:   562s
Test 0801x4
[2F[J[>>>>>>------------------------] 2/10, 0.0 task/s, elapsed: 123s, ETA:   494s
Test 0802x4
[2F[J[>>>>>>>>>---------------------] 3/10, 0.0 task/s, elapsed: 195s, ETA:   455s
Test 0803x4
[2F[J[>>>>>>>>>>>>------------------] 4/10, 0.0 task/s, elapsed: 250s, ETA:   376s
Test 0804x4
[2F[J[>>>>>>>>>>>>>>>---------------] 5/10, 0.0 task/s, elapsed: 322s, ETA:   322s
Test 0805x4
[2F[J[>>>>>>>>>>>>>>>>>>------------] 6/10, 0.0 task/s, elapsed: 381s, ETA:   254s
Test 0806x4
[2F[J[>>>>>>>>>>>>>>>>>>>>>---------] 7/10, 0.0 task/s, elapsed: 431s, ETA:   185s
Test 0807x4
[2F[J[>>>>>>>>>>>>>>>>>>>>>>>>------] 8/10, 0.0 task/s, elapsed: 492s, ETA:   123s
Test 0808x4
[2F[J[>>>>>>>>>>>>>>>>>>>>>>>>>>>---] 9/10, 0.0 task/s, elapsed: 553s, ETA:    61s
Test 0809x4
[2F[J[>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>] 10/10, 0.0 task/s, elapsed: 624s, ETA:     0s
Test 0810x4
21-09-21 04:45:34.993 - INFO: # Validation # PSNR: 2.9605e+01
21-09-21 04:45:34.993 - INFO: # Validation # FLOPs: 2.2024e+01
21-09-21 04:45:34.993 - INFO: # Validation # Percent: 6.7560e-01
21-09-21 04:45:34.993 - INFO: # Validation # TYPE num: 776 333 925 
21-09-21 04:45:34.993 - INFO: # Validation # PSNR Class: 36.296827680095426 32.24430308669572 30.392557087561222
21-09-21 04:45:34.994 - INFO: Saving models and training states.
21-09-21 04:50:18.618 - INFO: [epoch:  0, iter:  30,100, lr:(2.991e-05,)] l_pix: 2.9792e+00 class_loss: 0.0000e+00 average_loss: 5.6250e-01 loss: 1.3604e+01 
21-09-21 04:54:59.265 - INFO: [epoch:  0, iter:  30,200, lr:(2.991e-05,)] l_pix: 5.7757e+00 class_loss: 5.9605e-06 average_loss: 6.2500e-01 loss: 2.4978e+01 
21-09-21 04:59:37.832 - INFO: [epoch:  0, iter:  30,300, lr:(2.991e-05,)] l_pix: 5.3252e+00 class_loss: 0.0000e+00 average_loss: 3.1250e-01 loss: 2.2238e+01 
21-09-21 05:04:24.088 - INFO: [epoch:  0, iter:  30,400, lr:(2.991e-05,)] l_pix: 3.8407e+00 class_loss: 0.0000e+00 average_loss: 6.2500e-01 loss: 1.7238e+01 
21-09-21 05:09:02.028 - INFO: [epoch:  0, iter:  30,500, lr:(2.991e-05,)] l_pix: 1.8144e+00 class_loss: 0.0000e+00 average_loss: 5.6250e-01 loss: 8.9450e+00 
21-09-21 05:13:41.183 - INFO: [epoch:  0, iter:  30,600, lr:(2.991e-05,)] l_pix: 1.4401e+00 class_loss: 1.3351e-05 average_loss: 8.7499e-01 loss: 8.3852e+00 
21-09-21 05:18:23.021 - INFO: [epoch:  0, iter:  30,700, lr:(2.991e-05,)] l_pix: 8.0945e+00 class_loss: 0.0000e+00 average_loss: 3.7500e-01 loss: 3.3503e+01 
21-09-21 05:22:59.621 - INFO: [epoch:  0, iter:  30,800, lr:(2.991e-05,)] l_pix: 2.0226e+00 class_loss: 0.0000e+00 average_loss: 5.6250e-01 loss: 9.7778e+00 
21-09-21 05:27:37.597 - INFO: [epoch:  0, iter:  30,900, lr:(2.991e-05,)] l_pix: 2.5195e+00 class_loss: 0.0000e+00 average_loss: 5.6250e-01 loss: 1.1766e+01 
21-09-21 05:32:15.549 - INFO: [epoch:  0, iter:  31,000, lr:(2.991e-05,)] l_pix: 1.4698e+00 class_loss: 0.0000e+00 average_loss: 1.8750e-01 loss: 6.4418e+00 
21-09-21 05:36:52.887 - INFO: [epoch:  0, iter:  31,100, lr:(2.990e-05,)] l_pix: 5.1523e+00 class_loss: 0.0000e+00 average_loss: 8.1250e-01 loss: 2.3047e+01 
21-09-21 05:41:29.121 - INFO: [epoch:  0, iter:  31,200, lr:(2.990e-05,)] l_pix: 1.3270e+00 class_loss: 0.0000e+00 average_loss: 6.2500e-01 loss: 7.1830e+00 
21-09-21 05:46:07.774 - INFO: [epoch:  0, iter:  31,300, lr:(2.990e-05,)] l_pix: 1.3150e+00 class_loss: 0.0000e+00 average_loss: 8.7500e-01 loss: 7.8850e+00 
21-09-21 05:50:43.913 - INFO: [epoch:  0, iter:  31,400, lr:(2.990e-05,)] l_pix: 3.2719e+00 class_loss: 0.0000e+00 average_loss: 1.0000e+00 loss: 1.6088e+01 
21-09-21 05:55:26.807 - INFO: [epoch:  0, iter:  31,500, lr:(2.990e-05,)] l_pix: 1.3161e+01 class_loss: 0.0000e+00 average_loss: 5.0000e-01 loss: 5.4145e+01 
21-09-21 06:00:04.899 - INFO: [epoch:  0, iter:  31,600, lr:(2.990e-05,)] l_pix: 3.2669e+00 class_loss: 0.0000e+00 average_loss: 8.7500e-01 loss: 1.5692e+01 
21-09-21 06:04:42.725 - INFO: [epoch:  0, iter:  31,700, lr:(2.990e-05,)] l_pix: 5.9577e+00 class_loss: 0.0000e+00 average_loss: 1.0000e+00 loss: 2.6831e+01 
21-09-21 06:09:22.749 - INFO: [epoch:  0, iter:  31,800, lr:(2.990e-05,)] l_pix: 2.1654e+00 class_loss: 4.9176e-03 average_loss: 6.2500e-01 loss: 1.0539e+01 
21-09-21 06:14:00.429 - INFO: [epoch:  0, iter:  31,900, lr:(2.990e-05,)] l_pix: 2.0587e+00 class_loss: 5.9333e-03 average_loss: 5.0000e-01 loss: 9.7376e+00 
21-09-21 06:18:39.074 - INFO: [epoch:  0, iter:  32,000, lr:(2.990e-05,)] l_pix: 5.4391e+00 class_loss: 0.0000e+00 average_loss: 6.2500e-01 loss: 2.3632e+01 
21-09-21 06:18:39.077 - INFO: Saving models and training states.
21-09-21 06:23:21.713 - INFO: [epoch:  0, iter:  32,100, lr:(2.990e-05,)] l_pix: 3.9926e+00 class_loss: 0.0000e+00 average_loss: 4.3750e-01 loss: 1.7283e+01 
21-09-21 06:28:06.493 - INFO: [epoch:  0, iter:  32,200, lr:(2.990e-05,)] l_pix: 1.0276e+00 class_loss: 0.0000e+00 average_loss: 8.7500e-01 loss: 6.7353e+00 
21-09-21 06:32:53.760 - INFO: [epoch:  0, iter:  32,300, lr:(2.990e-05,)] l_pix: 1.0592e+01 class_loss: 4.0531e-06 average_loss: 5.0000e-01 loss: 4.3868e+01 
21-09-21 06:37:30.301 - INFO: [epoch:  0, iter:  32,400, lr:(2.990e-05,)] l_pix: 1.7911e+00 class_loss: 0.0000e+00 average_loss: 6.8750e-01 loss: 9.2269e+00 
21-09-21 06:42:10.212 - INFO: [epoch:  0, iter:  32,500, lr:(2.990e-05,)] l_pix: 7.3544e+00 class_loss: 0.0000e+00 average_loss: 4.3750e-01 loss: 3.0730e+01 
21-09-21 06:46:51.590 - INFO: [epoch:  0, iter:  32,600, lr:(2.990e-05,)] l_pix: 1.0274e+01 class_loss: 0.0000e+00 average_loss: 5.6250e-01 loss: 4.2784e+01 
21-09-21 06:51:49.796 - INFO: [epoch:  0, iter:  32,700, lr:(2.989e-05,)] l_pix: 4.3516e+00 class_loss: 1.7643e-05 average_loss: 4.9999e-01 loss: 1.8906e+01 
21-09-21 06:56:32.956 - INFO: [epoch:  0, iter:  32,800, lr:(2.989e-05,)] l_pix: 3.1537e+00 class_loss: 0.0000e+00 average_loss: 6.2500e-02 loss: 1.2802e+01 
21-09-21 07:01:13.138 - INFO: [epoch:  0, iter:  32,900, lr:(2.989e-05,)] l_pix: 2.9882e+00 class_loss: 0.0000e+00 average_loss: 3.7500e-01 loss: 1.3078e+01 
21-09-21 07:05:50.507 - INFO: [epoch:  0, iter:  33,000, lr:(2.989e-05,)] l_pix: 2.5140e+00 class_loss: 3.7589e-03 average_loss: 4.3468e-01 loss: 1.1362e+01 
21-09-21 07:10:33.364 - INFO: [epoch:  0, iter:  33,100, lr:(2.989e-05,)] l_pix: 9.9511e+00 class_loss: 0.0000e+00 average_loss: 1.0000e+00 loss: 4.2804e+01 
21-09-21 07:15:20.076 - INFO: [epoch:  0, iter:  33,200, lr:(2.989e-05,)] l_pix: 2.5960e+00 class_loss: 0.0000e+00 average_loss: 1.2500e-01 loss: 1.0759e+01 
21-09-21 07:19:59.009 - INFO: [epoch:  0, iter:  33,300, lr:(2.989e-05,)] l_pix: 7.9155e+00 class_loss: 1.0383e-04 average_loss: 4.9996e-01 loss: 3.3162e+01 
21-09-21 07:24:35.270 - INFO: [epoch:  0, iter:  33,400, lr:(2.989e-05,)] l_pix: 8.4057e+00 class_loss: 0.0000e+00 average_loss: 4.3750e-01 loss: 3.4935e+01 
21-09-21 07:29:12.547 - INFO: [epoch:  0, iter:  33,500, lr:(2.989e-05,)] l_pix: 1.0727e+01 class_loss: 0.0000e+00 average_loss: 8.7500e-01 loss: 4.5533e+01 
21-09-21 07:33:50.858 - INFO: [epoch:  0, iter:  33,600, lr:(2.989e-05,)] l_pix: 5.4963e+00 class_loss: 3.8725e-02 average_loss: 7.8953e-01 loss: 2.4373e+01 
21-09-21 07:38:29.512 - INFO: [epoch:  0, iter:  33,700, lr:(2.989e-05,)] l_pix: 1.0976e+01 class_loss: 8.4412e-04 average_loss: 1.8750e-01 loss: 4.4465e+01 
21-09-21 07:43:12.608 - INFO: [epoch:  0, iter:  33,800, lr:(2.989e-05,)] l_pix: 5.5655e+00 class_loss: 0.0000e+00 average_loss: 6.8750e-01 loss: 2.4324e+01 
21-09-21 07:47:48.046 - INFO: [epoch:  0, iter:  33,900, lr:(2.989e-05,)] l_pix: 6.0354e+00 class_loss: 0.0000e+00 average_loss: 6.2500e-01 loss: 2.6017e+01 
21-09-21 07:52:30.863 - INFO: [epoch:  0, iter:  34,000, lr:(2.989e-05,)] l_pix: 1.0575e+01 class_loss: 0.0000e+00 average_loss: 9.3750e-01 loss: 4.5114e+01 
21-09-21 07:52:30.868 - INFO: Saving models and training states.
21-09-21 07:57:13.715 - INFO: [epoch:  0, iter:  34,100, lr:(2.989e-05,)] l_pix: 3.5799e+00 class_loss: 0.0000e+00 average_loss: 3.7500e-01 loss: 1.5445e+01 
21-09-21 08:01:55.170 - INFO: [epoch:  0, iter:  34,200, lr:(2.988e-05,)] l_pix: 9.9184e+00 class_loss: 0.0000e+00 average_loss: 4.3750e-01 loss: 4.0986e+01 
21-09-21 08:06:41.942 - INFO: [epoch:  0, iter:  34,300, lr:(2.988e-05,)] l_pix: 8.1677e+00 class_loss: 0.0000e+00 average_loss: 5.0000e-01 loss: 3.4171e+01 
21-09-21 08:11:30.433 - INFO: [epoch:  0, iter:  34,400, lr:(2.988e-05,)] l_pix: 1.7068e+00 class_loss: 0.0000e+00 average_loss: 8.7500e-01 loss: 9.4524e+00 
21-09-21 08:16:08.215 - INFO: [epoch:  0, iter:  34,500, lr:(2.988e-05,)] l_pix: 4.5296e+00 class_loss: 5.7220e-06 average_loss: 5.0000e-01 loss: 1.9618e+01 
21-09-21 08:20:48.764 - INFO: [epoch:  0, iter:  34,600, lr:(2.988e-05,)] l_pix: 9.9280e-01 class_loss: 0.0000e+00 average_loss: 5.0000e-01 loss: 5.4712e+00 
21-09-21 08:25:25.746 - INFO: [epoch:  0, iter:  34,700, lr:(2.988e-05,)] l_pix: 1.5745e+00 class_loss: 0.0000e+00 average_loss: 4.3750e-01 loss: 7.6106e+00 
21-09-21 08:30:02.754 - INFO: [epoch:  0, iter:  34,800, lr:(2.988e-05,)] l_pix: 7.6535e+00 class_loss: 1.5497e-06 average_loss: 4.3750e-01 loss: 3.1926e+01 
21-09-21 08:34:41.480 - INFO: [epoch:  0, iter:  34,900, lr:(2.988e-05,)] l_pix: 5.8876e+00 class_loss: 0.0000e+00 average_loss: 5.6250e-01 loss: 2.5238e+01 
21-09-21 08:39:18.216 - INFO: [epoch:  0, iter:  35,000, lr:(2.988e-05,)] l_pix: 6.3939e+00 class_loss: 1.0760e-03 average_loss: 4.9919e-01 loss: 2.7074e+01 
[                              ] 0/10, elapsed: 0s, ETA:
Start...
[2F[J[>>>---------------------------] 1/10, 0.0 task/s, elapsed: 62s, ETA:   562s
Test 0801x4
[2F[J[>>>>>>------------------------] 2/10, 0.0 task/s, elapsed: 123s, ETA:   491s
Test 0802x4
[2F[J[>>>>>>>>>---------------------] 3/10, 0.0 task/s, elapsed: 195s, ETA:   455s
Test 0803x4
[2F[J[>>>>>>>>>>>>------------------] 4/10, 0.0 task/s, elapsed: 250s, ETA:   376s
Test 0804x4
[2F[J[>>>>>>>>>>>>>>>---------------] 5/10, 0.0 task/s, elapsed: 322s, ETA:   322s
Test 0805x4
[2F[J[>>>>>>>>>>>>>>>>>>------------] 6/10, 0.0 task/s, elapsed: 382s, ETA:   255s
Test 0806x4
[2F[J[>>>>>>>>>>>>>>>>>>>>>---------] 7/10, 0.0 task/s, elapsed: 432s, ETA:   185s
Test 0807x4
[2F[J[>>>>>>>>>>>>>>>>>>>>>>>>------] 8/10, 0.0 task/s, elapsed: 493s, ETA:   123s
Test 0808x4
[2F[J[>>>>>>>>>>>>>>>>>>>>>>>>>>>---] 9/10, 0.0 task/s, elapsed: 553s, ETA:    61s
Test 0809x4
[2F[J[>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>] 10/10, 0.0 task/s, elapsed: 625s, ETA:     0s
Test 0810x4
21-09-21 08:49:43.424 - INFO: # Validation # PSNR: 2.9723e+01
21-09-21 08:49:43.425 - INFO: # Validation # FLOPs: 2.4498e+01
21-09-21 08:49:43.425 - INFO: # Validation # Percent: 7.5147e-01
21-09-21 08:49:43.425 - INFO: # Validation # TYPE num: 448 512 1074 
21-09-21 08:49:43.425 - INFO: # Validation # PSNR Class: 37.46886536055279 31.52308181182203 32.37174983909226
21-09-21 08:54:21.705 - INFO: [epoch:  0, iter:  35,100, lr:(2.988e-05,)] l_pix: 7.0091e+00 class_loss: 0.0000e+00 average_loss: 3.7500e-01 loss: 2.9161e+01 
21-09-21 08:58:58.474 - INFO: [epoch:  0, iter:  35,200, lr:(2.988e-05,)] l_pix: 1.0753e+01 class_loss: 5.9605e-07 average_loss: 1.8750e-01 loss: 4.3573e+01 
21-09-21 09:03:36.699 - INFO: [epoch:  0, iter:  35,300, lr:(2.988e-05,)] l_pix: 4.1558e+00 class_loss: 0.0000e+00 average_loss: 8.7500e-01 loss: 1.9248e+01 
21-09-21 09:08:21.651 - INFO: [epoch:  0, iter:  35,400, lr:(2.988e-05,)] l_pix: 5.8008e+00 class_loss: 0.0000e+00 average_loss: 6.8750e-01 loss: 2.5266e+01 
21-09-21 09:12:58.803 - INFO: [epoch:  0, iter:  35,500, lr:(2.988e-05,)] l_pix: 1.2298e+01 class_loss: 6.5047e-02 average_loss: 3.5445e-01 loss: 5.0287e+01 
21-09-21 09:17:40.962 - INFO: [epoch:  0, iter:  35,600, lr:(2.988e-05,)] l_pix: 3.8994e+00 class_loss: 2.9802e-05 average_loss: 5.6251e-01 loss: 1.7285e+01 
21-09-21 09:22:28.014 - INFO: [epoch:  0, iter:  35,700, lr:(2.987e-05,)] l_pix: 1.3243e+00 class_loss: 0.0000e+00 average_loss: 8.7500e-01 loss: 7.9224e+00 
21-09-21 09:27:10.665 - INFO: [epoch:  0, iter:  35,800, lr:(2.987e-05,)] l_pix: 3.0377e+00 class_loss: 0.0000e+00 average_loss: 1.0000e+00 loss: 1.5151e+01 
21-09-21 09:31:48.452 - INFO: [epoch:  0, iter:  35,900, lr:(2.987e-05,)] l_pix: 8.8117e+00 class_loss: 0.0000e+00 average_loss: 9.3750e-01 loss: 3.8059e+01 
21-09-21 09:36:25.796 - INFO: [epoch:  0, iter:  36,000, lr:(2.987e-05,)] l_pix: 6.6784e+00 class_loss: 0.0000e+00 average_loss: 5.0000e-01 loss: 2.8214e+01 
21-09-21 09:36:25.801 - INFO: Saving models and training states.
21-09-21 09:41:08.373 - INFO: [epoch:  0, iter:  36,100, lr:(2.987e-05,)] l_pix: 4.2126e+00 class_loss: 0.0000e+00 average_loss: 6.2500e-01 loss: 1.8725e+01 
21-09-21 09:45:44.322 - INFO: [epoch:  0, iter:  36,200, lr:(2.987e-05,)] l_pix: 1.0258e+01 class_loss: 0.0000e+00 average_loss: 8.1250e-01 loss: 4.3469e+01 
21-09-21 09:50:27.182 - INFO: [epoch:  0, iter:  36,300, lr:(2.987e-05,)] l_pix: 3.5680e+00 class_loss: 0.0000e+00 average_loss: 4.3750e-01 loss: 1.5584e+01 
21-09-21 09:55:02.814 - INFO: [epoch:  0, iter:  36,400, lr:(2.987e-05,)] l_pix: 3.2592e+00 class_loss: 0.0000e+00 average_loss: 2.5000e-01 loss: 1.3787e+01 
21-09-21 09:59:45.007 - INFO: [epoch:  0, iter:  36,500, lr:(2.987e-05,)] l_pix: 8.5105e+00 class_loss: 0.0000e+00 average_loss: 8.1250e-01 loss: 3.6479e+01 
21-09-21 10:04:24.925 - INFO: [epoch:  0, iter:  36,600, lr:(2.987e-05,)] l_pix: 6.0337e+00 class_loss: 4.3440e-04 average_loss: 4.9967e-01 loss: 2.5634e+01 
21-09-21 10:09:01.881 - INFO: [epoch:  0, iter:  36,700, lr:(2.987e-05,)] l_pix: 1.6287e+01 class_loss: 0.0000e+00 average_loss: 5.0000e-01 loss: 6.6647e+01 
21-09-21 10:13:38.217 - INFO: [epoch:  0, iter:  36,800, lr:(2.987e-05,)] l_pix: 1.6890e+01 class_loss: 0.0000e+00 average_loss: 4.3750e-01 loss: 6.8874e+01 
21-09-21 10:18:33.756 - INFO: [epoch:  0, iter:  36,900, lr:(2.987e-05,)] l_pix: 1.1019e+01 class_loss: 0.0000e+00 average_loss: 5.0000e-01 loss: 4.5576e+01 
21-09-21 10:23:20.561 - INFO: [epoch:  0, iter:  37,000, lr:(2.987e-05,)] l_pix: 1.2026e+01 class_loss: 4.5371e-03 average_loss: 5.0000e-01 loss: 4.9606e+01 
21-09-21 10:27:56.150 - INFO: [epoch:  0, iter:  37,100, lr:(2.986e-05,)] l_pix: 6.7588e+00 class_loss: 9.6393e-03 average_loss: 1.8047e-01 loss: 2.7581e+01 
21-09-21 10:32:32.859 - INFO: [epoch:  0, iter:  37,200, lr:(2.986e-05,)] l_pix: 2.8640e+00 class_loss: 9.5367e-07 average_loss: 4.3750e-01 loss: 1.2768e+01 
21-09-21 10:37:20.847 - INFO: [epoch:  0, iter:  37,300, lr:(2.986e-05,)] l_pix: 8.8942e+00 class_loss: 0.0000e+00 average_loss: 9.3750e-01 loss: 3.8389e+01 
21-09-21 10:41:58.506 - INFO: [epoch:  0, iter:  37,400, lr:(2.986e-05,)] l_pix: 8.2070e+00 class_loss: 2.2650e-06 average_loss: 1.8750e-01 loss: 3.3391e+01 
21-09-21 10:46:35.530 - INFO: [epoch:  0, iter:  37,500, lr:(2.986e-05,)] l_pix: 1.3193e+01 class_loss: 0.0000e+00 average_loss: 2.5000e-01 loss: 5.3524e+01 
21-09-21 10:51:13.159 - INFO: [epoch:  0, iter:  37,600, lr:(2.986e-05,)] l_pix: 1.2982e+00 class_loss: 0.0000e+00 average_loss: 1.2500e-01 loss: 5.5678e+00 
21-09-21 10:55:50.123 - INFO: [epoch:  0, iter:  37,700, lr:(2.986e-05,)] l_pix: 7.7976e-01 class_loss: 0.0000e+00 average_loss: 1.0000e+00 loss: 6.1191e+00 
21-09-21 11:00:28.323 - INFO: [epoch:  0, iter:  37,800, lr:(2.986e-05,)] l_pix: 1.4570e+01 class_loss: 0.0000e+00 average_loss: 9.3750e-01 loss: 6.1093e+01 
21-09-21 11:05:09.418 - INFO: [epoch:  0, iter:  37,900, lr:(2.986e-05,)] l_pix: 6.7402e+00 class_loss: 0.0000e+00 average_loss: 1.2500e-01 loss: 2.7336e+01 
21-09-21 11:09:45.375 - INFO: [epoch:  0, iter:  38,000, lr:(2.986e-05,)] l_pix: 3.7648e+00 class_loss: 0.0000e+00 average_loss: 8.1250e-01 loss: 1.7497e+01 
21-09-21 11:09:45.379 - INFO: Saving models and training states.
21-09-21 11:14:35.701 - INFO: [epoch:  0, iter:  38,100, lr:(2.986e-05,)] l_pix: 2.0674e+00 class_loss: 0.0000e+00 average_loss: 1.0000e+00 loss: 1.1270e+01 
21-09-21 11:19:25.143 - INFO: [epoch:  0, iter:  38,200, lr:(2.986e-05,)] l_pix: 3.3146e+00 class_loss: 0.0000e+00 average_loss: 1.0000e+00 loss: 1.6259e+01 
21-09-21 11:24:01.812 - INFO: [epoch:  0, iter:  38,300, lr:(2.986e-05,)] l_pix: 4.2366e+00 class_loss: 0.0000e+00 average_loss: 3.7500e-01 loss: 1.8072e+01 
21-09-21 11:28:38.866 - INFO: [epoch:  0, iter:  38,400, lr:(2.986e-05,)] l_pix: 1.2845e+01 class_loss: 0.0000e+00 average_loss: 8.1250e-01 loss: 5.3816e+01 
21-09-21 11:33:15.816 - INFO: [epoch:  0, iter:  38,500, lr:(2.985e-05,)] l_pix: 9.3259e+00 class_loss: 0.0000e+00 average_loss: 4.3750e-01 loss: 3.8616e+01 
21-09-21 11:37:52.770 - INFO: [epoch:  0, iter:  38,600, lr:(2.985e-05,)] l_pix: 6.6492e+00 class_loss: 0.0000e+00 average_loss: 1.0000e+00 loss: 2.9597e+01 
21-09-21 11:42:28.217 - INFO: [epoch:  0, iter:  38,700, lr:(2.985e-05,)] l_pix: 9.8390e+00 class_loss: 9.5367e-07 average_loss: 3.7500e-01 loss: 4.0481e+01 
21-09-21 11:47:17.829 - INFO: [epoch:  0, iter:  38,800, lr:(2.985e-05,)] l_pix: 3.2176e+00 class_loss: 2.1100e-02 average_loss: 2.5000e-01 loss: 1.3631e+01 
21-09-21 11:52:03.008 - INFO: [epoch:  0, iter:  38,900, lr:(2.985e-05,)] l_pix: 7.5730e+00 class_loss: 0.0000e+00 average_loss: 2.5000e-01 loss: 3.1042e+01 
21-09-21 11:56:49.627 - INFO: [epoch:  0, iter:  39,000, lr:(2.985e-05,)] l_pix: 3.7585e+00 class_loss: 8.0824e-05 average_loss: 7.4994e-01 loss: 1.7284e+01 
21-09-21 12:01:28.930 - INFO: [epoch:  0, iter:  39,100, lr:(2.985e-05,)] l_pix: 1.2557e+01 class_loss: 6.3527e-04 average_loss: 5.0048e-01 loss: 5.1728e+01 
21-09-21 12:06:08.970 - INFO: [epoch:  0, iter:  39,200, lr:(2.985e-05,)] l_pix: 1.0131e+00 class_loss: 1.3113e-06 average_loss: 7.5000e-01 loss: 6.3023e+00 
21-09-21 12:10:45.842 - INFO: [epoch:  0, iter:  39,300, lr:(2.985e-05,)] l_pix: 4.6124e+00 class_loss: 0.0000e+00 average_loss: 6.8750e-01 loss: 2.0512e+01 
21-09-21 12:15:26.916 - INFO: [epoch:  0, iter:  39,400, lr:(2.985e-05,)] l_pix: 1.0070e+01 class_loss: 0.0000e+00 average_loss: 9.3750e-01 loss: 4.3094e+01 
21-09-21 12:20:03.341 - INFO: [epoch:  0, iter:  39,500, lr:(2.985e-05,)] l_pix: 1.5306e+01 class_loss: 0.0000e+00 average_loss: 9.3750e-01 loss: 6.4036e+01 
21-09-21 12:24:46.973 - INFO: [epoch:  0, iter:  39,600, lr:(2.985e-05,)] l_pix: 1.0031e+01 class_loss: 5.8389e-04 average_loss: 5.0044e-01 loss: 4.1624e+01 
21-09-21 12:29:22.625 - INFO: [epoch:  0, iter:  39,700, lr:(2.985e-05,)] l_pix: 4.2784e+00 class_loss: 0.0000e+00 average_loss: 3.1250e-01 loss: 1.8051e+01 
21-09-21 12:33:56.700 - INFO: [epoch:  0, iter:  39,800, lr:(2.984e-05,)] l_pix: 1.4577e+00 class_loss: 4.7684e-06 average_loss: 5.0000e-01 loss: 7.3308e+00 
21-09-21 12:38:34.119 - INFO: [epoch:  0, iter:  39,900, lr:(2.984e-05,)] l_pix: 5.6444e+00 class_loss: 0.0000e+00 average_loss: 7.5000e-01 loss: 2.4828e+01 
21-09-21 12:43:27.677 - INFO: [epoch:  0, iter:  40,000, lr:(2.984e-05,)] l_pix: 7.0442e-01 class_loss: 4.6854e-01 average_loss: 5.8329e-01 loss: 4.8018e+00 
[                              ] 0/10, elapsed: 0s, ETA:
Start...
[2F[J[>>>---------------------------] 1/10, 0.0 task/s, elapsed: 63s, ETA:   568s
Test 0801x4
[2F[J[>>>>>>------------------------] 2/10, 0.0 task/s, elapsed: 124s, ETA:   497s
Test 0802x4
[2F[J[>>>>>>>>>---------------------] 3/10, 0.0 task/s, elapsed: 196s, ETA:   458s
Test 0803x4
[2F[J[>>>>>>>>>>>>------------------] 4/10, 0.0 task/s, elapsed: 251s, ETA:   377s
Test 0804x4
[2F[J[>>>>>>>>>>>>>>>---------------] 5/10, 0.0 task/s, elapsed: 323s, ETA:   323s
Test 0805x4
[2F[J[>>>>>>>>>>>>>>>>>>------------] 6/10, 0.0 task/s, elapsed: 383s, ETA:   255s
Test 0806x4
[2F[J[>>>>>>>>>>>>>>>>>>>>>---------] 7/10, 0.0 task/s, elapsed: 432s, ETA:   185s
Test 0807x4
[2F[J[>>>>>>>>>>>>>>>>>>>>>>>>------] 8/10, 0.0 task/s, elapsed: 492s, ETA:   123s
Test 0808x4
[2F[J[>>>>>>>>>>>>>>>>>>>>>>>>>>>---] 9/10, 0.0 task/s, elapsed: 551s, ETA:    61s
Test 0809x4
[2F[J[>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>] 10/10, 0.0 task/s, elapsed: 622s, ETA:     0s
Test 0810x4
21-09-21 12:53:50.232 - INFO: # Validation # PSNR: 2.9685e+01
21-09-21 12:53:50.233 - INFO: # Validation # FLOPs: 2.3014e+01
21-09-21 12:53:50.233 - INFO: # Validation # Percent: 7.0596e-01
21-09-21 12:53:50.233 - INFO: # Validation # TYPE num: 705 299 1030 
21-09-21 12:53:50.233 - INFO: # Validation # PSNR Class: 36.517879422355996 32.407998137682284 31.185288372351835
21-09-21 12:53:50.234 - INFO: Saving models and training states.
21-09-21 12:58:48.890 - INFO: [epoch:  0, iter:  40,100, lr:(2.984e-05,)] l_pix: 3.6090e+00 class_loss: 7.1526e-07 average_loss: 3.7500e-01 loss: 1.5561e+01 
21-09-21 13:03:31.462 - INFO: [epoch:  0, iter:  40,200, lr:(2.984e-05,)] l_pix: 9.1963e+00 class_loss: 1.2426e-02 average_loss: 5.0000e-01 loss: 3.8291e+01 
21-09-21 13:08:10.158 - INFO: [epoch:  0, iter:  40,300, lr:(2.984e-05,)] l_pix: 1.3410e+01 class_loss: 9.2363e-04 average_loss: 4.3750e-01 loss: 5.4952e+01 
21-09-21 13:12:50.302 - INFO: [epoch:  0, iter:  40,400, lr:(2.984e-05,)] l_pix: 1.3011e+01 class_loss: 0.0000e+00 average_loss: 1.0000e+00 loss: 5.5045e+01 
21-09-21 13:17:34.808 - INFO: [epoch:  0, iter:  40,500, lr:(2.984e-05,)] l_pix: 9.0470e+00 class_loss: 0.0000e+00 average_loss: 8.1250e-01 loss: 3.8626e+01 
21-09-21 13:22:16.958 - INFO: [epoch:  0, iter:  40,600, lr:(2.984e-05,)] l_pix: 6.7955e+00 class_loss: 2.3603e-05 average_loss: 5.6249e-01 loss: 2.8870e+01 
21-09-21 13:26:53.937 - INFO: [epoch:  0, iter:  40,700, lr:(2.984e-05,)] l_pix: 1.9881e+00 class_loss: 0.0000e+00 average_loss: 6.2500e-02 loss: 8.1398e+00 
21-09-21 13:31:41.756 - INFO: [epoch:  0, iter:  40,800, lr:(2.984e-05,)] l_pix: 6.3228e+00 class_loss: 0.0000e+00 average_loss: 6.2500e-01 loss: 2.7166e+01 
21-09-21 13:36:19.903 - INFO: [epoch:  0, iter:  40,900, lr:(2.984e-05,)] l_pix: 3.9436e+00 class_loss: 0.0000e+00 average_loss: 8.1250e-01 loss: 1.8212e+01 
21-09-21 13:40:57.045 - INFO: [epoch:  0, iter:  41,000, lr:(2.983e-05,)] l_pix: 3.2659e+00 class_loss: 0.0000e+00 average_loss: 1.2500e-01 loss: 1.3439e+01 
21-09-21 13:45:36.179 - INFO: [epoch:  0, iter:  41,100, lr:(2.983e-05,)] l_pix: 1.3840e+00 class_loss: 1.0459e-03 average_loss: 5.0000e-01 loss: 7.0364e+00 
21-09-21 13:50:13.611 - INFO: [epoch:  0, iter:  41,200, lr:(2.983e-05,)] l_pix: 2.3112e+00 class_loss: 9.9421e-05 average_loss: 9.3743e-01 loss: 1.2057e+01 
21-09-21 13:54:59.349 - INFO: [epoch:  0, iter:  41,300, lr:(2.983e-05,)] l_pix: 2.4919e+00 class_loss: 0.0000e+00 average_loss: 4.3750e-01 loss: 1.1280e+01 
21-09-21 13:59:37.415 - INFO: [epoch:  0, iter:  41,400, lr:(2.983e-05,)] l_pix: 2.5047e+00 class_loss: 0.0000e+00 average_loss: 6.2500e-01 loss: 1.1894e+01 
21-09-21 14:04:37.211 - INFO: [epoch:  0, iter:  41,500, lr:(2.983e-05,)] l_pix: 8.3883e+00 class_loss: 0.0000e+00 average_loss: 5.0000e-01 loss: 3.5053e+01 
21-09-21 14:09:20.219 - INFO: [epoch:  0, iter:  41,600, lr:(2.983e-05,)] l_pix: 8.9537e+00 class_loss: 0.0000e+00 average_loss: 1.0000e+00 loss: 3.8815e+01 
21-09-21 14:14:01.158 - INFO: [epoch:  0, iter:  41,700, lr:(2.983e-05,)] l_pix: 1.7819e+00 class_loss: 0.0000e+00 average_loss: 0.0000e+00 loss: 7.1275e+00 
21-09-21 14:18:48.322 - INFO: [epoch:  0, iter:  41,800, lr:(2.983e-05,)] l_pix: 4.6855e+00 class_loss: 2.8864e-03 average_loss: 5.0000e-01 loss: 2.0244e+01 
21-09-21 14:23:31.739 - INFO: [epoch:  0, iter:  41,900, lr:(2.983e-05,)] l_pix: 4.4644e+00 class_loss: 6.5612e-02 average_loss: 6.3314e-01 loss: 1.9790e+01 
21-09-21 14:28:09.040 - INFO: [epoch:  0, iter:  42,000, lr:(2.983e-05,)] l_pix: 1.1075e+01 class_loss: 2.4344e-02 average_loss: 3.1250e-01 loss: 4.5250e+01 
21-09-21 14:28:09.045 - INFO: Saving models and training states.
21-09-21 14:33:02.303 - INFO: [epoch:  0, iter:  42,100, lr:(2.983e-05,)] l_pix: 4.0543e+00 class_loss: 2.3842e-07 average_loss: 7.5000e-01 loss: 1.8467e+01 
21-09-21 14:37:39.176 - INFO: [epoch:  0, iter:  42,200, lr:(2.983e-05,)] l_pix: 9.6534e-01 class_loss: 0.0000e+00 average_loss: 8.1250e-01 loss: 6.2988e+00 
21-09-21 14:42:17.609 - INFO: [epoch:  0, iter:  42,300, lr:(2.982e-05,)] l_pix: 4.6862e+00 class_loss: 0.0000e+00 average_loss: 7.5000e-01 loss: 2.0995e+01 
21-09-21 14:46:52.812 - INFO: [epoch:  0, iter:  42,400, lr:(2.982e-05,)] l_pix: 8.3754e+00 class_loss: 0.0000e+00 average_loss: 5.0000e-01 loss: 3.5002e+01 
21-09-21 14:51:29.317 - INFO: [epoch:  0, iter:  42,500, lr:(2.982e-05,)] l_pix: 6.7452e+00 class_loss: 2.5413e-02 average_loss: 5.0000e-01 loss: 2.8493e+01 
21-09-21 14:56:06.312 - INFO: [epoch:  0, iter:  42,600, lr:(2.982e-05,)] l_pix: 5.0384e+00 class_loss: 0.0000e+00 average_loss: 5.0000e-01 loss: 2.1654e+01 
21-09-21 15:01:06.447 - INFO: [epoch:  0, iter:  42,700, lr:(2.982e-05,)] l_pix: 1.9442e+01 class_loss: 0.0000e+00 average_loss: 3.7500e-01 loss: 7.8893e+01 
21-09-21 15:05:54.640 - INFO: [epoch:  0, iter:  42,800, lr:(2.982e-05,)] l_pix: 3.9630e+00 class_loss: 3.0372e-03 average_loss: 2.5228e-01 loss: 1.6610e+01 
21-09-21 15:10:30.520 - INFO: [epoch:  0, iter:  42,900, lr:(2.982e-05,)] l_pix: 8.8380e+00 class_loss: 1.4026e-03 average_loss: 3.7605e-01 loss: 3.6481e+01 
21-09-21 15:15:05.800 - INFO: [epoch:  0, iter:  43,000, lr:(2.982e-05,)] l_pix: 3.2120e+00 class_loss: 6.1750e-05 average_loss: 5.6245e-01 loss: 1.4535e+01 
21-09-21 15:20:01.424 - INFO: [epoch:  0, iter:  43,100, lr:(2.982e-05,)] l_pix: 5.0034e+00 class_loss: 1.8573e-04 average_loss: 4.3750e-01 loss: 2.1326e+01 
21-09-21 15:24:54.464 - INFO: [epoch:  0, iter:  43,200, lr:(2.982e-05,)] l_pix: 6.9334e+00 class_loss: 7.6580e-04 average_loss: 7.5057e-01 loss: 2.9986e+01 
21-09-21 15:29:32.686 - INFO: [epoch:  0, iter:  43,300, lr:(2.982e-05,)] l_pix: 2.1870e+00 class_loss: 1.7360e-03 average_loss: 4.9913e-01 loss: 1.0246e+01 
21-09-21 15:34:10.521 - INFO: [epoch:  0, iter:  43,400, lr:(2.982e-05,)] l_pix: 5.1979e+00 class_loss: 0.0000e+00 average_loss: 4.3750e-01 loss: 2.2104e+01 
21-09-21 15:38:46.046 - INFO: [epoch:  0, iter:  43,500, lr:(2.981e-05,)] l_pix: 3.0199e+00 class_loss: 0.0000e+00 average_loss: 5.0000e-01 loss: 1.3580e+01 
21-09-21 15:43:21.364 - INFO: [epoch:  0, iter:  43,600, lr:(2.981e-05,)] l_pix: 8.2980e+00 class_loss: 0.0000e+00 average_loss: 8.1250e-01 loss: 3.5630e+01 
21-09-21 15:48:02.859 - INFO: [epoch:  0, iter:  43,700, lr:(2.981e-05,)] l_pix: 5.5071e+00 class_loss: 0.0000e+00 average_loss: 5.0000e-01 loss: 2.3528e+01 
21-09-21 15:52:58.258 - INFO: [epoch:  0, iter:  43,800, lr:(2.981e-05,)] l_pix: 1.9351e+00 class_loss: 0.0000e+00 average_loss: 4.3750e-01 loss: 9.0528e+00 
21-09-21 15:57:37.390 - INFO: [epoch:  0, iter:  43,900, lr:(2.981e-05,)] l_pix: 7.5503e+00 class_loss: 0.0000e+00 average_loss: 7.5000e-01 loss: 3.2451e+01 
21-09-21 16:02:17.063 - INFO: [epoch:  0, iter:  44,000, lr:(2.981e-05,)] l_pix: 3.8948e+00 class_loss: 0.0000e+00 average_loss: 6.2500e-01 loss: 1.7454e+01 
21-09-21 16:02:17.067 - INFO: Saving models and training states.
21-09-21 16:06:59.919 - INFO: [epoch:  0, iter:  44,100, lr:(2.981e-05,)] l_pix: 6.6322e+00 class_loss: 3.0750e-02 average_loss: 6.6444e-01 loss: 2.8537e+01 
21-09-21 16:11:36.980 - INFO: [epoch:  0, iter:  44,200, lr:(2.981e-05,)] l_pix: 6.3705e+00 class_loss: 4.4107e-05 average_loss: 8.1247e-01 loss: 2.7920e+01 
21-09-21 16:16:18.857 - INFO: [epoch:  0, iter:  44,300, lr:(2.981e-05,)] l_pix: 1.0946e+01 class_loss: 3.2425e-05 average_loss: 5.0000e-01 loss: 4.5286e+01 
21-09-21 16:20:57.791 - INFO: [epoch:  0, iter:  44,400, lr:(2.981e-05,)] l_pix: 9.6933e+00 class_loss: 0.0000e+00 average_loss: 5.0000e-01 loss: 4.0273e+01 
21-09-21 16:25:46.497 - INFO: [epoch:  0, iter:  44,500, lr:(2.981e-05,)] l_pix: 2.3913e+00 class_loss: 4.1956e-03 average_loss: 5.0314e-01 loss: 1.1077e+01 
21-09-21 16:30:24.749 - INFO: [epoch:  0, iter:  44,600, lr:(2.980e-05,)] l_pix: 2.8089e+00 class_loss: 0.0000e+00 average_loss: 1.0000e+00 loss: 1.4236e+01 
21-09-21 16:35:02.388 - INFO: [epoch:  0, iter:  44,700, lr:(2.980e-05,)] l_pix: 9.6261e-01 class_loss: 0.0000e+00 average_loss: 3.1250e-01 loss: 4.7879e+00 
21-09-21 16:39:38.445 - INFO: [epoch:  0, iter:  44,800, lr:(2.980e-05,)] l_pix: 6.9106e+00 class_loss: 0.0000e+00 average_loss: 5.0000e-01 loss: 2.9142e+01 
21-09-21 16:44:24.085 - INFO: [epoch:  0, iter:  44,900, lr:(2.980e-05,)] l_pix: 5.7794e+00 class_loss: 0.0000e+00 average_loss: 3.1250e-01 loss: 2.4055e+01 
21-09-21 16:49:01.239 - INFO: [epoch:  0, iter:  45,000, lr:(2.980e-05,)] l_pix: 3.8474e+00 class_loss: 0.0000e+00 average_loss: 5.0000e-01 loss: 1.6890e+01 
[                              ] 0/10, elapsed: 0s, ETA:
Start...
[2F[J[>>>---------------------------] 1/10, 0.0 task/s, elapsed: 62s, ETA:   555s
Test 0801x4
[2F[J[>>>>>>------------------------] 2/10, 0.0 task/s, elapsed: 121s, ETA:   486s
Test 0802x4
[2F[J[>>>>>>>>>---------------------] 3/10, 0.0 task/s, elapsed: 198s, ETA:   461s
Test 0803x4
[2F[J[>>>>>>>>>>>>------------------] 4/10, 0.0 task/s, elapsed: 253s, ETA:   380s
Test 0804x4
[2F[J[>>>>>>>>>>>>>>>---------------] 5/10, 0.0 task/s, elapsed: 326s, ETA:   326s
Test 0805x4
[2F[J[>>>>>>>>>>>>>>>>>>------------] 6/10, 0.0 task/s, elapsed: 387s, ETA:   258s
Test 0806x4
[2F[J[>>>>>>>>>>>>>>>>>>>>>---------] 7/10, 0.0 task/s, elapsed: 438s, ETA:   188s
Test 0807x4
[2F[J[>>>>>>>>>>>>>>>>>>>>>>>>------] 8/10, 0.0 task/s, elapsed: 499s, ETA:   125s
Test 0808x4
[2F[J[>>>>>>>>>>>>>>>>>>>>>>>>>>>---] 9/10, 0.0 task/s, elapsed: 559s, ETA:    62s
Test 0809x4
[2F[J[>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>] 10/10, 0.0 task/s, elapsed: 631s, ETA:     0s
Test 0810x4
21-09-21 16:59:32.202 - INFO: # Validation # PSNR: 2.9698e+01
21-09-21 16:59:32.203 - INFO: # Validation # FLOPs: 2.1939e+01
21-09-21 16:59:32.203 - INFO: # Validation # Percent: 6.7299e-01
21-09-21 16:59:32.203 - INFO: # Validation # TYPE num: 741 408 885 
21-09-21 16:59:32.203 - INFO: # Validation # PSNR Class: 37.06648969019684 31.812200793022573 30.759182321841294
21-09-21 17:04:09.141 - INFO: [epoch:  0, iter:  45,100, lr:(2.980e-05,)] l_pix: 8.2416e+00 class_loss: 9.7752e-06 average_loss: 3.7500e-01 loss: 3.4091e+01 
21-09-21 17:08:45.820 - INFO: [epoch:  0, iter:  45,200, lr:(2.980e-05,)] l_pix: 1.7271e+00 class_loss: 7.1526e-07 average_loss: 3.1250e-01 loss: 7.8461e+00 
21-09-21 17:13:22.663 - INFO: [epoch:  0, iter:  45,300, lr:(2.980e-05,)] l_pix: 2.2570e+00 class_loss: 0.0000e+00 average_loss: 6.2500e-02 loss: 9.2156e+00 
21-09-21 17:18:00.094 - INFO: [epoch:  0, iter:  45,400, lr:(2.980e-05,)] l_pix: 9.0303e+00 class_loss: 3.7081e-03 average_loss: 4.3750e-01 loss: 3.7436e+01 
21-09-21 17:22:36.789 - INFO: [epoch:  0, iter:  45,500, lr:(2.980e-05,)] l_pix: 4.8574e+00 class_loss: 2.8789e-04 average_loss: 5.6228e-01 loss: 2.1117e+01 
21-09-21 17:27:13.327 - INFO: [epoch:  0, iter:  45,600, lr:(2.980e-05,)] l_pix: 1.3230e+01 class_loss: 0.0000e+00 average_loss: 5.0000e-01 loss: 5.4419e+01 
21-09-21 17:31:54.557 - INFO: [epoch:  0, iter:  45,700, lr:(2.980e-05,)] l_pix: 7.1289e+00 class_loss: 2.7180e-05 average_loss: 9.3748e-01 loss: 3.1328e+01 
21-09-21 17:36:30.806 - INFO: [epoch:  0, iter:  45,800, lr:(2.979e-05,)] l_pix: 1.6242e+00 class_loss: 0.0000e+00 average_loss: 1.0000e+00 loss: 9.4967e+00 
21-09-21 17:41:06.485 - INFO: [epoch:  0, iter:  45,900, lr:(2.979e-05,)] l_pix: 1.1076e+01 class_loss: 5.0104e-04 average_loss: 5.6288e-01 loss: 4.5993e+01 
21-09-21 17:45:44.055 - INFO: [epoch:  0, iter:  46,000, lr:(2.979e-05,)] l_pix: 4.5279e+00 class_loss: 4.6849e-04 average_loss: 5.0000e-01 loss: 1.9612e+01 
21-09-21 17:45:44.060 - INFO: Saving models and training states.
21-09-21 17:50:26.184 - INFO: [epoch:  0, iter:  46,100, lr:(2.979e-05,)] l_pix: 4.6150e+00 class_loss: 0.0000e+00 average_loss: 7.5000e-01 loss: 2.0710e+01 
21-09-21 17:55:13.041 - INFO: [epoch:  0, iter:  46,200, lr:(2.979e-05,)] l_pix: 2.6913e+00 class_loss: 1.6928e-05 average_loss: 4.3751e-01 loss: 1.2078e+01 
21-09-21 17:59:30.739 - INFO: [epoch:  0, iter:  46,300, lr:(2.979e-05,)] l_pix: 3.8086e+00 class_loss: 0.0000e+00 average_loss: 1.0000e+00 loss: 1.8235e+01 
21-09-21 18:03:48.872 - INFO: [epoch:  0, iter:  46,400, lr:(2.979e-05,)] l_pix: 2.2491e+00 class_loss: 1.0809e-03 average_loss: 5.0000e-01 loss: 1.0497e+01 
21-09-21 18:08:06.354 - INFO: [epoch:  0, iter:  46,500, lr:(2.979e-05,)] l_pix: 3.6844e+00 class_loss: 0.0000e+00 average_loss: 5.0000e-01 loss: 1.6237e+01 
21-09-21 18:12:24.206 - INFO: [epoch:  0, iter:  46,600, lr:(2.979e-05,)] l_pix: 2.6263e+00 class_loss: 2.8241e-04 average_loss: 5.0000e-01 loss: 1.2005e+01 
21-09-21 18:16:41.820 - INFO: [epoch:  0, iter:  46,700, lr:(2.979e-05,)] l_pix: 1.4440e+01 class_loss: 0.0000e+00 average_loss: 1.0000e+00 loss: 6.0760e+01 
21-09-21 18:20:59.688 - INFO: [epoch:  0, iter:  46,800, lr:(2.979e-05,)] l_pix: 3.9087e+00 class_loss: 0.0000e+00 average_loss: 9.3750e-01 loss: 1.8447e+01 
21-09-21 18:25:18.719 - INFO: [epoch:  0, iter:  46,900, lr:(2.978e-05,)] l_pix: 5.5188e+00 class_loss: 0.0000e+00 average_loss: 1.0000e+00 loss: 2.5075e+01 
21-09-21 18:29:36.818 - INFO: [epoch:  0, iter:  47,000, lr:(2.978e-05,)] l_pix: 9.0315e+00 class_loss: 1.5926e-02 average_loss: 5.1191e-01 loss: 3.7670e+01 
21-09-21 18:33:55.532 - INFO: [epoch:  0, iter:  47,100, lr:(2.978e-05,)] l_pix: 5.4980e+00 class_loss: 0.0000e+00 average_loss: 3.1250e-01 loss: 2.2930e+01 
21-09-21 18:38:14.708 - INFO: [epoch:  0, iter:  47,200, lr:(2.978e-05,)] l_pix: 1.2454e+01 class_loss: 0.0000e+00 average_loss: 7.5000e-01 loss: 5.2068e+01 
21-09-21 18:42:34.261 - INFO: [epoch:  0, iter:  47,300, lr:(2.978e-05,)] l_pix: 1.3042e+01 class_loss: 0.0000e+00 average_loss: 5.0000e-01 loss: 5.3670e+01 
21-09-21 18:46:54.415 - INFO: [epoch:  0, iter:  47,400, lr:(2.978e-05,)] l_pix: 5.5196e+00 class_loss: 0.0000e+00 average_loss: 7.5000e-01 loss: 2.4328e+01 
21-09-21 18:51:20.330 - INFO: [epoch:  0, iter:  47,500, lr:(2.978e-05,)] l_pix: 9.4134e+00 class_loss: 2.7338e-02 average_loss: 4.7950e-01 loss: 3.9106e+01 
21-09-21 18:55:38.767 - INFO: [epoch:  0, iter:  47,600, lr:(2.978e-05,)] l_pix: 5.6934e-01 class_loss: 0.0000e+00 average_loss: 1.0000e+00 loss: 5.2774e+00 
21-09-21 18:59:58.253 - INFO: [epoch:  0, iter:  47,700, lr:(2.978e-05,)] l_pix: 2.7090e+00 class_loss: 1.5543e-01 average_loss: 7.3396e-01 loss: 1.3116e+01 
21-09-21 19:04:22.163 - INFO: [epoch:  0, iter:  47,800, lr:(2.978e-05,)] l_pix: 9.7876e+00 class_loss: 4.7684e-06 average_loss: 6.2500e-01 loss: 4.1025e+01 
21-09-21 19:09:16.347 - INFO: [epoch:  0, iter:  47,900, lr:(2.978e-05,)] l_pix: 6.7125e+00 class_loss: 1.1921e-07 average_loss: 2.5000e-01 loss: 2.7600e+01 
21-09-21 19:14:05.838 - INFO: [epoch:  0, iter:  48,000, lr:(2.977e-05,)] l_pix: 1.2316e+01 class_loss: 0.0000e+00 average_loss: 9.3750e-01 loss: 5.2077e+01 
21-09-21 19:14:05.841 - INFO: Saving models and training states.
21-09-21 19:18:31.472 - INFO: [epoch:  0, iter:  48,100, lr:(2.977e-05,)] l_pix: 5.0836e+00 class_loss: 7.6532e-05 average_loss: 6.2442e-02 loss: 2.0522e+01 
21-09-21 19:22:51.704 - INFO: [epoch:  0, iter:  48,200, lr:(2.977e-05,)] l_pix: 1.1901e+01 class_loss: 0.0000e+00 average_loss: 5.0000e-01 loss: 4.9104e+01 
21-09-21 19:27:11.232 - INFO: [epoch:  0, iter:  48,300, lr:(2.977e-05,)] l_pix: 3.8464e+00 class_loss: 9.0599e-06 average_loss: 2.5001e-01 loss: 1.6136e+01 
21-09-21 19:31:31.095 - INFO: [epoch:  0, iter:  48,400, lr:(2.977e-05,)] l_pix: 4.4901e+00 class_loss: 0.0000e+00 average_loss: 2.5000e-01 loss: 1.8710e+01 
21-09-21 19:35:50.465 - INFO: [epoch:  0, iter:  48,500, lr:(2.977e-05,)] l_pix: 2.7643e+00 class_loss: 0.0000e+00 average_loss: 5.0000e-01 loss: 1.2557e+01 
21-09-21 19:40:09.936 - INFO: [epoch:  0, iter:  48,600, lr:(2.977e-05,)] l_pix: 4.7965e+00 class_loss: 0.0000e+00 average_loss: 6.8750e-01 loss: 2.1248e+01 
21-09-21 19:44:29.128 - INFO: [epoch:  0, iter:  48,700, lr:(2.977e-05,)] l_pix: 4.2307e+00 class_loss: 1.9526e-04 average_loss: 7.5015e-01 loss: 1.9173e+01 
21-09-21 19:48:48.660 - INFO: [epoch:  0, iter:  48,800, lr:(2.977e-05,)] l_pix: 1.2440e+01 class_loss: 0.0000e+00 average_loss: 7.5000e-01 loss: 5.2009e+01 
21-09-21 19:53:08.711 - INFO: [epoch:  0, iter:  48,900, lr:(2.977e-05,)] l_pix: 5.5438e+00 class_loss: 1.7846e-04 average_loss: 6.2490e-01 loss: 2.4050e+01 
21-09-21 19:57:28.719 - INFO: [epoch:  0, iter:  49,000, lr:(2.976e-05,)] l_pix: 5.0438e+00 class_loss: 0.0000e+00 average_loss: 5.6250e-01 loss: 2.1863e+01 
21-09-21 20:01:48.349 - INFO: [epoch:  0, iter:  49,100, lr:(2.976e-05,)] l_pix: 2.7004e+00 class_loss: 0.0000e+00 average_loss: 4.3750e-01 loss: 1.2114e+01 
21-09-21 20:06:08.083 - INFO: [epoch:  0, iter:  49,200, lr:(2.976e-05,)] l_pix: 6.8674e+00 class_loss: 2.5430e-03 average_loss: 5.0000e-01 loss: 2.8971e+01 
21-09-21 20:10:28.186 - INFO: [epoch:  0, iter:  49,300, lr:(2.976e-05,)] l_pix: 3.3324e+00 class_loss: 9.2983e-06 average_loss: 5.0000e-01 loss: 1.4830e+01 
21-09-21 20:14:47.425 - INFO: [epoch:  0, iter:  49,400, lr:(2.976e-05,)] l_pix: 3.7145e+00 class_loss: 0.0000e+00 average_loss: 2.5000e-01 loss: 1.5608e+01 
21-09-21 20:19:06.356 - INFO: [epoch:  0, iter:  49,500, lr:(2.976e-05,)] l_pix: 3.0737e+00 class_loss: 2.0416e-03 average_loss: 5.6403e-01 loss: 1.3988e+01 
21-09-21 20:23:26.085 - INFO: [epoch:  0, iter:  49,600, lr:(2.976e-05,)] l_pix: 9.0489e+00 class_loss: 1.1921e-07 average_loss: 5.0000e-01 loss: 3.7695e+01 
21-09-21 20:27:46.928 - INFO: [epoch:  0, iter:  49,700, lr:(2.976e-05,)] l_pix: 7.7979e+00 class_loss: 0.0000e+00 average_loss: 5.6250e-01 loss: 3.2879e+01 
21-09-21 20:32:05.587 - INFO: [epoch:  0, iter:  49,800, lr:(2.976e-05,)] l_pix: 4.1372e+00 class_loss: 0.0000e+00 average_loss: 2.5000e-01 loss: 1.7299e+01 
21-09-21 20:36:24.470 - INFO: [epoch:  0, iter:  49,900, lr:(2.976e-05,)] l_pix: 8.7508e+00 class_loss: 0.0000e+00 average_loss: 7.5000e-01 loss: 3.7253e+01 
21-09-21 20:40:44.827 - INFO: [epoch:  0, iter:  50,000, lr:(2.976e-05,)] l_pix: 4.1308e+00 class_loss: 0.0000e+00 average_loss: 3.1250e-01 loss: 1.7461e+01 
[                              ] 0/10, elapsed: 0s, ETA:
Start...
[2F[J[>>>---------------------------] 1/10, 0.0 task/s, elapsed: 58s, ETA:   522s
Test 0801x4
[2F[J[>>>>>>------------------------] 2/10, 0.0 task/s, elapsed: 114s, ETA:   457s
Test 0802x4
[2F[J[>>>>>>>>>---------------------] 3/10, 0.0 task/s, elapsed: 181s, ETA:   422s
Test 0803x4
[2F[J[>>>>>>>>>>>>------------------] 4/10, 0.0 task/s, elapsed: 232s, ETA:   348s
Test 0804x4
[2F[J[>>>>>>>>>>>>>>>---------------] 5/10, 0.0 task/s, elapsed: 298s, ETA:   298s
Test 0805x4
[2F[J[>>>>>>>>>>>>>>>>>>------------] 6/10, 0.0 task/s, elapsed: 354s, ETA:   236s
Test 0806x4
[2F[J[>>>>>>>>>>>>>>>>>>>>>---------] 7/10, 0.0 task/s, elapsed: 400s, ETA:   172s
Test 0807x4
[2F[J[>>>>>>>>>>>>>>>>>>>>>>>>------] 8/10, 0.0 task/s, elapsed: 457s, ETA:   114s
Test 0808x4
[2F[J[>>>>>>>>>>>>>>>>>>>>>>>>>>>---] 9/10, 0.0 task/s, elapsed: 513s, ETA:    57s
Test 0809x4
[2F[J[>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>] 10/10, 0.0 task/s, elapsed: 579s, ETA:     0s
Test 0810x4
21-09-21 20:50:24.052 - INFO: # Validation # PSNR: 2.9683e+01
21-09-21 20:50:24.052 - INFO: # Validation # FLOPs: 2.1113e+01
21-09-21 20:50:24.052 - INFO: # Validation # Percent: 6.4765e-01
21-09-21 20:50:24.052 - INFO: # Validation # TYPE num: 825 393 816 
21-09-21 20:50:24.053 - INFO: # Validation # PSNR Class: 36.681250876152866 31.803976169115952 30.466567292600303
21-09-21 20:50:24.053 - INFO: Saving models and training states.
21-09-21 20:54:46.528 - INFO: [epoch:  0, iter:  50,100, lr:(2.975e-05,)] l_pix: 2.3699e+00 class_loss: 0.0000e+00 average_loss: 2.5000e-01 loss: 1.0230e+01 
21-09-21 20:59:03.787 - INFO: [epoch:  0, iter:  50,200, lr:(2.975e-05,)] l_pix: 1.2830e+01 class_loss: 0.0000e+00 average_loss: 9.3750e-01 loss: 5.4132e+01 
21-09-21 21:03:21.940 - INFO: [epoch:  0, iter:  50,300, lr:(2.975e-05,)] l_pix: 6.1892e+00 class_loss: 0.0000e+00 average_loss: 5.0000e-01 loss: 2.6257e+01 
21-09-21 21:07:43.752 - INFO: [epoch:  0, iter:  50,400, lr:(2.975e-05,)] l_pix: 2.3120e+00 class_loss: 5.7220e-06 average_loss: 8.7500e-01 loss: 1.1873e+01 
21-09-21 21:12:10.091 - INFO: [epoch:  0, iter:  50,500, lr:(2.975e-05,)] l_pix: 5.3492e+00 class_loss: 0.0000e+00 average_loss: 8.1250e-01 loss: 2.3834e+01 
21-09-21 21:16:29.151 - INFO: [epoch:  0, iter:  50,600, lr:(2.975e-05,)] l_pix: 5.4883e+00 class_loss: 0.0000e+00 average_loss: 2.5000e-01 loss: 2.2703e+01 
21-09-21 21:20:50.378 - INFO: [epoch:  0, iter:  50,700, lr:(2.975e-05,)] l_pix: 2.6969e+00 class_loss: 0.0000e+00 average_loss: 3.1250e-01 loss: 1.1725e+01 
21-09-21 21:25:11.800 - INFO: [epoch:  0, iter:  50,800, lr:(2.975e-05,)] l_pix: 4.7383e+00 class_loss: 0.0000e+00 average_loss: 6.2500e-01 loss: 2.0828e+01 
21-09-21 21:29:32.993 - INFO: [epoch:  0, iter:  50,900, lr:(2.975e-05,)] l_pix: 4.3833e+00 class_loss: 0.0000e+00 average_loss: 6.2500e-01 loss: 1.9408e+01 
21-09-21 21:33:54.301 - INFO: [epoch:  0, iter:  51,000, lr:(2.975e-05,)] l_pix: 2.8573e+00 class_loss: 3.6784e-02 average_loss: 5.9009e-01 loss: 1.3218e+01 
21-09-21 21:38:14.870 - INFO: [epoch:  0, iter:  51,100, lr:(2.974e-05,)] l_pix: 3.9925e+00 class_loss: 5.0759e-04 average_loss: 6.2881e-02 loss: 1.6159e+01 
21-09-21 21:42:34.804 - INFO: [epoch:  0, iter:  51,200, lr:(2.974e-05,)] l_pix: 1.1673e+01 class_loss: 4.8828e-04 average_loss: 3.7500e-01 loss: 4.7818e+01 
21-09-21 21:46:54.549 - INFO: [epoch:  0, iter:  51,300, lr:(2.974e-05,)] l_pix: 1.2670e+00 class_loss: 9.2995e-04 average_loss: 1.8702e-01 loss: 5.6296e+00 
21-09-21 21:51:15.010 - INFO: [epoch:  0, iter:  51,400, lr:(2.974e-05,)] l_pix: 8.9209e+00 class_loss: 4.4942e-05 average_loss: 3.1247e-01 loss: 3.6621e+01 
21-09-21 21:55:35.450 - INFO: [epoch:  0, iter:  51,500, lr:(2.974e-05,)] l_pix: 2.2403e+00 class_loss: 0.0000e+00 average_loss: 1.8750e-01 loss: 9.5237e+00 
21-09-21 21:59:55.119 - INFO: [epoch:  0, iter:  51,600, lr:(2.974e-05,)] l_pix: 5.3672e+00 class_loss: 0.0000e+00 average_loss: 9.3750e-01 loss: 2.4281e+01 
21-09-21 22:04:14.535 - INFO: [epoch:  0, iter:  51,700, lr:(2.974e-05,)] l_pix: 3.3324e+00 class_loss: 0.0000e+00 average_loss: 4.3750e-01 loss: 1.4642e+01 
21-09-21 22:08:34.293 - INFO: [epoch:  0, iter:  51,800, lr:(2.974e-05,)] l_pix: 2.6304e+00 class_loss: 0.0000e+00 average_loss: 6.2500e-02 loss: 1.0709e+01 
21-09-21 22:12:54.974 - INFO: [epoch:  0, iter:  51,900, lr:(2.974e-05,)] l_pix: 5.9706e+00 class_loss: 2.0742e-05 average_loss: 4.3750e-01 loss: 2.5195e+01 
21-09-21 22:17:15.671 - INFO: [epoch:  0, iter:  52,000, lr:(2.974e-05,)] l_pix: 3.6483e+00 class_loss: 2.3842e-07 average_loss: 6.8750e-01 loss: 1.6656e+01 
21-09-21 22:17:15.674 - INFO: Saving models and training states.
21-09-21 22:21:40.925 - INFO: [epoch:  0, iter:  52,100, lr:(2.973e-05,)] l_pix: 1.2040e+00 class_loss: 0.0000e+00 average_loss: 4.3750e-01 loss: 6.1284e+00 
21-09-21 22:26:00.507 - INFO: [epoch:  0, iter:  52,200, lr:(2.973e-05,)] l_pix: 1.4275e+01 class_loss: 1.1563e-04 average_loss: 8.7509e-01 loss: 5.9725e+01 
21-09-21 22:30:21.110 - INFO: [epoch:  0, iter:  52,300, lr:(2.973e-05,)] l_pix: 4.8387e+00 class_loss: 0.0000e+00 average_loss: 4.3750e-01 loss: 2.0667e+01 
21-09-21 22:34:42.098 - INFO: [epoch:  0, iter:  52,400, lr:(2.973e-05,)] l_pix: 1.0168e+01 class_loss: 2.3842e-07 average_loss: 5.0000e-01 loss: 4.2171e+01 
21-09-21 22:39:05.817 - INFO: [epoch:  0, iter:  52,500, lr:(2.973e-05,)] l_pix: 8.8993e+00 class_loss: 0.0000e+00 average_loss: 8.1250e-01 loss: 3.8035e+01 
21-09-21 22:43:33.162 - INFO: [epoch:  0, iter:  52,600, lr:(2.973e-05,)] l_pix: 6.8784e+00 class_loss: 0.0000e+00 average_loss: 7.5000e-01 loss: 2.9763e+01 
21-09-21 22:47:53.965 - INFO: [epoch:  0, iter:  52,700, lr:(2.973e-05,)] l_pix: 4.9221e+00 class_loss: 5.9940e-03 average_loss: 6.8750e-01 loss: 2.1754e+01 
21-09-21 22:52:13.776 - INFO: [epoch:  0, iter:  52,800, lr:(2.973e-05,)] l_pix: 5.0826e+00 class_loss: 0.0000e+00 average_loss: 5.0000e-01 loss: 2.1830e+01 
21-09-21 22:56:32.339 - INFO: [epoch:  0, iter:  52,900, lr:(2.973e-05,)] l_pix: 1.1754e+00 class_loss: 0.0000e+00 average_loss: 6.8750e-01 loss: 6.7641e+00 
21-09-21 23:00:51.548 - INFO: [epoch:  0, iter:  53,000, lr:(2.973e-05,)] l_pix: 3.8359e+00 class_loss: 4.7827e-04 average_loss: 6.2464e-01 loss: 1.7218e+01 
21-09-21 23:05:11.328 - INFO: [epoch:  0, iter:  53,100, lr:(2.972e-05,)] l_pix: 7.8859e+00 class_loss: 2.3842e-07 average_loss: 3.1250e-01 loss: 3.2481e+01 
21-09-21 23:09:29.555 - INFO: [epoch:  0, iter:  53,200, lr:(2.972e-05,)] l_pix: 3.4228e+00 class_loss: 1.0485e-01 average_loss: 5.0000e-01 loss: 1.5243e+01 
21-09-21 23:13:54.108 - INFO: [epoch:  0, iter:  53,300, lr:(2.972e-05,)] l_pix: 1.8479e+01 class_loss: 2.3842e-07 average_loss: 9.3750e-01 loss: 7.6728e+01 
21-09-21 23:18:42.068 - INFO: [epoch:  0, iter:  53,400, lr:(2.972e-05,)] l_pix: 3.0578e+00 class_loss: 9.6147e-02 average_loss: 7.0833e-01 loss: 1.4404e+01 
21-09-21 23:23:29.710 - INFO: [epoch:  0, iter:  53,500, lr:(2.972e-05,)] l_pix: 2.7954e+00 class_loss: 0.0000e+00 average_loss: 6.8750e-01 loss: 1.3244e+01 
21-09-21 23:28:17.123 - INFO: [epoch:  0, iter:  53,600, lr:(2.972e-05,)] l_pix: 3.5074e+00 class_loss: 2.0385e-05 average_loss: 8.1252e-01 loss: 1.6467e+01 
21-09-21 23:33:04.723 - INFO: [epoch:  0, iter:  53,700, lr:(2.972e-05,)] l_pix: 3.6549e+00 class_loss: 9.1672e-05 average_loss: 5.0000e-01 loss: 1.6120e+01 
21-09-21 23:37:52.467 - INFO: [epoch:  0, iter:  53,800, lr:(2.972e-05,)] l_pix: 3.8327e+00 class_loss: 4.1053e-03 average_loss: 2.4692e-01 loss: 1.6074e+01 
21-09-21 23:42:40.020 - INFO: [epoch:  0, iter:  53,900, lr:(2.972e-05,)] l_pix: 7.8715e+00 class_loss: 0.0000e+00 average_loss: 5.6250e-01 loss: 3.3173e+01 
21-09-21 23:47:27.682 - INFO: [epoch:  0, iter:  54,000, lr:(2.971e-05,)] l_pix: 6.6133e+00 class_loss: 6.6996e-05 average_loss: 5.6245e-01 loss: 2.8141e+01 
21-09-21 23:47:27.685 - INFO: Saving models and training states.
21-09-21 23:52:20.673 - INFO: [epoch:  0, iter:  54,100, lr:(2.971e-05,)] l_pix: 7.8691e+00 class_loss: 0.0000e+00 average_loss: 5.0000e-01 loss: 3.2976e+01 
21-09-21 23:56:41.996 - INFO: [epoch:  0, iter:  54,200, lr:(2.971e-05,)] l_pix: 3.6927e+00 class_loss: 0.0000e+00 average_loss: 1.8750e-01 loss: 1.5333e+01 
21-09-22 00:01:00.989 - INFO: [epoch:  0, iter:  54,300, lr:(2.971e-05,)] l_pix: 2.2030e+00 class_loss: 5.6505e-05 average_loss: 3.1250e-01 loss: 9.7496e+00 
21-09-22 00:05:20.143 - INFO: [epoch:  0, iter:  54,400, lr:(2.971e-05,)] l_pix: 5.5172e+00 class_loss: 0.0000e+00 average_loss: 4.3750e-01 loss: 2.3381e+01 
21-09-22 00:09:39.503 - INFO: [epoch:  0, iter:  54,500, lr:(2.971e-05,)] l_pix: 2.9596e+00 class_loss: 2.3842e-06 average_loss: 5.0000e-01 loss: 1.3338e+01 
21-09-22 00:13:59.109 - INFO: [epoch:  0, iter:  54,600, lr:(2.971e-05,)] l_pix: 4.9356e+00 class_loss: 1.9910e-02 average_loss: 4.2258e-01 loss: 2.1020e+01 
21-09-22 00:18:19.732 - INFO: [epoch:  0, iter:  54,700, lr:(2.971e-05,)] l_pix: 1.5916e+00 class_loss: 0.0000e+00 average_loss: 6.8750e-01 loss: 8.4290e+00 
21-09-22 00:22:40.079 - INFO: [epoch:  0, iter:  54,800, lr:(2.971e-05,)] l_pix: 3.0087e+00 class_loss: 0.0000e+00 average_loss: 5.0000e-01 loss: 1.3535e+01 
21-09-22 00:27:00.920 - INFO: [epoch:  0, iter:  54,900, lr:(2.971e-05,)] l_pix: 3.9927e+00 class_loss: 0.0000e+00 average_loss: 3.1250e-01 loss: 1.6908e+01 
21-09-22 00:31:27.893 - INFO: [epoch:  0, iter:  55,000, lr:(2.970e-05,)] l_pix: 1.1204e+01 class_loss: 0.0000e+00 average_loss: 1.0000e+00 loss: 4.7815e+01 
[                              ] 0/10, elapsed: 0s, ETA:
Start...
[2F[J[>>>---------------------------] 1/10, 0.0 task/s, elapsed: 60s, ETA:   539s
Test 0801x4
[2F[J[>>>>>>------------------------] 2/10, 0.0 task/s, elapsed: 118s, ETA:   471s
Test 0802x4
[2F[J[>>>>>>>>>---------------------] 3/10, 0.0 task/s, elapsed: 186s, ETA:   434s
Test 0803x4
[2F[J[>>>>>>>>>>>>------------------] 4/10, 0.0 task/s, elapsed: 239s, ETA:   358s
Test 0804x4
[2F[J[>>>>>>>>>>>>>>>---------------] 5/10, 0.0 task/s, elapsed: 307s, ETA:   307s
Test 0805x4
[2F[J[>>>>>>>>>>>>>>>>>>------------] 6/10, 0.0 task/s, elapsed: 365s, ETA:   244s
Test 0806x4
[2F[J[>>>>>>>>>>>>>>>>>>>>>---------] 7/10, 0.0 task/s, elapsed: 413s, ETA:   177s
Test 0807x4
[2F[J[>>>>>>>>>>>>>>>>>>>>>>>>------] 8/10, 0.0 task/s, elapsed: 470s, ETA:   118s
Test 0808x4
[2F[J[>>>>>>>>>>>>>>>>>>>>>>>>>>>---] 9/10, 0.0 task/s, elapsed: 528s, ETA:    59s
Test 0809x4
[2F[J[>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>] 10/10, 0.0 task/s, elapsed: 596s, ETA:     0s
Test 0810x4
21-09-22 00:41:24.515 - INFO: # Validation # PSNR: 2.9704e+01
21-09-22 00:41:24.515 - INFO: # Validation # FLOPs: 2.1861e+01
21-09-22 00:41:24.515 - INFO: # Validation # Percent: 6.7058e-01
21-09-22 00:41:24.515 - INFO: # Validation # TYPE num: 694 503 837 
21-09-22 00:41:24.515 - INFO: # Validation # PSNR Class: 36.744578013437035 31.387249970093304 31.170179800836472
21-09-22 00:45:42.470 - INFO: [epoch:  0, iter:  55,100, lr:(2.970e-05,)] l_pix: 1.2212e+00 class_loss: 2.3842e-07 average_loss: 3.7500e-01 loss: 6.0100e+00 
21-09-22 00:50:01.098 - INFO: [epoch:  0, iter:  55,200, lr:(2.970e-05,)] l_pix: 3.0739e+00 class_loss: 0.0000e+00 average_loss: 1.0000e+00 loss: 1.5296e+01 
21-09-22 00:54:20.617 - INFO: [epoch:  0, iter:  55,300, lr:(2.970e-05,)] l_pix: 1.2172e+01 class_loss: 3.7127e-02 average_loss: 4.3904e-01 loss: 5.0022e+01 
21-09-22 00:58:38.911 - INFO: [epoch:  0, iter:  55,400, lr:(2.970e-05,)] l_pix: 4.4098e+00 class_loss: 0.0000e+00 average_loss: 3.1250e-01 loss: 1.8577e+01 
21-09-22 01:02:58.750 - INFO: [epoch:  0, iter:  55,500, lr:(2.970e-05,)] l_pix: 1.5174e+01 class_loss: 1.8120e-05 average_loss: 8.1251e-01 loss: 6.3132e+01 
21-09-22 01:07:19.820 - INFO: [epoch:  0, iter:  55,600, lr:(2.970e-05,)] l_pix: 3.4898e+00 class_loss: 0.0000e+00 average_loss: 4.3750e-01 loss: 1.5272e+01 
21-09-22 01:12:00.114 - INFO: [epoch:  0, iter:  55,700, lr:(2.970e-05,)] l_pix: 2.7043e+00 class_loss: 2.4264e-02 average_loss: 4.8180e-01 loss: 1.2275e+01 
21-09-22 01:16:20.714 - INFO: [epoch:  0, iter:  55,800, lr:(2.970e-05,)] l_pix: 1.5621e+00 class_loss: 0.0000e+00 average_loss: 3.7500e-01 loss: 7.3736e+00 
21-09-22 01:20:41.962 - INFO: [epoch:  0, iter:  55,900, lr:(2.969e-05,)] l_pix: 3.0275e+00 class_loss: 0.0000e+00 average_loss: 7.5000e-01 loss: 1.4360e+01 
21-09-22 01:25:02.428 - INFO: [epoch:  0, iter:  56,000, lr:(2.969e-05,)] l_pix: 4.8872e+00 class_loss: 0.0000e+00 average_loss: 5.0000e-01 loss: 2.1049e+01 
21-09-22 01:25:02.431 - INFO: Saving models and training states.
21-09-22 01:29:27.820 - INFO: [epoch:  0, iter:  56,100, lr:(2.969e-05,)] l_pix: 5.9198e+00 class_loss: 0.0000e+00 average_loss: 1.0000e+00 loss: 2.6679e+01 
21-09-22 01:33:47.405 - INFO: [epoch:  0, iter:  56,200, lr:(2.969e-05,)] l_pix: 3.3215e+00 class_loss: 0.0000e+00 average_loss: 8.1250e-01 loss: 1.5723e+01 
21-09-22 01:38:07.760 - INFO: [epoch:  0, iter:  56,300, lr:(2.969e-05,)] l_pix: 1.1861e+01 class_loss: 1.2312e-02 average_loss: 3.2052e-01 loss: 4.8413e+01 
21-09-22 01:42:28.628 - INFO: [epoch:  0, iter:  56,400, lr:(2.969e-05,)] l_pix: 1.0865e+01 class_loss: 9.2976e-03 average_loss: 3.1947e-01 loss: 4.4422e+01 
21-09-22 01:46:49.169 - INFO: [epoch:  0, iter:  56,500, lr:(2.969e-05,)] l_pix: 2.7402e+00 class_loss: 0.0000e+00 average_loss: 4.3750e-01 loss: 1.2273e+01 
21-09-22 01:51:09.361 - INFO: [epoch:  0, iter:  56,600, lr:(2.969e-05,)] l_pix: 5.2411e+00 class_loss: 0.0000e+00 average_loss: 3.1250e-01 loss: 2.1902e+01 
21-09-22 01:55:29.602 - INFO: [epoch:  0, iter:  56,700, lr:(2.969e-05,)] l_pix: 1.2668e+01 class_loss: 1.1921e-07 average_loss: 4.3750e-01 loss: 5.1986e+01 
21-09-22 01:59:50.318 - INFO: [epoch:  0, iter:  56,800, lr:(2.968e-05,)] l_pix: 2.0019e+00 class_loss: 0.0000e+00 average_loss: 1.0000e+00 loss: 1.1008e+01 
21-09-22 02:04:11.068 - INFO: [epoch:  0, iter:  56,900, lr:(2.968e-05,)] l_pix: 4.8450e+00 class_loss: 8.3215e-03 average_loss: 5.0624e-01 loss: 2.0903e+01 
21-09-22 02:08:30.641 - INFO: [epoch:  0, iter:  57,000, lr:(2.968e-05,)] l_pix: 9.0967e+00 class_loss: 0.0000e+00 average_loss: 2.5000e-01 loss: 3.7137e+01 
21-09-22 02:12:49.821 - INFO: [epoch:  0, iter:  57,100, lr:(2.968e-05,)] l_pix: 7.7732e+00 class_loss: 0.0000e+00 average_loss: 1.2500e-01 loss: 3.1468e+01 
21-09-22 02:17:08.472 - INFO: [epoch:  0, iter:  57,200, lr:(2.968e-05,)] l_pix: 7.0827e+00 class_loss: 8.5616e-04 average_loss: 4.3750e-01 loss: 2.9644e+01 
21-09-22 02:21:27.193 - INFO: [epoch:  0, iter:  57,300, lr:(2.968e-05,)] l_pix: 6.3235e+00 class_loss: 0.0000e+00 average_loss: 1.8750e-01 loss: 2.5857e+01 
21-09-22 02:25:45.813 - INFO: [epoch:  0, iter:  57,400, lr:(2.968e-05,)] l_pix: 1.2038e+01 class_loss: 1.0794e-02 average_loss: 3.2060e-01 loss: 4.9119e+01 
21-09-22 02:30:04.404 - INFO: [epoch:  0, iter:  57,500, lr:(2.968e-05,)] l_pix: 1.2542e+01 class_loss: 0.0000e+00 average_loss: 6.8750e-01 loss: 5.2232e+01 
21-09-22 02:34:22.776 - INFO: [epoch:  0, iter:  57,600, lr:(2.968e-05,)] l_pix: 4.8271e-01 class_loss: 0.0000e+00 average_loss: 1.0000e+00 loss: 4.9309e+00 
21-09-22 02:38:41.624 - INFO: [epoch:  0, iter:  57,700, lr:(2.967e-05,)] l_pix: 7.6594e+00 class_loss: 0.0000e+00 average_loss: 3.7500e-01 loss: 3.1763e+01 
21-09-22 02:42:59.984 - INFO: [epoch:  0, iter:  57,800, lr:(2.967e-05,)] l_pix: 7.1205e+00 class_loss: 0.0000e+00 average_loss: 4.3750e-01 loss: 2.9794e+01 
21-09-22 02:47:17.709 - INFO: [epoch:  0, iter:  57,900, lr:(2.967e-05,)] l_pix: 5.9726e+00 class_loss: 9.1672e-05 average_loss: 4.3750e-01 loss: 2.5203e+01 
21-09-22 02:51:35.832 - INFO: [epoch:  0, iter:  58,000, lr:(2.967e-05,)] l_pix: 5.8118e+00 class_loss: 1.9073e-06 average_loss: 5.6250e-01 loss: 2.4935e+01 
21-09-22 02:51:35.835 - INFO: Saving models and training states.
21-09-22 02:56:00.578 - INFO: [epoch:  0, iter:  58,100, lr:(2.967e-05,)] l_pix: 2.5665e+00 class_loss: 0.0000e+00 average_loss: 1.8750e-01 loss: 1.0829e+01 
21-09-22 03:00:20.423 - INFO: [epoch:  0, iter:  58,200, lr:(2.967e-05,)] l_pix: 7.1098e+00 class_loss: 2.0318e-03 average_loss: 4.9849e-01 loss: 2.9936e+01 
21-09-22 03:04:41.300 - INFO: [epoch:  0, iter:  58,300, lr:(2.967e-05,)] l_pix: 6.3551e+00 class_loss: 0.0000e+00 average_loss: 3.1250e-01 loss: 2.6358e+01 
21-09-22 03:09:02.482 - INFO: [epoch:  0, iter:  58,400, lr:(2.967e-05,)] l_pix: 1.5016e+00 class_loss: 0.0000e+00 average_loss: 5.0000e-01 loss: 7.5064e+00 
21-09-22 03:13:21.863 - INFO: [epoch:  0, iter:  58,500, lr:(2.967e-05,)] l_pix: 2.2354e+01 class_loss: 0.0000e+00 average_loss: 8.1250e-01 loss: 9.1853e+01 
21-09-22 03:17:42.806 - INFO: [epoch:  0, iter:  58,600, lr:(2.966e-05,)] l_pix: 2.4765e+00 class_loss: 5.1188e-04 average_loss: 1.8788e-01 loss: 1.0470e+01 
21-09-22 03:22:02.317 - INFO: [epoch:  0, iter:  58,700, lr:(2.966e-05,)] l_pix: 3.4840e+00 class_loss: 0.0000e+00 average_loss: 1.8750e-01 loss: 1.4499e+01 
21-09-22 03:26:21.633 - INFO: [epoch:  0, iter:  58,800, lr:(2.966e-05,)] l_pix: 4.6476e+00 class_loss: 1.0540e-01 average_loss: 3.7500e-01 loss: 1.9768e+01 
21-09-22 03:30:41.202 - INFO: [epoch:  0, iter:  58,900, lr:(2.966e-05,)] l_pix: 1.0116e+01 class_loss: 0.0000e+00 average_loss: 6.2500e-01 loss: 4.2340e+01 
21-09-22 03:34:59.305 - INFO: [epoch:  0, iter:  59,000, lr:(2.966e-05,)] l_pix: 4.4599e+00 class_loss: 3.5542e-01 average_loss: 5.0000e-01 loss: 1.9517e+01 
21-09-22 03:39:26.095 - INFO: [epoch:  0, iter:  59,100, lr:(2.966e-05,)] l_pix: 4.4445e+00 class_loss: 0.0000e+00 average_loss: 5.6250e-01 loss: 1.9466e+01 
21-09-22 03:43:47.855 - INFO: [epoch:  0, iter:  59,200, lr:(2.966e-05,)] l_pix: 1.1335e+01 class_loss: 0.0000e+00 average_loss: 1.2500e-01 loss: 4.5715e+01 
21-09-22 03:48:07.948 - INFO: [epoch:  0, iter:  59,300, lr:(2.966e-05,)] l_pix: 4.7556e+00 class_loss: 2.3842e-07 average_loss: 7.5000e-01 loss: 2.1272e+01 
21-09-22 03:52:27.061 - INFO: [epoch:  0, iter:  59,400, lr:(2.966e-05,)] l_pix: 1.4334e+00 class_loss: 1.7483e-02 average_loss: 5.4939e-01 loss: 7.3906e+00 
21-09-22 03:56:46.362 - INFO: [epoch:  0, iter:  59,500, lr:(2.965e-05,)] l_pix: 6.7000e+00 class_loss: 5.5742e-04 average_loss: 1.8750e-01 loss: 2.7363e+01 
21-09-22 04:01:06.689 - INFO: [epoch:  0, iter:  59,600, lr:(2.965e-05,)] l_pix: 6.4351e+00 class_loss: 0.0000e+00 average_loss: 1.0000e+00 loss: 2.8740e+01 
21-09-22 04:05:27.053 - INFO: [epoch:  0, iter:  59,700, lr:(2.965e-05,)] l_pix: 6.7505e+00 class_loss: 0.0000e+00 average_loss: 5.0000e-01 loss: 2.8502e+01 
21-09-22 04:09:45.278 - INFO: [epoch:  0, iter:  59,800, lr:(2.965e-05,)] l_pix: 6.0269e+00 class_loss: 0.0000e+00 average_loss: 1.0000e+00 loss: 2.7108e+01 
21-09-22 04:14:02.334 - INFO: [epoch:  0, iter:  59,900, lr:(2.965e-05,)] l_pix: 1.0136e+01 class_loss: 0.0000e+00 average_loss: 5.0000e-01 loss: 4.2042e+01 
21-09-22 04:18:19.954 - INFO: [epoch:  0, iter:  60,000, lr:(2.965e-05,)] l_pix: 3.5067e+00 class_loss: 0.0000e+00 average_loss: 7.5000e-01 loss: 1.6277e+01 
[                              ] 0/10, elapsed: 0s, ETA:
Start...
[2F[J[>>>---------------------------] 1/10, 0.0 task/s, elapsed: 59s, ETA:   527s
Test 0801x4
[2F[J[>>>>>>------------------------] 2/10, 0.0 task/s, elapsed: 115s, ETA:   462s
Test 0802x4
[2F[J[>>>>>>>>>---------------------] 3/10, 0.0 task/s, elapsed: 182s, ETA:   426s
Test 0803x4
[2F[J[>>>>>>>>>>>>------------------] 4/10, 0.0 task/s, elapsed: 235s, ETA:   352s
Test 0804x4
[2F[J[>>>>>>>>>>>>>>>---------------] 5/10, 0.0 task/s, elapsed: 303s, ETA:   303s
Test 0805x4
[2F[J[>>>>>>>>>>>>>>>>>>------------] 6/10, 0.0 task/s, elapsed: 360s, ETA:   240s
Test 0806x4
[2F[J[>>>>>>>>>>>>>>>>>>>>>---------] 7/10, 0.0 task/s, elapsed: 407s, ETA:   175s
Test 0807x4
[2F[J[>>>>>>>>>>>>>>>>>>>>>>>>------] 8/10, 0.0 task/s, elapsed: 465s, ETA:   116s
Test 0808x4
[2F[J[>>>>>>>>>>>>>>>>>>>>>>>>>>>---] 9/10, 0.0 task/s, elapsed: 522s, ETA:    58s
Test 0809x4
[2F[J[>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>] 10/10, 0.0 task/s, elapsed: 590s, ETA:     0s
Test 0810x4
21-09-22 04:28:10.388 - INFO: # Validation # PSNR: 2.9700e+01
21-09-22 04:28:10.388 - INFO: # Validation # FLOPs: 2.1885e+01
21-09-22 04:28:10.388 - INFO: # Validation # Percent: 6.7131e-01
21-09-22 04:28:10.389 - INFO: # Validation # TYPE num: 746 408 880 
21-09-22 04:28:10.389 - INFO: # Validation # PSNR Class: 36.938891813642066 31.60659813319048 30.881569212528014
21-09-22 04:28:10.389 - INFO: Saving models and training states.
21-09-22 04:32:36.353 - INFO: [epoch:  0, iter:  60,100, lr:(2.965e-05,)] l_pix: 1.4803e+00 class_loss: 0.0000e+00 average_loss: 8.7500e-01 loss: 8.5464e+00 
21-09-22 04:36:56.490 - INFO: [epoch:  0, iter:  60,200, lr:(2.965e-05,)] l_pix: 3.3637e+00 class_loss: 2.1458e-06 average_loss: 5.0000e-01 loss: 1.4955e+01 
21-09-22 04:41:15.225 - INFO: [epoch:  0, iter:  60,300, lr:(2.965e-05,)] l_pix: 2.3431e+00 class_loss: 0.0000e+00 average_loss: 1.8750e-01 loss: 9.9350e+00 
21-09-22 04:45:33.974 - INFO: [epoch:  0, iter:  60,400, lr:(2.964e-05,)] l_pix: 7.0685e+00 class_loss: 0.0000e+00 average_loss: 3.7500e-01 loss: 2.9399e+01 
21-09-22 04:49:52.792 - INFO: [epoch:  0, iter:  60,500, lr:(2.964e-05,)] l_pix: 5.9514e+00 class_loss: 0.0000e+00 average_loss: 1.0000e+00 loss: 2.6806e+01 
21-09-22 04:54:11.548 - INFO: [epoch:  0, iter:  60,600, lr:(2.964e-05,)] l_pix: 5.5959e+00 class_loss: 5.1951e-04 average_loss: 2.5039e-01 loss: 2.3135e+01 
21-09-22 04:58:30.095 - INFO: [epoch:  0, iter:  60,700, lr:(2.964e-05,)] l_pix: 6.7606e+00 class_loss: 1.1373e-04 average_loss: 8.1257e-01 loss: 2.9480e+01 
21-09-22 05:02:48.848 - INFO: [epoch:  0, iter:  60,800, lr:(2.964e-05,)] l_pix: 3.7372e+00 class_loss: 2.8610e-06 average_loss: 4.3750e-01 loss: 1.6261e+01 
21-09-22 05:07:07.749 - INFO: [epoch:  0, iter:  60,900, lr:(2.964e-05,)] l_pix: 2.8944e+00 class_loss: 0.0000e+00 average_loss: 3.7500e-01 loss: 1.2703e+01 
21-09-22 05:11:27.531 - INFO: [epoch:  0, iter:  61,000, lr:(2.964e-05,)] l_pix: 5.7686e+00 class_loss: 7.6250e-03 average_loss: 3.1822e-01 loss: 2.4033e+01 
21-09-22 05:15:47.807 - INFO: [epoch:  0, iter:  61,100, lr:(2.964e-05,)] l_pix: 1.4630e+00 class_loss: 0.0000e+00 average_loss: 1.0000e+00 loss: 8.8521e+00 
21-09-22 05:20:07.523 - INFO: [epoch:  0, iter:  61,200, lr:(2.963e-05,)] l_pix: 8.7826e-01 class_loss: 0.0000e+00 average_loss: 1.0000e+00 loss: 6.5130e+00 
21-09-22 05:24:27.016 - INFO: [epoch:  0, iter:  61,300, lr:(2.963e-05,)] l_pix: 5.7768e+00 class_loss: 0.0000e+00 average_loss: 5.6250e-01 loss: 2.4795e+01 
21-09-22 05:28:46.544 - INFO: [epoch:  0, iter:  61,400, lr:(2.963e-05,)] l_pix: 1.0780e+01 class_loss: 3.7347e-02 average_loss: 3.7388e-01 loss: 4.4261e+01 
21-09-22 05:33:06.299 - INFO: [epoch:  0, iter:  61,500, lr:(2.963e-05,)] l_pix: 3.4114e+00 class_loss: 5.0366e-04 average_loss: 4.9962e-01 loss: 1.5145e+01 
21-09-22 05:37:25.805 - INFO: [epoch:  0, iter:  61,600, lr:(2.963e-05,)] l_pix: 8.0934e+00 class_loss: 6.5167e-03 average_loss: 6.2989e-01 loss: 3.4267e+01 
21-09-22 05:41:45.184 - INFO: [epoch:  0, iter:  61,700, lr:(2.963e-05,)] l_pix: 1.6576e+01 class_loss: 0.0000e+00 average_loss: 3.7500e-01 loss: 6.7431e+01 
21-09-22 05:46:04.624 - INFO: [epoch:  0, iter:  61,800, lr:(2.963e-05,)] l_pix: 1.4682e+01 class_loss: 0.0000e+00 average_loss: 3.7500e-01 loss: 5.9853e+01 
21-09-22 05:50:24.350 - INFO: [epoch:  0, iter:  61,900, lr:(2.963e-05,)] l_pix: 3.1124e+00 class_loss: 5.9605e-07 average_loss: 5.0000e-01 loss: 1.3950e+01 
21-09-22 05:54:44.311 - INFO: [epoch:  0, iter:  62,000, lr:(2.963e-05,)] l_pix: 8.5071e-01 class_loss: 1.7405e-05 average_loss: 9.3749e-01 loss: 6.2153e+00 
21-09-22 05:54:44.315 - INFO: Saving models and training states.
21-09-22 05:59:12.655 - INFO: [epoch:  0, iter:  62,100, lr:(2.962e-05,)] l_pix: 2.0545e+00 class_loss: 7.8678e-06 average_loss: 6.2501e-01 loss: 1.0093e+01 
21-09-22 06:03:50.323 - INFO: [epoch:  0, iter:  62,200, lr:(2.962e-05,)] l_pix: 1.2982e+01 class_loss: 0.0000e+00 average_loss: 4.3750e-01 loss: 5.3240e+01 
21-09-22 06:08:39.445 - INFO: [epoch:  0, iter:  62,300, lr:(2.962e-05,)] l_pix: 1.6775e+00 class_loss: 3.0339e-04 average_loss: 5.0000e-01 loss: 8.2103e+00 
21-09-22 06:13:07.946 - INFO: [epoch:  0, iter:  62,400, lr:(2.962e-05,)] l_pix: 1.9172e+00 class_loss: 1.2732e-04 average_loss: 5.0000e-01 loss: 9.1690e+00 
21-09-22 06:17:27.669 - INFO: [epoch:  0, iter:  62,500, lr:(2.962e-05,)] l_pix: 9.3461e+00 class_loss: 0.0000e+00 average_loss: 5.0000e-01 loss: 3.8884e+01 
21-09-22 06:21:46.502 - INFO: [epoch:  0, iter:  62,600, lr:(2.962e-05,)] l_pix: 1.7179e+01 class_loss: 1.1097e-02 average_loss: 2.5000e-01 loss: 6.9471e+01 
21-09-22 06:26:05.372 - INFO: [epoch:  0, iter:  62,700, lr:(2.962e-05,)] l_pix: 4.9152e+00 class_loss: 0.0000e+00 average_loss: 5.0000e-01 loss: 2.1161e+01 
21-09-22 06:30:25.062 - INFO: [epoch:  0, iter:  62,800, lr:(2.962e-05,)] l_pix: 1.0950e+01 class_loss: 2.3329e-04 average_loss: 1.2500e-01 loss: 4.4176e+01 
21-09-22 06:34:44.824 - INFO: [epoch:  0, iter:  62,900, lr:(2.961e-05,)] l_pix: 2.8174e+00 class_loss: 0.0000e+00 average_loss: 1.0000e+00 loss: 1.4270e+01 
21-09-22 06:39:05.013 - INFO: [epoch:  0, iter:  63,000, lr:(2.961e-05,)] l_pix: 2.3406e+00 class_loss: 0.0000e+00 average_loss: 6.2500e-01 loss: 1.1237e+01 
21-09-22 06:43:25.107 - INFO: [epoch:  0, iter:  63,100, lr:(2.961e-05,)] l_pix: 1.6169e+00 class_loss: 0.0000e+00 average_loss: 5.6250e-01 loss: 8.1552e+00 
21-09-22 06:47:45.115 - INFO: [epoch:  0, iter:  63,200, lr:(2.961e-05,)] l_pix: 2.2115e+01 class_loss: 2.6226e-06 average_loss: 3.7500e-01 loss: 8.9585e+01 
21-09-22 06:52:04.209 - INFO: [epoch:  0, iter:  63,300, lr:(2.961e-05,)] l_pix: 1.3533e+01 class_loss: 0.0000e+00 average_loss: 4.3750e-01 loss: 5.5446e+01 
21-09-22 06:56:22.491 - INFO: [epoch:  0, iter:  63,400, lr:(2.961e-05,)] l_pix: 7.2513e+00 class_loss: 1.9228e-04 average_loss: 4.3750e-01 loss: 3.0318e+01 
21-09-22 07:00:40.798 - INFO: [epoch:  0, iter:  63,500, lr:(2.961e-05,)] l_pix: 2.5743e+00 class_loss: 0.0000e+00 average_loss: 3.1250e-01 loss: 1.1235e+01 
21-09-22 07:04:59.868 - INFO: [epoch:  0, iter:  63,600, lr:(2.961e-05,)] l_pix: 5.1730e+00 class_loss: 0.0000e+00 average_loss: 4.3750e-01 loss: 2.2004e+01 
21-09-22 07:09:38.300 - INFO: [epoch:  0, iter:  63,700, lr:(2.960e-05,)] l_pix: 2.9674e+00 class_loss: 0.0000e+00 average_loss: 1.0000e+00 loss: 1.4870e+01 
21-09-22 07:13:59.049 - INFO: [epoch:  0, iter:  63,800, lr:(2.960e-05,)] l_pix: 5.6821e+00 class_loss: 0.0000e+00 average_loss: 4.3750e-01 loss: 2.4041e+01 
21-09-22 07:18:18.488 - INFO: [epoch:  0, iter:  63,900, lr:(2.960e-05,)] l_pix: 8.5928e+00 class_loss: 3.8693e-02 average_loss: 4.8132e-01 loss: 3.5834e+01 
21-09-22 07:22:37.788 - INFO: [epoch:  0, iter:  64,000, lr:(2.960e-05,)] l_pix: 2.9161e+00 class_loss: 0.0000e+00 average_loss: 5.6250e-01 loss: 1.3352e+01 
21-09-22 07:22:37.790 - INFO: Saving models and training states.
21-09-22 07:27:03.199 - INFO: [epoch:  0, iter:  64,100, lr:(2.960e-05,)] l_pix: 1.0287e+00 class_loss: 0.0000e+00 average_loss: 5.0000e-01 loss: 5.6147e+00 
21-09-22 07:31:23.076 - INFO: [epoch:  0, iter:  64,200, lr:(2.960e-05,)] l_pix: 6.6146e+00 class_loss: 0.0000e+00 average_loss: 3.7500e-01 loss: 2.7583e+01 
21-09-22 07:35:42.716 - INFO: [epoch:  0, iter:  64,300, lr:(2.960e-05,)] l_pix: 3.5611e+00 class_loss: 1.6224e-02 average_loss: 3.0033e-01 loss: 1.5154e+01 
21-09-22 07:40:01.283 - INFO: [epoch:  0, iter:  64,400, lr:(2.960e-05,)] l_pix: 6.5645e+00 class_loss: 7.8309e-04 average_loss: 1.8691e-01 loss: 2.6819e+01 
21-09-22 07:44:19.786 - INFO: [epoch:  0, iter:  64,500, lr:(2.959e-05,)] l_pix: 2.5386e+00 class_loss: 3.3255e-02 average_loss: 3.5006e-01 loss: 1.1221e+01 
21-09-22 07:48:40.143 - INFO: [epoch:  0, iter:  64,600, lr:(2.959e-05,)] l_pix: 1.7710e+00 class_loss: 4.0293e-04 average_loss: 4.3750e-01 loss: 8.3968e+00 
21-09-22 07:52:59.779 - INFO: [epoch:  0, iter:  64,700, lr:(2.959e-05,)] l_pix: 5.1571e+00 class_loss: 2.1783e-02 average_loss: 7.3366e-01 loss: 2.2840e+01 
21-09-22 07:57:19.572 - INFO: [epoch:  0, iter:  64,800, lr:(2.959e-05,)] l_pix: 8.3470e+00 class_loss: 0.0000e+00 average_loss: 8.7500e-01 loss: 3.6013e+01 
21-09-22 08:01:39.708 - INFO: [epoch:  0, iter:  64,900, lr:(2.959e-05,)] l_pix: 9.5708e+00 class_loss: 0.0000e+00 average_loss: 8.1250e-01 loss: 4.0721e+01 
21-09-22 08:05:58.611 - INFO: [epoch:  0, iter:  65,000, lr:(2.959e-05,)] l_pix: 2.4593e+00 class_loss: 0.0000e+00 average_loss: 1.0000e+00 loss: 1.2837e+01 
[                              ] 0/10, elapsed: 0s, ETA:
Start...
[2F[J[>>>---------------------------] 1/10, 0.0 task/s, elapsed: 60s, ETA:   540s
Test 0801x4
[2F[J[>>>>>>------------------------] 2/10, 0.0 task/s, elapsed: 118s, ETA:   470s
Test 0802x4
[2F[J[>>>>>>>>>---------------------] 3/10, 0.0 task/s, elapsed: 186s, ETA:   433s
Test 0803x4
[2F[J[>>>>>>>>>>>>------------------] 4/10, 0.0 task/s, elapsed: 238s, ETA:   358s
Test 0804x4
[2F[J[>>>>>>>>>>>>>>>---------------] 5/10, 0.0 task/s, elapsed: 306s, ETA:   306s
Test 0805x4
[2F[J[>>>>>>>>>>>>>>>>>>------------] 6/10, 0.0 task/s, elapsed: 364s, ETA:   243s
Test 0806x4
[2F[J[>>>>>>>>>>>>>>>>>>>>>---------] 7/10, 0.0 task/s, elapsed: 411s, ETA:   176s
Test 0807x4
[2F[J[>>>>>>>>>>>>>>>>>>>>>>>>------] 8/10, 0.0 task/s, elapsed: 469s, ETA:   117s
Test 0808x4
[2F[J[>>>>>>>>>>>>>>>>>>>>>>>>>>>---] 9/10, 0.0 task/s, elapsed: 526s, ETA:    58s
Test 0809x4
[2F[J[>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>] 10/10, 0.0 task/s, elapsed: 595s, ETA:     0s
Test 0810x4
21-09-22 08:15:53.584 - INFO: # Validation # PSNR: 2.9664e+01
21-09-22 08:15:53.584 - INFO: # Validation # FLOPs: 2.2318e+01
21-09-22 08:15:53.584 - INFO: # Validation # Percent: 6.8459e-01
21-09-22 08:15:53.584 - INFO: # Validation # TYPE num: 723 379 932 
21-09-22 08:15:53.584 - INFO: # Validation # PSNR Class: 35.94062712538207 31.72135977257323 31.178408851776506
21-09-22 08:20:12.620 - INFO: [epoch:  0, iter:  65,100, lr:(2.959e-05,)] l_pix: 7.6247e+00 class_loss: 2.0341e-02 average_loss: 2.9724e-01 loss: 3.1401e+01 
21-09-22 08:24:32.402 - INFO: [epoch:  0, iter:  65,200, lr:(2.959e-05,)] l_pix: 4.4516e+00 class_loss: 2.8515e-04 average_loss: 5.0000e-01 loss: 1.9306e+01 
21-09-22 08:28:52.110 - INFO: [epoch:  0, iter:  65,300, lr:(2.959e-05,)] l_pix: 4.6604e+00 class_loss: 2.1172e-04 average_loss: 3.7490e-01 loss: 1.9766e+01 
21-09-22 08:33:11.251 - INFO: [epoch:  0, iter:  65,400, lr:(2.958e-05,)] l_pix: 2.5122e+00 class_loss: 0.0000e+00 average_loss: 6.8750e-01 loss: 1.2111e+01 
21-09-22 08:37:30.632 - INFO: [epoch:  0, iter:  65,500, lr:(2.958e-05,)] l_pix: 8.4406e+00 class_loss: 0.0000e+00 average_loss: 6.8750e-01 loss: 3.5825e+01 
21-09-22 08:41:51.735 - INFO: [epoch:  0, iter:  65,600, lr:(2.958e-05,)] l_pix: 1.3214e+00 class_loss: 1.3540e-01 average_loss: 6.4845e-01 loss: 7.2987e+00 
21-09-22 08:46:39.896 - INFO: [epoch:  0, iter:  65,700, lr:(2.958e-05,)] l_pix: 1.9488e+00 class_loss: 1.7706e-01 average_loss: 6.7098e-01 loss: 9.8969e+00 
21-09-22 08:51:19.737 - INFO: [epoch:  0, iter:  65,800, lr:(2.958e-05,)] l_pix: 9.2216e+00 class_loss: 0.0000e+00 average_loss: 3.7500e-01 loss: 3.8011e+01 
21-09-22 08:55:40.811 - INFO: [epoch:  0, iter:  65,900, lr:(2.958e-05,)] l_pix: 4.4018e+00 class_loss: 0.0000e+00 average_loss: 3.7500e-01 loss: 1.8732e+01 
21-09-22 09:00:01.690 - INFO: [epoch:  0, iter:  66,000, lr:(2.958e-05,)] l_pix: 6.6849e+00 class_loss: 0.0000e+00 average_loss: 1.0000e+00 loss: 2.9740e+01 
21-09-22 09:00:01.693 - INFO: Saving models and training states.
21-09-22 09:04:28.283 - INFO: [epoch:  0, iter:  66,100, lr:(2.957e-05,)] l_pix: 3.9440e+00 class_loss: 0.0000e+00 average_loss: 3.1250e-01 loss: 1.6714e+01 
21-09-22 09:08:46.861 - INFO: [epoch:  0, iter:  66,200, lr:(2.957e-05,)] l_pix: 1.1021e+01 class_loss: 0.0000e+00 average_loss: 4.3750e-01 loss: 4.5395e+01 
21-09-22 09:13:05.902 - INFO: [epoch:  0, iter:  66,300, lr:(2.957e-05,)] l_pix: 5.9857e+00 class_loss: 0.0000e+00 average_loss: 5.6250e-01 loss: 2.5630e+01 
21-09-22 09:17:25.083 - INFO: [epoch:  0, iter:  66,400, lr:(2.957e-05,)] l_pix: 1.5083e+00 class_loss: 0.0000e+00 average_loss: 1.2500e-01 loss: 6.4084e+00 
21-09-22 09:21:44.673 - INFO: [epoch:  0, iter:  66,500, lr:(2.957e-05,)] l_pix: 7.5938e+00 class_loss: 4.2439e-05 average_loss: 3.1253e-01 loss: 3.1313e+01 
21-09-22 09:26:05.067 - INFO: [epoch:  0, iter:  66,600, lr:(2.957e-05,)] l_pix: 1.0218e+01 class_loss: 1.4100e-03 average_loss: 5.6144e-01 loss: 4.2557e+01 
21-09-22 09:30:25.679 - INFO: [epoch:  0, iter:  66,700, lr:(2.957e-05,)] l_pix: 1.7148e+01 class_loss: 0.0000e+00 average_loss: 6.2500e-01 loss: 7.0467e+01 
21-09-22 09:34:44.849 - INFO: [epoch:  0, iter:  66,800, lr:(2.957e-05,)] l_pix: 4.1770e+00 class_loss: 0.0000e+00 average_loss: 9.3750e-01 loss: 1.9521e+01 
21-09-22 09:39:03.535 - INFO: [epoch:  0, iter:  66,900, lr:(2.956e-05,)] l_pix: 3.6163e+00 class_loss: 0.0000e+00 average_loss: 4.3750e-01 loss: 1.5778e+01 
21-09-22 09:43:23.345 - INFO: [epoch:  0, iter:  67,000, lr:(2.956e-05,)] l_pix: 3.6216e+00 class_loss: 8.5831e-06 average_loss: 3.7499e-01 loss: 1.5611e+01 
21-09-22 09:47:43.228 - INFO: [epoch:  0, iter:  67,100, lr:(2.956e-05,)] l_pix: 2.3225e+00 class_loss: 0.0000e+00 average_loss: 9.3750e-01 loss: 1.2103e+01 
21-09-22 09:52:02.611 - INFO: [epoch:  0, iter:  67,200, lr:(2.956e-05,)] l_pix: 1.7631e+00 class_loss: 0.0000e+00 average_loss: 8.7500e-01 loss: 9.6773e+00 
21-09-22 09:56:22.330 - INFO: [epoch:  0, iter:  67,300, lr:(2.956e-05,)] l_pix: 1.6381e+01 class_loss: 0.0000e+00 average_loss: 5.0000e-01 loss: 6.7025e+01 
21-09-22 10:00:41.639 - INFO: [epoch:  0, iter:  67,400, lr:(2.956e-05,)] l_pix: 3.1881e+00 class_loss: 4.5706e-02 average_loss: 5.0000e-01 loss: 1.4275e+01 
21-09-22 10:05:01.131 - INFO: [epoch:  0, iter:  67,500, lr:(2.956e-05,)] l_pix: 9.9171e+00 class_loss: 0.0000e+00 average_loss: 6.2500e-01 loss: 4.1543e+01 
21-09-22 10:09:20.491 - INFO: [epoch:  0, iter:  67,600, lr:(2.956e-05,)] l_pix: 3.5154e+00 class_loss: 0.0000e+00 average_loss: 3.7500e-01 loss: 1.5186e+01 
21-09-22 10:13:39.887 - INFO: [epoch:  0, iter:  67,700, lr:(2.955e-05,)] l_pix: 3.3737e+00 class_loss: 1.6928e-05 average_loss: 5.0000e-01 loss: 1.4995e+01 
21-09-22 10:17:58.866 - INFO: [epoch:  0, iter:  67,800, lr:(2.955e-05,)] l_pix: 7.6077e-01 class_loss: 0.0000e+00 average_loss: 6.2500e-01 loss: 4.9181e+00 
21-09-22 10:22:18.317 - INFO: [epoch:  0, iter:  67,900, lr:(2.955e-05,)] l_pix: 1.1463e+00 class_loss: 0.0000e+00 average_loss: 6.8750e-01 loss: 6.6476e+00 
21-09-22 10:26:38.128 - INFO: [epoch:  0, iter:  68,000, lr:(2.955e-05,)] l_pix: 9.5586e-01 class_loss: 0.0000e+00 average_loss: 8.1250e-01 loss: 6.2609e+00 
21-09-22 10:26:38.131 - INFO: Saving models and training states.
21-09-22 10:31:03.913 - INFO: [epoch:  0, iter:  68,100, lr:(2.955e-05,)] l_pix: 6.7835e+00 class_loss: 0.0000e+00 average_loss: 5.0000e-01 loss: 2.8634e+01 
21-09-22 10:35:24.264 - INFO: [epoch:  0, iter:  68,200, lr:(2.955e-05,)] l_pix: 2.1139e+00 class_loss: 0.0000e+00 average_loss: 0.0000e+00 loss: 8.4555e+00 
21-09-22 10:39:44.220 - INFO: [epoch:  0, iter:  68,300, lr:(2.955e-05,)] l_pix: 5.7638e+00 class_loss: 0.0000e+00 average_loss: 5.6250e-01 loss: 2.4743e+01 
21-09-22 10:44:03.476 - INFO: [epoch:  0, iter:  68,400, lr:(2.955e-05,)] l_pix: 5.8302e+00 class_loss: 0.0000e+00 average_loss: 3.7500e-01 loss: 2.4446e+01 
21-09-22 10:48:21.746 - INFO: [epoch:  0, iter:  68,500, lr:(2.954e-05,)] l_pix: 1.1138e+01 class_loss: 0.0000e+00 average_loss: 3.1250e-01 loss: 4.5489e+01 
21-09-22 10:52:39.804 - INFO: [epoch:  0, iter:  68,600, lr:(2.954e-05,)] l_pix: 2.3168e+01 class_loss: 2.6941e-05 average_loss: 1.8750e-01 loss: 9.3236e+01 
21-09-22 10:56:57.235 - INFO: [epoch:  0, iter:  68,700, lr:(2.954e-05,)] l_pix: 7.0074e+00 class_loss: 4.7684e-07 average_loss: 5.6250e-01 loss: 2.9717e+01 
21-09-22 11:01:15.164 - INFO: [epoch:  0, iter:  68,800, lr:(2.954e-05,)] l_pix: 8.1190e+00 class_loss: 0.0000e+00 average_loss: 5.0000e-01 loss: 3.3976e+01 
21-09-22 11:05:34.141 - INFO: [epoch:  0, iter:  68,900, lr:(2.954e-05,)] l_pix: 6.5475e+00 class_loss: 1.1921e-07 average_loss: 5.0000e-01 loss: 2.7690e+01 
21-09-22 11:09:52.722 - INFO: [epoch:  0, iter:  69,000, lr:(2.954e-05,)] l_pix: 1.2121e+00 class_loss: 0.0000e+00 average_loss: 7.5000e-01 loss: 7.0984e+00 
21-09-22 11:14:12.384 - INFO: [epoch:  0, iter:  69,100, lr:(2.954e-05,)] l_pix: 8.9137e-01 class_loss: 2.7561e-04 average_loss: 9.9979e-01 loss: 6.5650e+00 
21-09-22 11:18:34.154 - INFO: [epoch:  0, iter:  69,200, lr:(2.953e-05,)] l_pix: 1.3086e+01 class_loss: 1.1921e-07 average_loss: 3.1250e-01 loss: 5.3283e+01 
21-09-22 11:22:55.382 - INFO: [epoch:  0, iter:  69,300, lr:(2.953e-05,)] l_pix: 9.4805e+00 class_loss: 0.0000e+00 average_loss: 3.7500e-01 loss: 3.9047e+01 
21-09-22 11:27:15.607 - INFO: [epoch:  0, iter:  69,400, lr:(2.953e-05,)] l_pix: 1.0051e+00 class_loss: 1.2672e-02 average_loss: 1.8577e-01 loss: 4.5841e+00 
21-09-22 11:31:36.444 - INFO: [epoch:  0, iter:  69,500, lr:(2.953e-05,)] l_pix: 5.2878e+00 class_loss: 0.0000e+00 average_loss: 3.7500e-01 loss: 2.2276e+01 
21-09-22 11:35:55.718 - INFO: [epoch:  0, iter:  69,600, lr:(2.953e-05,)] l_pix: 8.6796e-01 class_loss: 0.0000e+00 average_loss: 8.7500e-01 loss: 6.0968e+00 
21-09-22 11:40:14.893 - INFO: [epoch:  0, iter:  69,700, lr:(2.953e-05,)] l_pix: 5.3353e+00 class_loss: 1.1325e-04 average_loss: 2.4992e-01 loss: 2.2091e+01 
21-09-22 11:44:38.745 - INFO: [epoch:  0, iter:  69,800, lr:(2.953e-05,)] l_pix: 9.3544e+00 class_loss: 0.0000e+00 average_loss: 6.2500e-01 loss: 3.9293e+01 
21-09-22 11:48:59.701 - INFO: [epoch:  0, iter:  69,900, lr:(2.953e-05,)] l_pix: 6.1306e+00 class_loss: 0.0000e+00 average_loss: 1.0000e+00 loss: 2.7523e+01 
21-09-22 11:53:20.772 - INFO: [epoch:  0, iter:  70,000, lr:(2.952e-05,)] l_pix: 1.7910e+00 class_loss: 0.0000e+00 average_loss: 3.7500e-01 loss: 8.2891e+00 
[                              ] 0/10, elapsed: 0s, ETA:
Start...
[2F[J[>>>---------------------------] 1/10, 0.0 task/s, elapsed: 60s, ETA:   536s
Test 0801x4
[2F[J[>>>>>>------------------------] 2/10, 0.0 task/s, elapsed: 117s, ETA:   469s
Test 0802x4
[2F[J[>>>>>>>>>---------------------] 3/10, 0.0 task/s, elapsed: 185s, ETA:   432s
Test 0803x4
[2F[J[>>>>>>>>>>>>------------------] 4/10, 0.0 task/s, elapsed: 238s, ETA:   356s
Test 0804x4
[2F[J[>>>>>>>>>>>>>>>---------------] 5/10, 0.0 task/s, elapsed: 305s, ETA:   305s
Test 0805x4
[2F[J[>>>>>>>>>>>>>>>>>>------------] 6/10, 0.0 task/s, elapsed: 363s, ETA:   242s
Test 0806x4
[2F[J[>>>>>>>>>>>>>>>>>>>>>---------] 7/10, 0.0 task/s, elapsed: 410s, ETA:   176s
Test 0807x4
[2F[J[>>>>>>>>>>>>>>>>>>>>>>>>------] 8/10, 0.0 task/s, elapsed: 467s, ETA:   117s
Test 0808x4
[2F[J[>>>>>>>>>>>>>>>>>>>>>>>>>>>---] 9/10, 0.0 task/s, elapsed: 525s, ETA:    58s
Test 0809x4
[2F[J[>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>] 10/10, 0.0 task/s, elapsed: 593s, ETA:     0s
Test 0810x4
21-09-22 12:03:13.997 - INFO: # Validation # PSNR: 2.9695e+01
21-09-22 12:03:13.998 - INFO: # Validation # FLOPs: 2.1708e+01
21-09-22 12:03:13.998 - INFO: # Validation # Percent: 6.6590e-01
21-09-22 12:03:13.998 - INFO: # Validation # TYPE num: 737 452 845 
21-09-22 12:03:13.998 - INFO: # Validation # PSNR Class: 36.57222460411462 31.33791757106241 31.369123469899627
21-09-22 12:03:13.998 - INFO: Saving models and training states.
21-09-22 12:07:39.825 - INFO: [epoch:  0, iter:  70,100, lr:(2.952e-05,)] l_pix: 2.0031e+00 class_loss: 6.3419e-05 average_loss: 4.3755e-01 loss: 9.3250e+00 
21-09-22 12:11:59.380 - INFO: [epoch:  0, iter:  70,200, lr:(2.952e-05,)] l_pix: 1.0251e+01 class_loss: 0.0000e+00 average_loss: 6.8750e-01 loss: 4.3065e+01 
21-09-22 12:16:19.200 - INFO: [epoch:  0, iter:  70,300, lr:(2.952e-05,)] l_pix: 2.9641e+00 class_loss: 0.0000e+00 average_loss: 3.1250e-01 loss: 1.2794e+01 
21-09-22 12:20:39.464 - INFO: [epoch:  0, iter:  70,400, lr:(2.952e-05,)] l_pix: 8.2468e+00 class_loss: 0.0000e+00 average_loss: 1.0000e+00 loss: 3.5987e+01 
21-09-22 12:24:58.219 - INFO: [epoch:  0, iter:  70,500, lr:(2.952e-05,)] l_pix: 5.6536e+00 class_loss: 2.3842e-07 average_loss: 4.3750e-01 loss: 2.3927e+01 
21-09-22 12:29:17.173 - INFO: [epoch:  0, iter:  70,600, lr:(2.952e-05,)] l_pix: 2.9591e+00 class_loss: 0.0000e+00 average_loss: 8.7500e-01 loss: 1.4461e+01 
21-09-22 12:33:38.441 - INFO: [epoch:  0, iter:  70,700, lr:(2.951e-05,)] l_pix: 1.0444e+01 class_loss: 1.1377e-02 average_loss: 4.9147e-01 loss: 4.3257e+01 
21-09-22 12:37:59.886 - INFO: [epoch:  0, iter:  70,800, lr:(2.951e-05,)] l_pix: 4.3831e+00 class_loss: 1.1921e-07 average_loss: 5.0000e-01 loss: 1.9032e+01 
21-09-22 12:42:21.039 - INFO: [epoch:  0, iter:  70,900, lr:(2.951e-05,)] l_pix: 6.0187e+00 class_loss: 7.3910e-06 average_loss: 3.7500e-01 loss: 2.5200e+01 
21-09-22 12:46:40.657 - INFO: [epoch:  0, iter:  71,000, lr:(2.951e-05,)] l_pix: 2.0267e+01 class_loss: 0.0000e+00 average_loss: 6.2500e-01 loss: 8.2944e+01 
21-09-22 12:51:00.010 - INFO: [epoch:  0, iter:  71,100, lr:(2.951e-05,)] l_pix: 2.2697e+00 class_loss: 8.5700e-04 average_loss: 4.3750e-01 loss: 1.0392e+01 
21-09-22 12:55:19.037 - INFO: [epoch:  0, iter:  71,200, lr:(2.951e-05,)] l_pix: 3.8893e+00 class_loss: 1.7369e-02 average_loss: 8.2536e-01 loss: 1.8042e+01 
21-09-22 12:59:38.186 - INFO: [epoch:  0, iter:  71,300, lr:(2.951e-05,)] l_pix: 1.3390e+01 class_loss: 9.5367e-07 average_loss: 5.0000e-01 loss: 5.5058e+01 
21-09-22 13:03:57.811 - INFO: [epoch:  0, iter:  71,400, lr:(2.951e-05,)] l_pix: 4.1109e+00 class_loss: 3.3091e-02 average_loss: 7.7466e-01 loss: 1.8784e+01 
21-09-22 13:08:19.088 - INFO: [epoch:  0, iter:  71,500, lr:(2.950e-05,)] l_pix: 4.2179e+00 class_loss: 1.0295e-02 average_loss: 8.6734e-01 loss: 1.9479e+01 
21-09-22 13:12:39.238 - INFO: [epoch:  0, iter:  71,600, lr:(2.950e-05,)] l_pix: 7.8577e+00 class_loss: 5.4837e-03 average_loss: 1.2911e-01 loss: 3.1821e+01 
21-09-22 13:16:58.774 - INFO: [epoch:  0, iter:  71,700, lr:(2.950e-05,)] l_pix: 1.0946e+00 class_loss: 0.0000e+00 average_loss: 1.0000e+00 loss: 7.3786e+00 
21-09-22 13:21:18.980 - INFO: [epoch:  0, iter:  71,800, lr:(2.950e-05,)] l_pix: 1.8547e+01 class_loss: 1.4212e-02 average_loss: 6.7684e-01 loss: 7.6226e+01 
21-09-22 13:25:39.672 - INFO: [epoch:  0, iter:  71,900, lr:(2.950e-05,)] l_pix: 4.2391e+00 class_loss: 0.0000e+00 average_loss: 5.6250e-01 loss: 1.8644e+01 
21-09-22 13:30:00.288 - INFO: [epoch:  0, iter:  72,000, lr:(2.950e-05,)] l_pix: 8.2955e-01 class_loss: 2.1172e-04 average_loss: 6.8734e-01 loss: 5.3803e+00 
21-09-22 13:30:00.291 - INFO: Saving models and training states.
21-09-22 13:34:24.957 - INFO: [epoch:  0, iter:  72,100, lr:(2.950e-05,)] l_pix: 1.0703e+01 class_loss: 3.5821e-02 average_loss: 3.3937e-01 loss: 4.3850e+01 
21-09-22 13:38:45.628 - INFO: [epoch:  0, iter:  72,200, lr:(2.949e-05,)] l_pix: 6.0517e+00 class_loss: 1.1063e-04 average_loss: 6.2508e-01 loss: 2.6082e+01 
21-09-22 13:43:06.177 - INFO: [epoch:  0, iter:  72,300, lr:(2.949e-05,)] l_pix: 4.7557e+00 class_loss: 0.0000e+00 average_loss: 8.1250e-01 loss: 2.1460e+01 
21-09-22 13:47:26.503 - INFO: [epoch:  0, iter:  72,400, lr:(2.949e-05,)] l_pix: 8.4671e+00 class_loss: 3.8147e-02 average_loss: 3.0296e-01 loss: 3.4796e+01 
21-09-22 13:51:46.693 - INFO: [epoch:  0, iter:  72,500, lr:(2.949e-05,)] l_pix: 2.1037e+00 class_loss: 0.0000e+00 average_loss: 1.8750e-01 loss: 8.9774e+00 
21-09-22 13:56:07.313 - INFO: [epoch:  0, iter:  72,600, lr:(2.949e-05,)] l_pix: 5.0002e+00 class_loss: 0.0000e+00 average_loss: 9.3750e-01 loss: 2.2813e+01 
21-09-22 14:00:27.850 - INFO: [epoch:  0, iter:  72,700, lr:(2.949e-05,)] l_pix: 2.9664e+00 class_loss: 4.4608e-04 average_loss: 4.9967e-01 loss: 1.3365e+01 
21-09-22 14:04:48.214 - INFO: [epoch:  0, iter:  72,800, lr:(2.949e-05,)] l_pix: 6.3079e+00 class_loss: 4.8876e-06 average_loss: 1.8750e-01 loss: 2.5794e+01 
21-09-22 14:09:08.406 - INFO: [epoch:  0, iter:  72,900, lr:(2.948e-05,)] l_pix: 8.8674e+00 class_loss: 0.0000e+00 average_loss: 3.7500e-01 loss: 3.6595e+01 
21-09-22 14:13:28.855 - INFO: [epoch:  0, iter:  73,000, lr:(2.948e-05,)] l_pix: 2.9036e+00 class_loss: 0.0000e+00 average_loss: 6.2500e-01 loss: 1.3489e+01 
21-09-22 14:17:49.330 - INFO: [epoch:  0, iter:  73,100, lr:(2.948e-05,)] l_pix: 3.0868e+00 class_loss: 6.0320e-04 average_loss: 1.2455e-01 loss: 1.2721e+01 
21-09-22 14:22:09.586 - INFO: [epoch:  0, iter:  73,200, lr:(2.948e-05,)] l_pix: 2.5219e+00 class_loss: 3.5763e-07 average_loss: 4.3750e-01 loss: 1.1400e+01 
21-09-22 14:26:28.230 - INFO: [epoch:  0, iter:  73,300, lr:(2.948e-05,)] l_pix: 1.0360e+01 class_loss: 0.0000e+00 average_loss: 6.8750e-01 loss: 4.3502e+01 
21-09-22 14:30:47.199 - INFO: [epoch:  0, iter:  73,400, lr:(2.948e-05,)] l_pix: 3.5522e+00 class_loss: 0.0000e+00 average_loss: 2.5000e-01 loss: 1.4959e+01 
21-09-22 14:35:05.545 - INFO: [epoch:  0, iter:  73,500, lr:(2.948e-05,)] l_pix: 7.1144e+00 class_loss: 0.0000e+00 average_loss: 2.5000e-01 loss: 2.9208e+01 
21-09-22 14:39:23.401 - INFO: [epoch:  0, iter:  73,600, lr:(2.947e-05,)] l_pix: 1.1902e+01 class_loss: 4.7684e-07 average_loss: 5.0000e-01 loss: 4.9106e+01 
21-09-22 14:43:42.809 - INFO: [epoch:  0, iter:  73,700, lr:(2.947e-05,)] l_pix: 5.5521e+00 class_loss: 0.0000e+00 average_loss: 5.0000e-01 loss: 2.3708e+01 
21-09-22 14:48:01.772 - INFO: [epoch:  0, iter:  73,800, lr:(2.947e-05,)] l_pix: 2.1455e+00 class_loss: 0.0000e+00 average_loss: 1.0000e+00 loss: 1.1582e+01 
21-09-22 14:52:21.451 - INFO: [epoch:  0, iter:  73,900, lr:(2.947e-05,)] l_pix: 4.7325e+00 class_loss: 1.5807e-04 average_loss: 4.3750e-01 loss: 2.0242e+01 
21-09-22 14:56:40.365 - INFO: [epoch:  0, iter:  74,000, lr:(2.947e-05,)] l_pix: 7.3060e+00 class_loss: 0.0000e+00 average_loss: 3.1250e-01 loss: 3.0161e+01 
21-09-22 14:56:40.368 - INFO: Saving models and training states.
21-09-22 15:01:04.443 - INFO: [epoch:  0, iter:  74,100, lr:(2.947e-05,)] l_pix: 7.3119e+00 class_loss: 0.0000e+00 average_loss: 1.8750e-01 loss: 2.9810e+01 
21-09-22 15:05:22.937 - INFO: [epoch:  0, iter:  74,200, lr:(2.947e-05,)] l_pix: 8.7779e+00 class_loss: 0.0000e+00 average_loss: 6.8750e-01 loss: 3.7174e+01 
21-09-22 15:09:41.341 - INFO: [epoch:  0, iter:  74,300, lr:(2.946e-05,)] l_pix: 3.1526e+00 class_loss: 0.0000e+00 average_loss: 5.0000e-01 loss: 1.4111e+01 
21-09-22 15:14:00.092 - INFO: [epoch:  0, iter:  74,400, lr:(2.946e-05,)] l_pix: 7.4858e+00 class_loss: 0.0000e+00 average_loss: 5.0000e-01 loss: 3.1443e+01 
21-09-22 15:18:26.102 - INFO: [epoch:  1, iter:  74,500, lr:(2.946e-05,)] l_pix: 1.0876e+01 class_loss: 6.9380e-05 average_loss: 5.0000e-01 loss: 4.5002e+01 
21-09-22 15:22:47.499 - INFO: [epoch:  1, iter:  74,600, lr:(2.946e-05,)] l_pix: 6.0539e+00 class_loss: 1.6689e-06 average_loss: 7.5000e-01 loss: 2.6465e+01 
21-09-22 15:27:09.206 - INFO: [epoch:  1, iter:  74,700, lr:(2.946e-05,)] l_pix: 6.4191e+00 class_loss: 0.0000e+00 average_loss: 6.8750e-01 loss: 2.7739e+01 
21-09-22 15:31:29.725 - INFO: [epoch:  1, iter:  74,800, lr:(2.946e-05,)] l_pix: 6.8203e+00 class_loss: 0.0000e+00 average_loss: 5.0000e-01 loss: 2.8781e+01 
21-09-22 15:35:48.567 - INFO: [epoch:  1, iter:  74,900, lr:(2.946e-05,)] l_pix: 1.1809e+01 class_loss: 4.7684e-07 average_loss: 6.2500e-01 loss: 4.9109e+01 
21-09-22 15:40:07.748 - INFO: [epoch:  1, iter:  75,000, lr:(2.946e-05,)] l_pix: 7.1912e+00 class_loss: 9.0599e-06 average_loss: 3.1250e-01 loss: 2.9702e+01 
[                              ] 0/10, elapsed: 0s, ETA:
Start...
[2F[J[>>>---------------------------] 1/10, 0.0 task/s, elapsed: 59s, ETA:   529s
Test 0801x4
[2F[J[>>>>>>------------------------] 2/10, 0.0 task/s, elapsed: 116s, ETA:   463s
